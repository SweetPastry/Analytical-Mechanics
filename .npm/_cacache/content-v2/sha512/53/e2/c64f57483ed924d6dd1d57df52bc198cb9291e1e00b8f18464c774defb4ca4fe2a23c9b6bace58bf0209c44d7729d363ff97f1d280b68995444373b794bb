{"_id":"micromark","_rev":"46-eebbc7d14466978545805e4b3b06bdcb","name":"micromark","description":"small commonmark compliant markdown parser with positional info and concrete tokens","dist-tags":{"latest":"4.0.0","next":"3.0.0-beta.1"},"versions":{"1.0.0":{"name":"micromark","version":"1.0.0","description":"micro templating with markdown","main":"index.js","scripts":{"test":"node test | tap-spec"},"author":{"name":"Brian LeRoux","email":"b@brian.io"},"license":"Apache2","dependencies":{"commonmark":"^0.12.0","lodash.template":"^2.4.1"},"devDependencies":{"tap-spec":"^2.1.0","tape":"^3.0.3"},"gitHead":"44c9c385b3264f7632e7df2341ff17c8627d9b1e","_id":"micromark@1.0.0","_shasum":"afc50bc035a36f0ba9517774dbc3a98f3ae036fc","_from":".","_npmVersion":"2.0.0","_npmUser":{"name":"brianleroux","email":"b@brian.io"},"maintainers":[{"name":"brianleroux","email":"b@brian.io"}],"dist":{"shasum":"afc50bc035a36f0ba9517774dbc3a98f3ae036fc","tarball":"https://registry.npmjs.org/micromark/-/micromark-1.0.0.tgz","integrity":"sha512-830DfjZI86za3CtwwzaxJU27is5rZhpqLcQ9UgfVH0/OJsahYG8zK1kAEkNp7Wpu+dCEiYq+Qh0F5TcWaS1r9g==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDrLSOnc8FEu+YOUCseN36RD3S79/GqrDtiwDHbiRrR8AiB91Lx8Dcdu9cjf1S3a5/L8lZvkhda1sbyrNJs6qTzrpw=="}]},"directories":{}},"2.0.0":{"name":"micromark","version":"2.0.0","description":"smol markdown parser that’s different","license":"MIT","keywords":[],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/cli":"^7.0.0","@babel/core":"^7.0.0","babel-plugin-unassert":"^3.0.0","browserify":"^16.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","gzip-size-cli":"^3.0.0","ms":"^2.0.0","nyc":"^15.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^8.0.0","remark-preset-wooorm":"^7.0.0","resolve-from":"^5.0.0","tape":"^5.0.0","tinyify":"^3.0.0","unicode-13.0.0":"^0.8.0","xo":"^0.33.0"},"scripts":{"generate-expressions":"node script/generate-expressions","generate-dist":"babel lib --out-dir dist --quiet --retain-lines --plugins babel-plugin-unassert,./script/babel-transform-undebug.js,./script/babel-transform-constants.js; prettier dist --loglevel error --write","generate-size":"browserify . -p tinyify -s micromark -o micromark.min.js; gzip-size micromark.min.js; gzip-size --raw micromark.min.js","generate":"npm run generate-expressions && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . --write && xo --fix","test-api":"node test","test-coverage":"nyc --reporter lcov tape test/index.js","test":"npm run generate && npm run format && npm run test-coverage"},"nyc":{"check-coverage":true,"lines":100,"functions":100,"branches":100},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"ignores":["dist/"],"prettier":true,"rules":{"complexity":"off","import/no-unassigned-import":"off","no-lonely-if":"off","no-unmodified-loop-condition":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off","unicorn/prefer-type-error":"off"}},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"b2d989a9f05d277aa39ea79dbebedb01e53b1437","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.0.0","_nodeVersion":"14.7.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-n3fiG3LdI1aou6eMQfahoErZ/2tv2tBNacwWIzRgbNCVRy3lBfRtUBAxoH5yg7g20U5Sw1Rycd2DKFOzwA14JQ==","shasum":"76be7ca77cba30600d3e574c90237ee1314cd2f3","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.0.0.tgz","fileCount":150,"unpackedSize":378130,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfPpROCRA9TVsSAnZWagAAdDYP/RM3cUoyl1BGFDFc89y3\nTy74HSGfYyLyDIK3iEi8VS4YkoCGSo80yfa52jd1DQ+5Du75VWfDa/fmrNJi\nTvFWroi40xFl/L+30tIW4lA2onz+bHhRRGnVz9mx/VqnOJd3IsduD3D1cQOy\nsFxWtFQ6g0IlyOUPrmjy45oon5cAzbGqXy3XIsZsQsKVzxymiXUPW09aFX0s\nA0EDEU6NLUBAMXKoLdR+Z54MNtP+2xI8eDlyNV/uJk61qhK5z8djRZmw2uyv\nY/NumZYz4KdM1K33vHraydmF5QdVKKHFcbcbJGGMFBsQ+mCxbXc8rw1NTfh+\nTJK6PjHrf6tsV2p0EEAEhJNJ1suNwjemRvgd6TTJlY4i2+KdrL3VisPVOVb1\n/+oOUghDwfIeU0ubJu4sJu5c4KoabHXkSgGh1LSh+1QfoLE5cNpVGh2Xy6SC\nSFzA5j35NvV/Dg/9A+mnhUzIywBlTZGP2EtndYWzhwc8R7kbYBwQnkT+OmsQ\nafBSMWkr06MC3wW0ZzXNuv3oRYoCJETQrCPIcYcplzRP167xX0H4kXmibIAp\nhJKl3p3IMuG1kJfDI8jvSAEv8UNTie3uF6JQkolsFY9GXUtDPwkjbAv+e+A3\n9wT9YqVFoUPsBQ+Zbu+AwE6Co4v63hv64FYdNbLG+E8eXuGlTAP1j++Aj4l4\neKmI\r\n=nGpF\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGk13ECT66xTLUJZuaaXD36eZLS0Mh/W6CXUGm9vYMmBAiB8hZq9BhrltPIQiL4FKndJeuEYPMW630ac1iHLYKGrhQ=="}]},"maintainers":[{"email":"tituswormer@gmail.com","name":"wooorm"}],"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.0.0_1597936717546_0.944918767405933"},"_hasShrinkwrap":false},"2.1.0":{"name":"micromark","version":"2.1.0","description":"smol markdown parser that’s different","license":"MIT","keywords":[],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/cli":"^7.0.0","@babel/core":"^7.0.0","babel-plugin-unassert":"^3.0.0","browserify":"^16.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","gzip-size-cli":"^3.0.0","ms":"^2.0.0","nyc":"^15.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^8.0.0","remark-preset-wooorm":"^7.0.0","resolve-from":"^5.0.0","tape":"^5.0.0","tinyify":"^3.0.0","unicode-13.0.0":"^0.8.0","xo":"^0.33.0"},"scripts":{"generate-expressions":"node script/generate-expressions","generate-dist":"babel lib --out-dir dist --quiet --retain-lines --plugins babel-plugin-unassert,./script/babel-transform-undebug.js,./script/babel-transform-constants.js; prettier dist --loglevel error --write","generate-size":"browserify . -p tinyify -s micromark -o micromark.min.js; gzip-size micromark.min.js; gzip-size --raw micromark.min.js","generate":"npm run generate-expressions && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . --write && xo --fix","test-api":"node test","test-coverage":"nyc --reporter lcov tape test/index.js","test":"npm run generate && npm run format && npm run test-coverage"},"nyc":{"check-coverage":true,"lines":100,"functions":100,"branches":100},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"ignores":["dist/"],"prettier":true,"rules":{"complexity":"off","import/no-unassigned-import":"off","no-lonely-if":"off","no-unmodified-loop-condition":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off","unicorn/prefer-type-error":"off"}},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"63c7ae22548a59e838eee470a1ba735f5a9e4887","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.1.0","_nodeVersion":"14.8.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-9yXH9jmkFV8NfdeIbJjAraRDOaCLNzIV+oPrIhGS0ld5Mce+TSUIyOFi7xAJ497etb/QdZ6XikWGkCyDalYn4g==","shasum":"b4a3816978fbbe3e66fcf6548b9ed384bf640d90","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.1.0.tgz","fileCount":149,"unpackedSize":369120,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfTQrFCRA9TVsSAnZWagAA3FkP/j01IJhXlLdWTf0ak93v\nHAuw3nYMA5bvyEhu/RZemPnK/I4oYSXsT+Xno8J5wqmPv/jWTijiHJtzxFTb\nUStdWLSIDgZiVvZkVTasFquXx0+zAaRCFLTEAkAIy1rbCUb4i2fSFFQhg7P8\nEjacgSYFEbCJkWY5NAmvW9zc1YqHsXP0fQ7JmY+o53pMA3Z1gkJPGM9s1DiL\nZSv0S8HEV9k9P4oEOhHMG9cqf+ia+Tj/CMjbP+fKRcXlxq5KidM83gWT1TPk\n31zsDIzv+wsOTxKKgvT5/AFOW35MOM2cXXXwuuvN1xFvnY5N8Onp49CXYQjP\nupG+IKp389LyDH+aDPEQWfxFuzGE94JaNlXHWptK1k9/qLcgVgabz4pKF5JN\nJq+QhQP7Yb72u2255DEv3xcoX5/Z6cyfBreAXxtvVbw8Lgpb5RsFZr21/OlR\ndGHMRa4LKjM6CPPi2vV6o1iWmsNIQHrK9w4O9QzA6hSmMUEQJ1/R7r1CapB0\n4uvm95za1NR1AamGY36yGWV8cTsp26bNK0c0T1aayPYJOlu3n9MIpRyMhalc\nj2iAt76r99RxcMwbKAKq2Jz5mldP4pINHaOZ21OCrW3FHw0DJxzwAoO6emV4\n5sLo3Cp+Xy2NcOS0Mixy6EoSLfIl3V+AEu75I95ih4iHfeAqT0HgWMWbBFvF\npez0\r\n=fDEn\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAgjVTJASRxjdtzlHiv92sqUDuDzcwY1+B1SaUaJIpw4AiEAnVZn7BCCLinLDnjmsuJLTzbbwiTH4GdOqK3i0dITj+I="}]},"maintainers":[{"email":"tituswormer@gmail.com","name":"wooorm"}],"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.1.0_1598884548464_0.16223865339632093"},"_hasShrinkwrap":false},"2.2.0":{"name":"micromark","version":"2.2.0","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/cli":"^7.0.0","@babel/core":"^7.0.0","babel-plugin-unassert":"^3.0.0","browserify":"^16.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","gzip-size-cli":"^3.0.0","ms":"^2.0.0","nyc":"^15.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^8.0.0","remark-preset-wooorm":"^7.0.0","resolve-from":"^5.0.0","tape":"^5.0.0","tinyify":"^3.0.0","unicode-13.0.0":"^0.8.0","xo":"^0.33.0"},"scripts":{"generate-expressions":"node script/generate-expressions","generate-dist":"babel lib --out-dir dist --quiet --retain-lines --plugins babel-plugin-unassert,./script/babel-transform-undebug.js,./script/babel-transform-constants.js; prettier dist --loglevel error --write","generate-size":"browserify . -p tinyify -s micromark -o micromark.min.js; gzip-size micromark.min.js; gzip-size --raw micromark.min.js","generate":"npm run generate-expressions && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . --write && xo --fix","test-api":"node test","test-coverage":"nyc --reporter lcov tape test/index.js","test":"npm run generate && npm run format && npm run test-coverage"},"nyc":{"check-coverage":true,"lines":100,"functions":100,"branches":100},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"ignores":["dist/"],"prettier":true,"rules":{"complexity":"off","guard-for-in":"off","import/no-unassigned-import":"off","no-lonely-if":"off","no-unmodified-loop-condition":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off","unicorn/prefer-type-error":"off"}},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"8c8e92f1d05c480cabe91730136aada82cac8cdb","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.2.0","_nodeVersion":"14.8.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-ivwqrMbYujQsrK70F7ayPbhuYdpDrMJ2EXvJsVXswbM87WPy/V9ACY56SeezzxkKb4KaPewhFJ+b0sPPMUdomQ==","shasum":"2362dcb0bf10c88b2237f36304ba0ead5016c52b","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.2.0.tgz","fileCount":146,"unpackedSize":358588,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfWhPoCRA9TVsSAnZWagAAPcQP/RJbICdF6gQrzSLo4lST\nVU9C5YrIso5AXz1b7XDEUD3nrsyr7xmcjaEO5EgDV3GPkpgIbRhD/XJDLVsJ\nf1FbuBeZbCJ2SwV8peiZbxvN0xr5Rpp7t4qdyydCTKPfxYTJb+tiMlx7FQiv\nCB62wa228rhQzmtc65Nibn0NtkfV9q6rqTGdQZqKFvMAV09cARgG4yeh6EKk\nlf/X2HjOoLvKevtFngHUj23O79xatkH7Ea0hXqFZyQPu09aS7Hx6tmnxGeif\n2iYBxTq55aiQZsXZF6o6ZHFalCQYp5hWSg8SpoGFBoOshEVVaGCrQAzGpIRb\nsf2DqcH4ca617lLhHoitJghpzmnI9G6MsdZp3hCbjBl6U/BGFLWcXsvXYp7d\nR2EUtZxEHRTUNhml8aG5UaC9+GV35V7A338wZoH2F86qpuXqoAZFydCMIlWB\nwn913Ixw9TbhfEc5P4SOmD6WUA5KlCnKJcEe6bAMIblfalKnP9WArVeyflXq\nXQ8fhUK5DdO9VrKYeNv9EL7wEB9ZE/9Im4XSxD/r+kGeNTIHzTazQY86kG3I\nn68UpnfKmp+3UiXAyoLG+HZmtaDDZ/p5bXLi9kNnVim2Ws9irpHu1ViWgcpY\nB5CFzq3NYLaRHWV5Ii4Pbz8jaNZJEO2EDUvpKRD6jIKJCJwexDP4bANP6/Zq\nAZ28\r\n=Tmox\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICjwR0S67ocoJxDMt1gbF+ABPIXC6XrqA2TJ7vIUAyr3AiApoRBlkZarotAymr+xQ0uzvcihf+5ITl5xxluvF4rZxQ=="}]},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.2.0_1599738855605_0.042160941369202565"},"_hasShrinkwrap":false},"2.3.0":{"name":"micromark","version":"2.3.0","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/cli":"^7.0.0","@babel/core":"^7.0.0","babel-plugin-unassert":"^3.0.0","browserify":"^16.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","gzip-size-cli":"^3.0.0","ms":"^2.0.0","nyc":"^15.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^8.0.0","remark-preset-wooorm":"^7.0.0","resolve-from":"^5.0.0","tape":"^5.0.0","tinyify":"^3.0.0","unicode-13.0.0":"^0.8.0","xo":"^0.33.0"},"scripts":{"generate-expressions":"node script/generate-expressions","generate-dist":"babel lib --out-dir dist --quiet --retain-lines --plugins babel-plugin-unassert,./script/babel-transform-undebug.js,./script/babel-transform-constants.js; prettier dist --loglevel error --write","generate-size":"browserify . -p tinyify -s micromark -o micromark.min.js; gzip-size micromark.min.js; gzip-size --raw micromark.min.js","generate":"npm run generate-expressions && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . --write && xo --fix","test-api":"node test","test-coverage":"nyc --reporter lcov tape test/index.js","test":"npm run generate && npm run format && npm run test-coverage"},"nyc":{"check-coverage":true,"lines":100,"functions":100,"branches":100},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"ignores":["dist/"],"prettier":true,"rules":{"complexity":"off","max-depth":"off","guard-for-in":"off","import/no-unassigned-import":"off","no-lonely-if":"off","no-unmodified-loop-condition":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off","unicorn/prefer-type-error":"off"}},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"d6d2ea4a63dd709b250265309b602536708f1df5","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.3.0","_nodeVersion":"14.8.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-jwYbB/R4qQ8/4IprcEOAfwlE9eEK4m4vf2BFQ7EiTqjJadm+lSsYJjCWEQU+eBcLWTx1yRx1a3ruBwBd6Tywzg==","shasum":"c906e364840ccdc6bdbcb9bd4497f8c8b1e7df30","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.3.0.tgz","fileCount":151,"unpackedSize":361703,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfXgtACRA9TVsSAnZWagAANRMP/RWiNcDVwBV24hCcWQ0Y\nYxbvH/1/ZSGuSi8NbnA3lFe5RcOSJYJG02z33XO94Rd/V+iRh0t7BzwirEsc\nXnkiGj9AuH4nOV5EpM7/5PeZCXxmYiy64N262gnayr0tAiNwpXSbUCstGkBI\nfm5TzBPAPbwxKKgUxcSGjHVxpG6sYXRL3v9qg+frEk5NqpcPvOa11LFzAo06\n28vX4ZCkPizN96G4zxyw7+sjXpqCk8pU9gYfxR/c4kNtSV79mkcegB9XKGQA\nHHHYJvropiw5UZ3CAsu7NuK7DzCuNzUDIdH6VefxMEX0ERUAhQ4jIhMsZNTA\nvCt6lxO6GOKmTcNPDlAfxba3kA2tCABdlV3EdYM0VsfbpXi7wFYG3OCtpQZR\n6F1g9cKtfMpnnMa5GBMUZkL43xDpy2Zf8WAIHL9MpcWpy/evhYNpowLWeeEH\noVGj639TcgeAMh/U5oX3HyhT1YQYaCpJTj4TQpFUo5qQUmEWoUkYY2+6wmiN\nEEnbozhj3EUY5EhemKNWZ6lUbQ6tKBtjWPXKzLdTqBa/yAoaMIrjhVc3XVpp\nghc94xwCs13xlklbLDSoWUE4ZuuveKPqdcNLS2iGJWgknDG+W+sUUrMKUK6Q\npC0XTQb6CbxURj7lOcJe4F2Ax3Yx6uEIr4THDsklAE+XzuloR9JU2GVNAnsb\nOHdA\r\n=ia+k\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDeod0+D8m1O7vk5m516f0Kwp4/j9UMswNf46SNiKQV1wIgLbWIzFR6zMwUWP//+jUOcnmHt2AtW7I8oOZruZkepgw="}]},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.3.0_1599998784425_0.5197707226711656"},"_hasShrinkwrap":false},"2.4.0":{"name":"micromark","version":"2.4.0","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/cli":"^7.0.0","@babel/core":"^7.0.0","babel-plugin-unassert":"^3.0.0","browserify":"^16.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","gzip-size-cli":"^3.0.0","ms":"^2.0.0","nyc":"^15.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^8.0.0","remark-preset-wooorm":"^7.0.0","resolve-from":"^5.0.0","tape":"^5.0.0","tinyify":"^3.0.0","unicode-13.0.0":"^0.8.0","xo":"^0.33.0"},"scripts":{"generate-expressions":"node script/generate-expressions","generate-dist":"babel lib --out-dir dist --quiet --retain-lines --plugins babel-plugin-unassert,./script/babel-transform-undebug.js,./script/babel-transform-constants.js; prettier dist --loglevel error --write","generate-size":"browserify . -p tinyify -s micromark -o micromark.min.js; gzip-size micromark.min.js; gzip-size --raw micromark.min.js","generate":"npm run generate-expressions && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . --write && xo --fix","test-api":"node test","test-coverage":"nyc --reporter lcov tape test/index.js","test":"npm run generate && npm run format && npm run test-coverage"},"nyc":{"check-coverage":true,"lines":100,"functions":100,"branches":100},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"ignores":["dist/"],"prettier":true,"rules":{"complexity":"off","max-depth":"off","guard-for-in":"off","import/no-unassigned-import":"off","no-lonely-if":"off","no-unmodified-loop-condition":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off","unicorn/prefer-type-error":"off"}},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"5b75f7877ab014dfcc34ee5127bfd95826625fb0","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.4.0","_nodeVersion":"14.8.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-XjuBJB01JVB3ephZJBUeNhWeBfrJZjuv220wJ2b+ofWbIP5PmTCym6WdDjuu+8NHANt9Hqal19nWBVXYlsrKRA==","shasum":"1d514419c1c6d770d2cf7b59f179b9d22eda2aea","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.4.0.tgz","fileCount":150,"unpackedSize":360141,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfX1MnCRA9TVsSAnZWagAAkCUP/iKH2yROcaVd5pRWRzQv\navaxM+vlzJ1UKbS+7G9WmTOL3D7CvM6kcVZ5canYkrGaH6bYkqI/j0YqscNs\nmWQyVG8Zf7XIsSko6iUXFG4MarQtXoCJ7meEJgWJK1SrfdD4AOe7VBEjflNX\n0njZpGfTRuIrhGanr5MknTnanXS7e865mtmePsQ89diFnQgxrTWdoL9z/HSB\ntUMVPh17uGOlO1I+K9dbPTaBENOHNNNP1Txfmdd1D0E6Xumqi5xONAOJPXbb\nJqFJFBahAfvZnMGrQkPFFJjPFBOmzxqUxEkVUp+Ipd2NsnyKYNmZKqGkasY5\nIiVSxMEPDkG2wHb8v7ytW5KCFrcXpuwtY4s/LnWx2tgjXWS7JpUh0YP6tQ0x\n3Qdk79Ja+jVBfjyu7l+j5A/DydDc6YK6lN8Ig150+0NCTAMyyjNfSokmyAyk\nZCd1f2JYRoNT1WC3gL9pmuJy/d8EQsHlJuzBIfrjocsUpzAETA9GPTKirKys\nsnHnPhP7fhPBQf0zO7dI73ZlCi4dm8sA9Sp8vtomISRU4tosFzFm26oYOW4O\nYDisqt8rF2zsV3AHPrnaIeZgyFUHOi70pSIDgR+tTVHlB6TMGUKyuc91JzEb\n5Cxmst7o9wY04LRuNKosNtbl8f4v1OLw98yU46ZhObNA+Pru2B2JAcpxSFPx\n+5rr\r\n=YiD2\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCp+3RQZTFL9iFTneR8k0Sk6DFy58+BFsbx0qGWXC5HdQIgMwWtBgapSJY6mTqHf6+GqAFAauJEL/GWx+dYzVrXAIk="}]},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.4.0_1600082727083_0.9249360147358427"},"_hasShrinkwrap":false},"2.5.0":{"name":"micromark","version":"2.5.0","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/cli":"^7.0.0","@babel/core":"^7.0.0","babel-plugin-unassert":"^3.0.0","browserify":"^16.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","gzip-size-cli":"^3.0.0","ms":"^2.0.0","nyc":"^15.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^8.0.0","remark-preset-wooorm":"^7.0.0","resolve-from":"^5.0.0","tape":"^5.0.0","tinyify":"^3.0.0","unicode-13.0.0":"^0.8.0","xo":"^0.33.0"},"scripts":{"generate-expressions":"node script/generate-expressions","generate-dist":"babel lib --out-dir dist --quiet --retain-lines --plugins babel-plugin-unassert,./script/babel-transform-undebug.js,./script/babel-transform-constants.js; prettier dist --loglevel error --write","generate-size":"browserify . -p tinyify -s micromark -o micromark.min.js; gzip-size micromark.min.js; gzip-size --raw micromark.min.js","generate":"npm run generate-expressions && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . --write && xo --fix","test-api":"node test","test-coverage":"nyc --reporter lcov tape test/index.js","test":"npm run generate && npm run format && npm run test-coverage"},"nyc":{"check-coverage":true,"lines":100,"functions":100,"branches":100},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"ignores":["dist/"],"prettier":true,"rules":{"complexity":"off","max-depth":"off","guard-for-in":"off","import/no-unassigned-import":"off","no-lonely-if":"off","no-unmodified-loop-condition":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off","unicorn/prefer-type-error":"off"}},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"ed234029faeef063c9d6c1588bab48876a8ea641","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.5.0","_nodeVersion":"14.8.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-DGuXbKTEmMRQ5UrzJBwqh84m9WGDFYZGhZVogqa11MLKcw9GPQyFfZPP6UNMCfZFAsy0Sf+SVPhhmP6LlK1wOw==","shasum":"04eb82767416d5e345c44c997a0a604c25d4f51a","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.5.0.tgz","fileCount":150,"unpackedSize":362389,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfY3CZCRA9TVsSAnZWagAABxoP+gMskLYCdeN1oBCPxslF\nQpOHYZ/beASRhMmYmkhUyMIbpeIJx9C1HUsEk9pKEiQLUUBcG7cCd8Bbno1N\nbUg6mv87aPUhFJPI3zoWM3X4fVcI0G7RomYpE02ozYHPlowEh5YWp5QlnmBe\n+N5mTxyApQkj98T9qOZ5YDl9yABo7sSp7QE7JniLGpMwHeDWNm8cVuH3xnSD\n8CRORUiXXmjUQIjO6WtpG5PlIYQsetc5wuGFijDooz7CA+Hsrl9sx/xC00sB\ndruDipLEqfGzZD2YlW7qmu9Qx1a/XIakYuLONgajITtWULUp13kq+hgGFVrl\n8jm56MF2+A9f0rx0KguRUpKxY5fL3hdJOJ2aXZ+xMsWGLooPGzSAWxbB2bm3\nvgBLZKUMdmigrI/I3GSkY2u1HjUj2NYP7fimJPuuJ9s6kslhtknVXV8p3+kD\n3YKfZtA5x4XVT+JcQ3OzvoWMraGqsRvKsD1Bx9U910u4qGdPCoJRk5xT6aut\nXcUTA+aPX+6GJO+5oj5f8039AtXhKBrTm8Wft9D5/239jfkk15GOykZteaG8\nUh/shUbCsp3d7Vz1KFpN8OF/eDMHlPZhWsiSYQA9T6xr0TyrYWoxuk1dc/rP\naYLdmeZg0vvdn9NIoy6MQx5SvMi4cLfrxkx7kctePVne0MMGb6vP/w4Gnz7w\nXsAq\r\n=mIAm\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDq6CGMPts9ScYu8aOIdZy7DRx58EwSSLe4kNe5Z5ukJgIgbMePLia61kFZHCaD+9Og80r+FVxMnfY3+4OAcFw3OqU="}]},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.5.0_1600352409193_0.8628240223114352"},"_hasShrinkwrap":false},"2.6.0":{"name":"micromark","version":"2.6.0","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/cli":"^7.0.0","@babel/core":"^7.0.0","babel-plugin-unassert":"^3.0.0","browserify":"^16.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","gzip-size-cli":"^3.0.0","ms":"^2.0.0","nyc":"^15.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^8.0.0","remark-preset-wooorm":"^7.0.0","resolve-from":"^5.0.0","tape":"^5.0.0","tinyify":"^3.0.0","unicode-13.0.0":"^0.8.0","xo":"^0.33.0"},"scripts":{"generate-expressions":"node script/generate-expressions","generate-dist":"babel lib --out-dir dist --quiet --retain-lines --plugins babel-plugin-unassert,./script/babel-transform-undebug.js,./script/babel-transform-constants.js; prettier dist --loglevel error --write","generate-size":"browserify . -p tinyify -s micromark -o micromark.min.js; gzip-size micromark.min.js; gzip-size --raw micromark.min.js","generate":"npm run generate-expressions && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . --write && xo --fix","test-api":"node test","test-coverage":"nyc --reporter lcov tape test/index.js","test":"npm run generate && npm run format && npm run test-coverage"},"nyc":{"check-coverage":true,"lines":100,"functions":100,"branches":100},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"ignores":["dist/"],"prettier":true,"rules":{"complexity":"off","max-depth":"off","guard-for-in":"off","import/no-unassigned-import":"off","no-lonely-if":"off","no-unmodified-loop-condition":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off","unicorn/prefer-type-error":"off"}},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"dd51ebe1c28ffb70b11581f27c7c886e59889c3c","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.6.0","_nodeVersion":"14.8.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-1mDjqAqGWKy+BpIzUi9rU/qnAsYppxMIb8YL/39hiXQWQpQAIpKAhsCkdfweTToSG3VQ5tEvO/xFIgDiesBfnA==","shasum":"68ebb483b2e13608ca8d1ebceb1e3c9ef2b8de6c","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.6.0.tgz","fileCount":150,"unpackedSize":363271,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfY6dOCRA9TVsSAnZWagAABiwP/Ru4zJvm1/EUvjY0/lt4\nrXg0e6pUS9BeD2hdTakz47MOHbWOyQsI7+Pui9TOlXNjhdZEJKcrjes5Ln2N\nEwCjwHf5UfJ9CYhlNsZ59EiF0w+yceEKgZGntVMc+jjjJLivOYKqINbPvPlp\n578fd4ohfena6pjP7pVHWnU+wLGNCDt7itlLdQG/zh+RlLxx51wUQpN5YRuz\nyWoTbpcRTlmaXSE5CSDurFEl2d1jkP/CKrXxepk7OQkZZXVQgCjAw/DhiRS4\npv2S/eYdTQUljdmtoqxd14IMw/dFRjUv+1t8/5M98Vi7/w/v0abk4qUgeRH5\nnN0BLeQZJjvoqewingLv7IvUQ1RwXvOthi/9GoOMyUWS+zq89YrCSbcPpnzu\n1e/8ycfp2D9B2HfbLA9vxaVEF6PgY6dJh7FbljzSCz1pnDLMRBqRl8tMxoF1\nEBVi32CkzslCjLngD5ltLqaCZykkDnKWpEwxNa7at5gtisACm4Qb89B07bzL\nvQbBooRsj0OTq7mKPzb6MIBllEEyN0ZaKlFnp2zq7llu5+8+PCHogc/zFGdD\nojRs72zWuukJJblAr6ZiQeKEOSjCF/FQbwJeg9P5WWwM4nDcZN7mWWiRvNux\nWR0KeAYBOS6H9IUUKB8KWpUZzGG1FADHXL4XjXctWv5pE4HUucg5wT7oYDau\n7n0z\r\n=n1xn\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCImZlhC7ntL5zsm9ZCfLVGE9O+K36R/vfozvPKZHN1wgIgMkk26gRyMENbBxgCkDBooRu+CEsojv/2WcTRHO60ZDo="}]},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.6.0_1600366413528_0.028949415390551625"},"_hasShrinkwrap":false},"2.6.1":{"name":"micromark","version":"2.6.1","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/cli":"^7.0.0","@babel/core":"^7.0.0","babel-plugin-unassert":"^3.0.0","browserify":"^16.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","gzip-size-cli":"^3.0.0","ms":"^2.0.0","nyc":"^15.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^8.0.0","remark-preset-wooorm":"^7.0.0","resolve-from":"^5.0.0","tape":"^5.0.0","tinyify":"^3.0.0","unicode-13.0.0":"^0.8.0","xo":"^0.33.0"},"scripts":{"generate-expressions":"node script/generate-expressions","generate-dist":"babel lib --out-dir dist --quiet --retain-lines --plugins babel-plugin-unassert,./script/babel-transform-undebug.js,./script/babel-transform-constants.js; prettier dist --loglevel error --write","generate-size":"browserify . -p tinyify -s micromark -o micromark.min.js; gzip-size micromark.min.js; gzip-size --raw micromark.min.js","generate":"npm run generate-expressions && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . --write && xo --fix","test-api":"node test","test-coverage":"nyc --reporter lcov tape test/index.js","test":"npm run generate && npm run format && npm run test-coverage"},"nyc":{"check-coverage":true,"lines":100,"functions":100,"branches":100},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"ignores":["dist/"],"prettier":true,"rules":{"complexity":"off","max-depth":"off","guard-for-in":"off","import/no-unassigned-import":"off","no-lonely-if":"off","no-unmodified-loop-condition":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off","unicorn/prefer-type-error":"off"}},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"ccf18010cec7821ced3eb6672ce2e60ee69bed37","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.6.1","_nodeVersion":"14.8.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-Fr3XSjmNFJ/dqIRNB3sdqfNUgy8ELAn7ufqP2usqFccLndECzC/yI0v3Hr3UiRUKY1FKT9nfTqE+b01qaUTlCA==","shasum":"350daeff88c3f125420ca1d95292efa06e61bea6","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.6.1.tgz","fileCount":150,"unpackedSize":368386,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfZHmtCRA9TVsSAnZWagAAfwMP/1/PspjkKEFWhNBiBqtO\nCXmqboAZHue0gXEaP3s7RatTewCrE23UVtgAzQOM2R9kA1ORG+vVimo8aRwO\nUXuMHiuwnkYiHGXfO6RPYFKSyDmGxdG6QzstohpDcMqbdbgHeOnOQb8AcNu2\nxW04zZBakvTqOdbIhJONrCPnr8ib8Fg0npEHk4dj1lUkp+nnZHdXE6PNTTgc\nsBZKcoAyNMKUFRWTEhLC73Q9jiRF3r20Io9pPmDroXfA9d0xab8nCA5qKwjl\nN0UKf0Tn6lyDjVay8X2W+WHeLvnQPvl5I0/1zdh7p1b6yM0Hojx3wdaHFML9\ntQZIRmbNidZpTMLMy2sxc6Ud4lfbZmzvh65fls9PvTzzCnxSxBWME+HVjQsp\nJrnguIS1OzjFrjZphYPGIRP6GW/qgU8mOdkKbk7JIwojd9UMtXZ1GNZ3oMhU\nkw9QGzhTsxd0+ubX6/mssGqTqqMXV57x0gEVwoSVcWdrcyQ857ImJCyILJI5\nK7vhYe+J8lDd5ugoy+WhcqcdjXf3wNARwTxyUDLaQIyPqcYcJh8xB3KKE7T6\nSgI+Nnu46qW7MzC+l3OBaXg7BjwF1Hfv6MHkC/w9GeIc+Sc9Ckwx4AdyAUKj\nmok8ARHzCpQCA4IB4IVIPAcojnQ458+fY/brqYjYyF7dUlUgdURLJyMg/ckV\nN29d\r\n=DzJn\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCV6nulZWj18PVXdhxCQPPaOhxPrYFLjNz850ZZqz2uAwIhANVOxFMuYy6StVIJowhTClipsKhoA9lD37Sx5YD1vf+5"}]},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.6.1_1600420268486_0.5662259926294666"},"_hasShrinkwrap":false},"2.7.0":{"name":"micromark","version":"2.7.0","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/cli":"^7.0.0","@babel/core":"^7.0.0","babel-plugin-unassert":"^3.0.0","browserify":"^16.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","gzip-size-cli":"^3.0.0","ms":"^2.0.0","nyc":"^15.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^8.0.0","remark-preset-wooorm":"^7.0.0","resolve-from":"^5.0.0","tape":"^5.0.0","tinyify":"^3.0.0","unicode-13.0.0":"^0.8.0","xo":"^0.33.0"},"scripts":{"generate-expressions":"node script/generate-expressions","generate-dist":"babel lib --out-dir dist --quiet --retain-lines --plugins babel-plugin-unassert,./script/babel-transform-undebug.js,./script/babel-transform-constants.js; prettier dist --loglevel error --write","generate-size":"browserify . -p tinyify -s micromark -o micromark.min.js; gzip-size micromark.min.js; gzip-size --raw micromark.min.js","generate":"npm run generate-expressions && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . --write && xo --fix","test-api":"node test","test-coverage":"nyc --reporter lcov tape test/index.js","test":"npm run generate && npm run format && npm run test-coverage"},"nyc":{"check-coverage":true,"lines":100,"functions":100,"branches":100},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"ignores":["dist/"],"prettier":true,"rules":{"complexity":"off","max-depth":"off","guard-for-in":"off","import/no-unassigned-import":"off","no-lonely-if":"off","no-unmodified-loop-condition":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off","unicorn/prefer-type-error":"off"}},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"989f34354884ba71f67ef039c0cf9bcd90478028","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.7.0","_nodeVersion":"14.8.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-YEpHUSiSPA9CZrzvF5BJopg76as8IwsoNiGgJm4yQKo+RFPL3A622yfU+pibJloRFFhcvQP9svS3+DnpGvDkHg==","shasum":"68f2888fde25b8c960b96ae652d227cf4884a24e","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.7.0.tgz","fileCount":154,"unpackedSize":373232,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfaJQKCRA9TVsSAnZWagAAicQP/A2pr2aN1T4kqEQGWIlW\nbVY8CW5E+SAOImI8nJjkWN3i+jg4FWvUChpp70LY0Uu4EYundRgqaQaL2FKj\nNAxxdNFpfU9v80voULQ9oOQBVKh1jdWTQTilOSPe1ngvxyb7lfDjFpamgSTV\n4xMIl/Z+bXdruvcfNczvYif9xzAmxiTBEu4oKmjfLaxZVeHEjxHU8Qa4bnoA\n8q9rC7OSC+qnxoQ1eWNmNfyaId0fdiMdtL3WupLbjGgzln1Pds0sVG+SCVDs\n6Wj1YgFLMqp7bGS01/E+mcCgVQK/UIgfZJe+dszfXk22QeA2qzBoNaY3B+nC\n8It+cJMC6XMHJR79hds2T25IWLnEKfZNgKSPcQVmQy3V1LjazqmufIbMrpe5\nrckH7JdCLhi5OV2b6Nzu6OV/AhMMcfjNo2HtgB0Ca2xXigRP98QGbcNJE4ll\nIuHpL05GV5/GieLdn8eTkKzBEhI6WYVWlRB+bTKObkkKftI8traChpO/XiVS\nNACqeyQJ/2y7AQtsYdDyKnqjcpcJnTkF27sSzfAl4t2yJipj2lp2a9ynIkrg\n8v83ZnSLBiZZ7nAWsrfZgG2EbdciZB2yCca/3x/hi8grgQlvulVr6IxV2RxM\nxNVj41/Bw3JFGo+JAPaWwiGnsT35o5OPlkzM4UP9fLadc5jciNrY6gSt/8No\nQTXm\r\n=jzrZ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBcqmFcU4as1/h+H40rK5FAbCfj2evGFcJ0DA3u98iYbAiAWrzlC6oCjA2Kf2DfH6D4vs7Klq6W+J9GGK4yrI9xwqw=="}]},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.7.0_1600689162064_0.6687545244501933"},"_hasShrinkwrap":false},"2.8.0":{"name":"micromark","version":"2.8.0","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/cli":"^7.0.0","@babel/core":"^7.0.0","babel-plugin-unassert":"^3.0.0","browserify":"^16.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","gzip-size-cli":"^3.0.0","ms":"^2.0.0","nyc":"^15.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^8.0.0","remark-preset-wooorm":"^7.0.0","resolve-from":"^5.0.0","tape":"^5.0.0","tinyify":"^3.0.0","unicode-13.0.0":"^0.8.0","xo":"^0.33.0"},"scripts":{"generate-expressions":"node script/generate-expressions","generate-dist":"babel lib --out-dir dist --quiet --retain-lines --plugins babel-plugin-unassert,./script/babel-transform-undebug.js,./script/babel-transform-constants.js; prettier dist --loglevel error --write","generate-size":"browserify . -p tinyify -s micromark -o micromark.min.js; gzip-size micromark.min.js; gzip-size --raw micromark.min.js","generate":"npm run generate-expressions && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . --write && xo --fix","test-api":"node test","test-coverage":"nyc --reporter lcov tape test/index.js","test":"npm run generate && npm run format && npm run test-coverage"},"nyc":{"check-coverage":true,"lines":100,"functions":100,"branches":100},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"ignores":["dist/"],"prettier":true,"rules":{"complexity":"off","max-depth":"off","guard-for-in":"off","import/no-unassigned-import":"off","no-lonely-if":"off","no-unmodified-loop-condition":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off","unicorn/prefer-type-error":"off"}},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"ca6aa49bf0a82eecaf7c90497e17aa50d3509593","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.8.0","_nodeVersion":"14.8.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-QABuHRH72XZCzlAJCEgVA1JxKbWX3+NydkizKmFjOvIqdrkuxItt6ffiAHqkEahX0DanliJZhfIEGmu2EV4HWg==","shasum":"8ffea0dd375134e1363e6eeb30c824e4de3fafa8","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.8.0.tgz","fileCount":154,"unpackedSize":373158,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfaL4uCRA9TVsSAnZWagAALQ4P/2Y5mBwIobkEX6qBf2RN\nSXPxPPb0dHYMLWRo3EhS3F34qpUh++LRedP+7/TqOymRf57DkPqkX+GcCY9I\nL+JE0T0CGw/3WRHs6YkmpfqhXt7ZaXE6T6JUKLPvuOOFN1PcCqIBW7MxyTVl\nuLHVc96/d5RN0HQzQ3twNSlm2pN1pKtvkxFtryCvmSTmHaFa3aBfeFLR8t3p\nj6lbMdDVyU1yIizk6OuvQVrGJH/b1Tx6sU/Qo5z+e6M5l2sZTzplHK293wW4\nva5Mi5IfLLecTQQDuPC96URKHC1oWZSIw6VwV6THyVDXjRr8X5+D6nEVxvKg\nQWNrF5Zk4zo60pRr3BGbOHPaxqfpU+tFXsJD2U2u0YoQNz6UdPkqLJy0c6gQ\nxJraf9s/luPgMUwv3KmeOT+hqJFnqj8Z3oyL5agSuOTU95hj5MqGusXY/oSb\nJVd08OZujsF2bfiL9AJZeazBwCsuaskI/sN30w1fu6NKPqfLT1soZAY/6y+S\nJ39vB9UWFZBPCLiDW8kR5aV83bUydLI0LxSpJIvwurXsSNmRDlBBAqhZPXJw\nayj4jw2/c41ZFv6lcWtoC1gcKqLH6y3+ljbGTd4nnRfJQQ22XB1H84/5plLg\ntQL0UD3pvO9j05hBZZhEcNCp58rHMXEkdJN9QSBzICk6GjJBgNsm27bn8aNq\n+Xmu\r\n=AB7Z\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCEgaHXQRJwV3GvLDPT7ELzMF61rP4tobB6gyBF0imDrAIgFxLCALfRQ2nEGOBTTcwlfTDoYuObZj0JVpG8Ayd93jQ="}]},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.8.0_1600699950127_0.35905897509562634"},"_hasShrinkwrap":false},"2.8.1":{"name":"micromark","version":"2.8.1","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/cli":"^7.0.0","@babel/core":"^7.0.0","babel-plugin-unassert":"^3.0.0","browserify":"^16.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","eslint-plugin-es":"^3.0.0","eslint-plugin-security":"^1.0.0","eslint-plugin-sonarjs":"^0.5.0","gzip-size-cli":"^3.0.0","ms":"^2.0.0","nyc":"^15.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^8.0.0","remark-preset-wooorm":"^7.0.0","resolve-from":"^5.0.0","tape":"^5.0.0","tinyify":"^3.0.0","unicode-13.0.0":"^0.8.0","xo":"^0.33.0"},"scripts":{"generate-expressions":"node script/generate-expressions","generate-dist":"babel lib --out-dir dist --quiet --retain-lines --plugins babel-plugin-unassert,./script/babel-transform-undebug.js,./script/babel-transform-constants.js; prettier dist --loglevel error --write","generate-size":"browserify . -p tinyify -s micromark -o micromark.min.js; gzip-size micromark.min.js; gzip-size --raw micromark.min.js","generate":"npm run generate-expressions && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . --write && xo --fix","test-api":"node test","test-coverage":"nyc --reporter lcov tape test/index.js","test":"npm run generate && npm run format && npm run test-coverage"},"nyc":{"check-coverage":true,"lines":100,"functions":100,"branches":100},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"prettier":true,"envs":["shared-node-browser"],"overrides":[{"files":["lib/**/*.js"],"plugin":["es"],"extends":["plugin:es/no-2015","plugin:security/recommended","plugin:sonarjs/recommended"],"rules":{"complexity":"off","es/no-object-assign":"off","guard-for-in":"off","max-depth":"off","no-multi-assign":"off","no-unmodified-loop-condition":"off","security/detect-object-injection":"off","sonarjs/cognitive-complexity":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off"}},{"files":["test/**/*.js"],"rules":{"import/no-unassigned-import":"off"}}],"ignores":["dist/"]},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"0381e3bbb1a18e5aa1811c22dff053c6eb91f32f","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.8.1","_nodeVersion":"14.8.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-5y55IeEL/HVexLZXjAJEYSvM+3bV9nLkb4As/oXdoYYOgdEqi77JfOQM50CZhcBQwL7KTf+uESl1UahnM52JEw==","shasum":"57d1a0aa0fdfc0ac516949508cde87cb5eb10fc5","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.8.1.tgz","fileCount":165,"unpackedSize":396406,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfazJOCRA9TVsSAnZWagAAyMUP/1iFyjtgX7rq29ypD3gz\nAvU7C9CW65D6RxD72UVWcssgxC2rlZv0Vo3sX6U6VBOKCxZsumI0jhSznb6t\nNOgXp3HsJofP/hLa/uCfC9Hsiq0YO7y4ePlkKyhtMZRa/86PoLqQ1uCUCAjD\n7APB0VZ2Kpbsxfb4X+jR66ETYO351C8yEvKyKWIgp3G8Bwf0fF0nz0l265D2\nhbR/Wu/aB7YwTlB9oqAE4cYEosp1LHvX+asVK1evWRh6gBja3NeV50aAtEQy\nr3v+KSsxO9VbQGE3I6oSny0j9gGGu058yiB8thOfVlVRR3oHgvuiKBfVp03i\n31E95sj9UpbduOvlUaPjxL/6eIKCLbr4CblWB36QuMoZlFQR7fe7UF+Mz05j\nnrbmquZb5JfUPbGwRjezxUN2gJjUCTS7gfmpOOoUtQ49cTUb4GyrdkZJ2z2A\navdo6JugZVFavQaPIX7uK9vjjTpMOG/wxZGkOdyBBOF+noNKwJYj0SObzLsA\nKdL3pnzgjM3f6vXvO7BWNqjch8qDY2ZVCC9eTJUy1u56HYOg9NZQybQL8W3X\nFI09FWsnm65TAannbhJBwFs45Vc3XM0y/jgvfZOccuveglayxwXx/LL/q6j/\nilLmD7Tn0yWiu5JvKgyCEZ+QmEi1NMqDyzFOJ8SwmUmAbIBlp+EeyuuRHgM9\nVwQ5\r\n=rl+C\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAj8O9vnDNHyIj96XDEup67RBjou6na6TZ8q3urJ/5YPAiB8JOBsQdldT72GBWfeyLdhlfAeZiv2HkbAXCjDpypOqw=="}]},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.8.1_1600860749323_0.3957996692015433"},"_hasShrinkwrap":false},"2.9.0":{"name":"micromark","version":"2.9.0","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/cli":"^7.0.0","@babel/core":"^7.0.0","babel-plugin-unassert":"^3.0.0","browserify":"^16.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","eslint-plugin-es":"^3.0.0","eslint-plugin-security":"^1.0.0","eslint-plugin-sonarjs":"^0.5.0","gzip-size-cli":"^3.0.0","ms":"^2.0.0","nyc":"^15.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^8.0.0","remark-preset-wooorm":"^7.0.0","resolve-from":"^5.0.0","tape":"^5.0.0","tinyify":"^3.0.0","unicode-13.0.0":"^0.8.0","xo":"^0.33.0"},"scripts":{"generate-expressions":"node script/generate-expressions","generate-dist":"babel lib --out-dir dist --quiet --retain-lines --plugins babel-plugin-unassert,./script/babel-transform-undebug.js,./script/babel-transform-constants.js; prettier dist --loglevel error --write","generate-size":"browserify . -p tinyify -s micromark -o micromark.min.js; gzip-size micromark.min.js; gzip-size --raw micromark.min.js","generate":"npm run generate-expressions && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . --write && xo --fix","test-api":"node test","test-coverage":"nyc --reporter lcov tape test/index.js","test":"npm run generate && npm run format && npm run test-coverage"},"nyc":{"check-coverage":true,"lines":100,"functions":100,"branches":100},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"prettier":true,"envs":["shared-node-browser"],"overrides":[{"files":["lib/**/*.js"],"plugin":["es"],"extends":["plugin:es/no-2015","plugin:security/recommended","plugin:sonarjs/recommended"],"rules":{"complexity":"off","es/no-array-from":"off","es/no-object-assign":"off","guard-for-in":"off","max-depth":"off","no-multi-assign":"off","no-unmodified-loop-condition":"off","security/detect-object-injection":"off","sonarjs/cognitive-complexity":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off"}},{"files":["test/**/*.js"],"rules":{"import/no-unassigned-import":"off"}}],"ignores":["dist/"]},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"3b43a9cb0141a21f96766b0bb6d70a16a644a440","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.9.0","_nodeVersion":"14.8.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-3pCKaNsoipCDDIoHv1QWxKDs2T9ZDEX6D7QCsUwqLulqKqXkXYYUjUrCUX9PIsnDzFpQ/z0SMwJxR8crDNoZfA==","shasum":"0627c6e5627c724896e7dd82aa523dac105c1919","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.9.0.tgz","fileCount":182,"unpackedSize":389790,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfc1b4CRA9TVsSAnZWagAAXioP/A3Cw9dS8TUUsSadmvbh\n9XBWYjugL+DR28e+hQL4oldznavYKREf9bTw5MW9yCb2Qac/AazG8/b7FlOu\nEn3Mqdx6Sfmakk+mCRCWPoaxyUdToGJrNxY+pxe35LT3Gn0PXyy2aUv2FWD8\nfTT/7Ryiwd3jXy2hJhGN/jQ98px04IuRjal4KQyirpmYO7bacTSANaQRVhY+\nrSKijhA4mdzhtjCdQDhpFx2RMLqjNmK4T0vNBr7pn4vWE0RI4aGrDx4WZf9j\nmBzNc/aj/zQidxQHl8DEsiyuxnhon4/S7AkQ4glZxwSEXlZesm7xluqkhRUF\nxEiliBfWqCGAd/T9JhcU3OwGbRQZ28iLKNYXw1YhzTm+XuYchi2wfT5CrUyT\nN11z+LWy3t3930h4bCle5gnDpj1It7oYQ6ADCCsgL6CqBttczgJ5qszH3tzV\nD7gw3szk+cmTstMLKh7eMcZC4TBmA7QdkigLx2UtlP7s0gwel/9XNS5hC2Io\nmCKimTR6KE4mTt5L6EYbWtWw1/s379/Ut11csWHIZJVjCvnoIfuzoPIOTniI\n+0Mp0nds9BR4FJ2eYf4pvXQGUMxMeU53CuFub0OLMsDCFy4glud7Msaq+dxG\nOBeyKDaxhpHk9NUbcluzJSu/T7qWLf0VfttJN7JSHRbC/fdFSSZ8RmlyeqPs\nmSqZ\r\n=MB5j\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCPh1mAt8WIYqXEFySKTsu1u9SuhgHonrWzfZFSLIvhGgIgPF1EwXkoASeIcwaimytPecfaqbbdkwspkOty0BzwIjw="}]},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.9.0_1601394424333_0.5356614991019366"},"_hasShrinkwrap":false},"2.9.1":{"name":"micromark","version":"2.9.1","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/cli":"^7.0.0","@babel/core":"^7.0.0","babel-plugin-unassert":"^3.0.0","browserify":"^16.0.0","character-entities":"^1.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","eslint-plugin-es":"^3.0.0","eslint-plugin-security":"^1.0.0","eslint-plugin-sonarjs":"^0.5.0","gzip-size-cli":"^3.0.0","ms":"^2.0.0","nyc":"^15.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^8.0.0","remark-preset-wooorm":"^7.0.0","resolve-from":"^5.0.0","tape":"^5.0.0","tinyify":"^3.0.0","unicode-13.0.0":"^0.8.0","xo":"^0.33.0"},"scripts":{"generate-expressions":"node script/generate-expressions","generate-dist":"babel lib --out-dir dist --quiet --retain-lines --plugins babel-plugin-unassert,./script/babel-transform-undebug.js,./script/babel-transform-constants.js; prettier dist --loglevel error --write","generate-size":"browserify . -p tinyify -s micromark -o micromark.min.js; gzip-size micromark.min.js; gzip-size --raw micromark.min.js","generate":"npm run generate-expressions && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . -w --loglevel warn && xo --fix","test-api":"node test","test-coverage":"nyc --reporter lcov tape test/index.js","test":"npm run generate && npm run format && npm run test-coverage"},"nyc":{"check-coverage":true,"lines":100,"functions":100,"branches":100},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"prettier":true,"envs":["shared-node-browser"],"overrides":[{"files":["lib/**/*.js"],"plugin":["es"],"extends":["plugin:es/no-2015","plugin:security/recommended","plugin:sonarjs/recommended"],"rules":{"complexity":"off","es/no-array-from":"off","es/no-object-assign":"off","guard-for-in":"off","max-depth":"off","no-multi-assign":"off","no-unmodified-loop-condition":"off","security/detect-object-injection":"off","sonarjs/cognitive-complexity":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off"}},{"files":["test/**/*.js"],"rules":{"import/no-unassigned-import":"off"}}],"ignores":["dist/"]},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"1b06c75a06b1c8c6309730a217455d5d45ffbbc8","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.9.1","_nodeVersion":"14.8.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-aaTXObtwYZW+O2Fvnlap5E3JZLMTc/O6ZybUHwLXxEs/ElAieWm3IMdDJsHwwdmcEXwH1gyir+yHFD2afJfqWw==","shasum":"3795d34a635c230a4f111de0a091fd29dbfcb2ab","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.9.1.tgz","fileCount":162,"unpackedSize":375091,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfdKaQCRA9TVsSAnZWagAAeC8P/iQKBn7HAtAvcORGP6ZW\n6NsXnYFl4Ez7/dHDEq6yY4qtRF9iOv1rVkkfmC947CgE1ge5U+uaTwywMKVw\nXyfRjHxrvYQ/UOY8RYIEAGE3NoXYl8Wqh72+d7TPX/Y8z4mKWvADxVZ+qFBP\n+/lOUrAi4wl9auWbbKm3+b9+T54H/Q0bw4uwDYAXuCrHirXCmt7DDzNGvqKA\ncZP+ODLGIEeZzrW0y6ys5h36nSpCoDamfuyda82jLLU5PiDitnzqwvscAKwf\n5pULJBIk59B5xmj+dLJz8+JqomhuhakODaVOP6GmgkVY+FjOQ1gqmGmhgCN3\nkIAkEBLPrJAtkZB4wAv/PCLTgQRcg2o2aSPTXa55Tqnu4UrNfkKc2fUnMfE9\nQ1jIeHjjQYgC6O+8lV+FtxW3lWI9rtS0oI+4cXimu7Gb4v1aRutTYf9AiLeb\nt6LuLBwFC1e+2M4uxO9KXwWSqphewFnGI8Pu6aCNMrXEB2/2QMhGy34H1AJe\n1BzMNP5Y5feFzcuA7CAtG1vVxTm90NfxZwPR4DlT+U3kXSjNOKartBi9QQjn\n6AZZZTZVU8ChoX1OkD4JS6uZUQ+bgy5UV3AdWm2fEIlOX8CWCutS6oi0dVwC\nAaNfMvXjgJxlO32/ur1d5a5QMok0e5sjcdI9KLO/3QtFHODB8uEG5ReB/v6J\n1FEG\r\n=G7nu\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDiC3uL8B7BjGuhKZovyPr/AhJb0xWiN8iMBOfiFWrZSAIhANZPQ8dGRyvd6Fl+uFN3yi+ND5OI3wPCfxWVpzZerB+A"}]},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.9.1_1601480335479_0.4638777778947163"},"_hasShrinkwrap":false},"2.9.2":{"name":"micromark","version":"2.9.2","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/cli":"^7.0.0","@babel/core":"^7.0.0","babel-plugin-unassert":"^3.0.0","browserify":"^16.0.0","character-entities":"^1.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","eslint-plugin-es":"^3.0.0","eslint-plugin-security":"^1.0.0","eslint-plugin-sonarjs":"^0.5.0","gzip-size-cli":"^3.0.0","ms":"^2.0.0","nyc":"^15.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^8.0.0","remark-preset-wooorm":"^7.0.0","resolve-from":"^5.0.0","tape":"^5.0.0","tinyify":"^3.0.0","unicode-13.0.0":"^0.8.0","xo":"^0.33.0"},"scripts":{"generate-expressions":"node script/generate-expressions","generate-dist":"babel lib --out-dir dist --quiet --retain-lines --plugins babel-plugin-unassert,./script/babel-transform-undebug.js,./script/babel-transform-constants.js; prettier dist --loglevel error --write","generate-size":"browserify . -p tinyify -s micromark -o micromark.min.js; gzip-size micromark.min.js; gzip-size --raw micromark.min.js","generate":"npm run generate-expressions && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . -w --loglevel warn && xo --fix","test-api":"node test","test-coverage":"nyc --reporter lcov tape test/index.js","test":"npm run generate && npm run format && npm run test-coverage"},"nyc":{"check-coverage":true,"lines":100,"functions":100,"branches":100},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"prettier":true,"envs":["shared-node-browser"],"overrides":[{"files":["lib/**/*.js"],"plugin":["es"],"extends":["plugin:es/no-2015","plugin:security/recommended","plugin:sonarjs/recommended"],"rules":{"complexity":"off","es/no-array-from":"off","es/no-object-assign":"off","guard-for-in":"off","max-depth":"off","no-multi-assign":"off","no-unmodified-loop-condition":"off","security/detect-object-injection":"off","sonarjs/cognitive-complexity":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off"}},{"files":["test/**/*.js"],"rules":{"import/no-unassigned-import":"off"}}],"ignores":["dist/"]},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"796a6d2569dc92eeed4c348300a522bee5882895","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.9.2","_nodeVersion":"14.8.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-W9P8sexN1Erab68sZBz4ugkNmuHy1L6O9fwxQ6TVDbgqopAeJA3+d/Nsdq1ClydGqWc/c3tf4r7ZmLMHgxbdbQ==","shasum":"dc8428f42c14ba831c52a6658e26d7d88926c68c","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.9.2.tgz","fileCount":162,"unpackedSize":375279,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfdalqCRA9TVsSAnZWagAAnXUP/0XA7YcHtOMxnOTQPUVW\nNiYCt0ul+gAucv1L4hK1l2uFhhSrOHsCSlIpjpo+wWlTG3650+76cD+dy3I9\nRlnNIHvhcUlW63JMr3qnKRzMMCJag23e9Fab70ZCqmCHGGYUeoWwSBTxT4hP\nHomv3unn1U1mqw4jmyNSoUShiRTcLhJzCvC4OWXQnQax5QB1qkMs4eZ7JfdC\nORK86Jqek4vJB9wEj0+q3avz6E+OgIk/pNvv9tsShxyY35WHsI2SAEqjUeuS\nSWF9l8zw9x3oeWYxtCRp9gBRxBaLU/Bdr2JwNjqxRn1S6uxv5Vf/qYzk6/sb\nG19l/oH8u5tr8ZC2Kk8q6qeeLIwBQK8RjRunTjlbSVZwHOJPLZ4Xxbody1Xd\nTP+NlVgJr3czp5Zt92A9dJq0xpyYTbkV/j9I8kOaENTrOAFlgE5OGd2cmUCY\noXfodiRmG2GRI6kQy/dTrhHpsYNfjarjPEcJdaRVxjrdFmGfzqqU8wlq6nDu\nf/yPvsJhslvy+58b0VPwcHZaQKNG6o9WYHVxbO4CeF4MnIELXEn6pIjCzSms\n8RMvCkmfo8soDsMTj09wOL6N2csFKtRhz5uRP6ZA44zBPmdXIVrutJkS08Ot\naVzHqFN/3ZcUXkmuHsydew4FSKFEafME46gwqoIRSXXdYqekBamIqzjgLX+Z\nf+TA\r\n=RCPy\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICuHdPfv2e+GpXUrsn0j7UV1cZG6wOpAS5eGKmPuQQjwAiBAa9qy/dc1U/axiRsRhRLoYstVdRWO4WtVnpOZhWx20Q=="}]},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.9.2_1601546601675_0.5345638956267904"},"_hasShrinkwrap":false},"2.10.0":{"name":"micromark","version":"2.10.0","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"types":"index.d.ts","dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/cli":"^7.0.0","@babel/core":"^7.0.0","@types/events":"^3.0.0","babel-plugin-unassert":"^3.0.0","browserify":"^17.0.0","character-entities":"^1.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","dtslint":"^4.0.0","eslint-plugin-es":"^3.0.0","eslint-plugin-security":"^1.0.0","eslint-plugin-sonarjs":"^0.5.0","gzip-size-cli":"^3.0.0","jsfuzz":"1.0.14","ms":"^2.0.0","nyc":"^15.0.0","patch-package":"^6.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^8.0.0","remark-preset-wooorm":"^7.0.0","resolve-from":"^5.0.0","tape":"^5.0.0","tinyify":"^3.0.0","unicode-13.0.0":"^0.8.0","xo":"^0.33.0"},"scripts":{"postinstall":"patch-package --patch-dir script/patches","generate-constant-typings":"node script/generate-constant-typings","generate-expressions":"node script/generate-expressions","generate-dist":"babel lib --out-dir dist --quiet --retain-lines --plugins babel-plugin-unassert,./script/babel-transform-undebug.js,./script/babel-transform-constants.js; node script/copy-dict.js; prettier dist --loglevel error --write","generate-size":"browserify . -p tinyify -s micromark -o micromark.min.js; gzip-size micromark.min.js; gzip-size --raw micromark.min.js","generate":"npm run generate-constant-typings && npm run generate-expressions && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . -w --loglevel warn && xo --fix","pretest-fuzz":"node script/generate-fixtures","test-fuzz":"timeout 15m jsfuzz test/fuzz.js test/fixtures --rss-limit-mb 300 --timeout 300","test-api":"node test","test-coverage":"nyc --reporter lcov tape test/index.js","test-types":"dtslint .","test":"npm run generate && npm run format && npm run test-coverage && npm run test-types"},"nyc":{"check-coverage":true,"lines":100,"functions":100,"branches":100},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"prettier":true,"envs":["shared-node-browser"],"overrides":[{"files":["lib/**/*.js"],"plugin":["es"],"extends":["plugin:es/no-2015","plugin:security/recommended","plugin:sonarjs/recommended"],"rules":{"complexity":"off","es/no-array-from":"off","es/no-object-assign":"off","guard-for-in":"off","max-depth":"off","no-multi-assign":"off","no-unmodified-loop-condition":"off","security/detect-object-injection":"off","sonarjs/cognitive-complexity":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off"}},{"files":["test/**/*.js"],"rules":{"import/no-unassigned-import":"off"}}],"ignores":["micromark.test.ts","dist/"]},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"f5bc6ecb6c7f8861dc820f7eb984b9e2d2847512","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.10.0","_nodeVersion":"14.8.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-HPs5JgSDvP0YTYlNfyxb3JjE+Jio+7rgeNkDzIFi5/vV60gPw/qKkVz/PxvEBRkPgWL1YtXX++1IZjvVX2dHCw==","shasum":"92e514016d6fce7aed1a8dfdeda2a20e52f3f0ea","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.10.0.tgz","fileCount":185,"unpackedSize":411219,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfgul/CRA9TVsSAnZWagAAFx8P/jPVMd8GZGP3oq1hrFR1\nTIkNFh0LcNxiHBl3TwQYSywyAZZHRKtZgwn1Fixym5kC/ilXq8h4kqtA3TvG\nIsVQDCWYjzx87Vh6yM0yPu434a766jTfCJH0XVtTcr8eaY+OYVlrA8kJh7nZ\nSdrQ4/lJYtGdWaswMlBVfczO9gsq28JqxE8ajNbOPCXP/gvfKJS+HC7plDrn\nsmhpN7t+6dPbzfEGsSHVAjSGYMyKvzvyRxahxusKTyzJ0Fz7u/TmWUEY8Z0U\nMrI3nmoDSAOOIG+mMKg5wrkGK5J+/iG31FEfkM/xBn0hfxa/E8mqBCnVLRtM\nua3VQeQ4GR2/EdrF0J3/zbkbhAb2fSN9a2qrSdr5Uejx91IZEeZ7mDZlaJW6\noIOHnd6CK/c4yy2T1nRuuaFWQwmmCczgX9rLI19gCe+XK7EHiMAH2iJeoXuw\nTHt08noINpxkkfS4Z9FOukx8HfCoiVfGC7oUs8ApHfAOZdIxxOq2UNdvwO8h\n9k3xj+hPseGTkv0/Z0nmw0/lm8h9pqcpv8JV/K4cgTaRas7h4Z/DFXlDg93l\nvYwxXJkJBbe+H2QumByIZ6AVsOMORqs1VX9lG7jorzH+WfC02mfo0Rz8WIg4\ndk0/Izl2YxyPkXH79wuZ4rFf1aoQivNsNsACqkc4bP+C+XWBcke4EhEaEm4Q\nGmoC\r\n=pO1p\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEpiqba2hH/yUHj+w7FVxudZ5r85UcpBSrzFQHH5iVT0AiAaVeEfjoh1XItkOuyreFd4XiAJrztl+1m2iZeW2nYsWg=="}]},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.10.0_1602414974871_0.45937351146639593"},"_hasShrinkwrap":false},"2.10.1":{"name":"micromark","version":"2.10.1","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"types":"index.d.ts","dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/cli":"^7.0.0","@babel/core":"^7.0.0","@types/events":"^3.0.0","babel-plugin-unassert":"^3.0.0","browserify":"^17.0.0","character-entities":"^1.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","dtslint":"^4.0.0","eslint-plugin-es":"^3.0.0","eslint-plugin-security":"^1.0.0","eslint-plugin-sonarjs":"^0.5.0","gzip-size-cli":"^3.0.0","jsfuzz":"1.0.14","ms":"^2.0.0","nyc":"^15.0.0","patch-package":"^6.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^8.0.0","remark-preset-wooorm":"^7.0.0","resolve-from":"^5.0.0","tape":"^5.0.0","tinyify":"^3.0.0","unicode-13.0.0":"^0.8.0","xo":"^0.33.0"},"scripts":{"generate-constant-typings":"node script/generate-constant-typings","generate-expressions":"node script/generate-expressions","generate-dist":"babel lib --out-dir dist --quiet --retain-lines --plugins babel-plugin-unassert,./script/babel-transform-undebug.js,./script/babel-transform-constants.js; node script/copy-dict.js; prettier dist --loglevel error --write","generate-size":"browserify . -p tinyify -s micromark -o micromark.min.js; gzip-size micromark.min.js; gzip-size --raw micromark.min.js","generate":"npm run generate-constant-typings && npm run generate-expressions && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . -w --loglevel warn && xo --fix","pretest-fuzz":"patch-package --patch-dir script/patches; node script/generate-fixtures","test-fuzz":"timeout 15m jsfuzz test/fuzz.js test/fixtures --rss-limit-mb 300 --timeout 300","test-api":"node test","test-coverage":"nyc --reporter lcov tape test/index.js","test-types":"dtslint .","test":"npm run generate && npm run format && npm run test-coverage && npm run test-types"},"nyc":{"check-coverage":true,"lines":100,"functions":100,"branches":100},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"prettier":true,"envs":["shared-node-browser"],"overrides":[{"files":["lib/**/*.js"],"plugin":["es"],"extends":["plugin:es/no-2015","plugin:security/recommended","plugin:sonarjs/recommended"],"rules":{"complexity":"off","es/no-array-from":"off","es/no-object-assign":"off","guard-for-in":"off","max-depth":"off","no-multi-assign":"off","no-unmodified-loop-condition":"off","security/detect-object-injection":"off","sonarjs/cognitive-complexity":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off"}},{"files":["test/**/*.js"],"rules":{"import/no-unassigned-import":"off"}}],"ignores":["micromark.test.ts","dist/"]},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"a438145c46df5791f804ae9352e553737fa32a37","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.10.1","_nodeVersion":"14.8.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-fUuVF8sC1X7wsCS29SYQ2ZfIZYbTymp0EYr6sab3idFjigFFjGa5UwoniPlV9tAgntjuapW1t9U+S0yDYeGKHQ==","shasum":"cd73f54e0656f10e633073db26b663a221a442a7","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.10.1.tgz","fileCount":185,"unpackedSize":411199,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfguubCRA9TVsSAnZWagAAQyAP+QCF1hgQ0/J6uXjk4N5z\ngoGuPystRFDJCct3RT0Hb1k6e7TCifCYrmgvtjAH3cnna2md65HtYc82Oq53\n1vLXIfK8A3xA976lvOX/XvVy6LDcP8d9kNkiSuu2iVhLFTtNlMWmAF3ajeIG\nrY35OAa29+otv1bcZ8zSoOoL6FIs6vX212eiTX4peDCFkllLswo+gVfmpOgd\nEyFMZfowND1DKrzb5anMp8pIGTYpY1AivvoNnDjEDP0mGFLRybhoObQR7UPA\n5srFe697R0g6E8QRyJn+WjwTxez3ZzFMDg9AZfcEx7cxhkLlNvY1Ihz/dUYR\nnw1BGuDjCqoqg5kAjPb8uXifgLpnBF6KiFerVpO0jYUYW6vmfk1/0TssvWH1\n6bA58r4cpWCvy2sNaVQvEPQ+wkdUxfNq0hSCKmeCJJcspTyQOx3/nQEaKa1z\nPbJkk9IVlFbG5Dabtx0oGB5r78B5yQvEUF0iCrYgaEFtb5gqBBnd0TY0vBgV\nxaWBu3l7U2Bt4fTohQTQY3G1RmiTZ4o9YfAeI4i5uaCRuZYhtCBXTzYA75oz\nZBv6yAVVGViVP6fpcNCwADHTzQzwLw+Yl1qDr2a4wI85+8wlmW8JcYuSJiXj\nbguQoewfEK8Mq7jgMAwSlWFas7TYDfui5ji2DFN0pcaMHD7hAm6YbOIq36XL\ns9Hq\r\n=Mhuj\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDbtxsOQicms6wfVAGC56guA3v1dWq1ezFet9VW8mGFDAiAD0CYnO3WQ3DWSkSURmVGrMlRLyHOwPYn6RyeAQn24cA=="}]},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.10.1_1602415514864_0.5687371172948785"},"_hasShrinkwrap":false},"2.11.0":{"name":"micromark","version":"2.11.0","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"main":"./index.js","module":"./index.mjs","types":"index.d.ts","exports":{".":{"require":"./index.js","import":"./index.mjs"},"./buffer":{"require":"./buffer.js","import":"./buffer.mjs"},"./stream":{"require":"./stream.js","import":"./stream.mjs"},"./index.d.ts":"./index.d.ts","./buffer.d.ts":"./buffer.d.ts","./stream.d.ts":"./stream.d.ts","./package.json":"./package.json","./":"./"},"dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/core":"^7.0.0","@rollup/plugin-babel":"^5.0.0","@rollup/plugin-commonjs":"^17.0.0","@rollup/plugin-node-resolve":"^11.0.0","@types/events":"^3.0.0","@unicode/unicode-13.0.0":"^1.0.0","babel-plugin-inline-constants":"^1.0.0","babel-plugin-unassert":"^3.0.0","babel-plugin-undebug":"^1.0.0","c8":"^7.0.0","character-entities":"^1.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","cross-env":"^7.0.0","dtslint":"^4.0.0","eslint-plugin-es":"^4.0.0","eslint-plugin-security":"^1.0.0","esm":"^3.0.0","glob":"^7.0.0","gzip-size-cli":"^4.0.0","jsfuzz":"1.0.14","ms":"^2.0.0","patch-package":"^6.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^9.0.0","remark-preset-wooorm":"^8.0.0","resolve-from":"^5.0.0","rollup":"^2.0.0","rollup-plugin-terser":"^7.0.0","tape":"^5.0.0","xo":"^0.35.0"},"scripts":{"generate-lib-types":"node --experimental-modules script/generate-constant-typings.mjs","generate-lib-expressions":"node --experimental-modules script/generate-expressions.mjs","generate-lib-cjs":"rollup -c --silent","generate-lib":"npm run generate-lib-types && npm run generate-lib-expressions && npm run generate-lib-cjs","generate-dist-types":"node --experimental-modules script/copy-dict.mjs","generate-dist-js":"cross-env BUILD=dist rollup -c --silent","generate-dist":"npm run generate-dist-types && npm run generate-dist-js","generate-size":"cross-env BUILD=size rollup -c --silent && gzip-size micromark.min.js && gzip-size --raw micromark.min.js","generate":"npm run generate-lib && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . -w --loglevel warn && xo --fix","pretest-fuzz":"patch-package --patch-dir script/patches && node script/generate-fixtures.mjs","test-fuzz":"cross-env NODE_OPTIONS=\"-r esm\" timeout 15m jsfuzz test/fuzz.js test/fixtures","test-api":"node --experimental-modules test/index.mjs","test-coverage":"c8 --check-coverage --lines 100 --functions 100 --branches 100 --reporter lcov node --experimental-modules test/index.mjs","test-types":"dtslint .","test":"npm run generate && npm run format && npm run test-coverage && npm run test-types"},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"extensions":["mjs"],"prettier":true,"envs":["shared-node-browser"],"rules":{"import/extensions":["error","always"]},"overrides":[{"files":["lib/**/*.{js,mjs}"],"plugin":["es"],"extends":["plugin:es/no-new-in-es2015","plugin:security/recommended"],"rules":{"complexity":"off","es/no-array-from":"off","es/no-object-assign":"off","es/no-modules":"off","import/no-mutable-exports":"off","import/no-anonymous-default-export":"off","guard-for-in":"off","max-depth":"off","no-multi-assign":"off","no-unmodified-loop-condition":"off","security/detect-object-injection":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off"}},{"files":["**/*.d.ts"],"rules":{"import/extensions":["error","never"]}},{"files":["test/**/*.{js,mjs}"],"rules":{"import/no-unassigned-import":"off"}}],"ignores":["dist/","lib/**/*.js","micromark.test.ts"]},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"bb42d29f7363f151d71e72f651af3680ad4fe1f8","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.11.0","_nodeVersion":"15.1.0","_npmVersion":"6.14.9","dist":{"integrity":"sha512-dB7wxG0MkGm25xOMUXfHgQy7c4f4Cuuv5PQ7npi5EKc3CvCkaVAZE8AgraqkJT+7YDv1DOQL0NVrZd9WZ0d99A==","shasum":"7e2e572d36eae96e13b7d21468cc68f1e15a1543","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.11.0.tgz","fileCount":352,"unpackedSize":787980,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfz7H3CRA9TVsSAnZWagAAdd0P+gNbDDFDX8H8DCM/oA1q\nJpSFDKYQiktOP+7sNnR2wak5/7rqHIJjal4+x6higiLBvIdMTa7lOCjTiuHO\n2VSnkFosNpfcDMUlixuyU1XdO1In3bgFtZPIbgXsu18ZQZubOftD/hoFbbmx\nmb28qOHQn+ut+XOqfmWyOnOrGVMwgmQe/52qcZO5sujh2PYOgJIg7sZNQrQV\nWYJhKNDEgIJtdL/LY4Z/1Sw+mMMHqyXTcXYYp/LDr6OB72gupsiGW8pif212\nSyoa9m+ZfBo4MSMkWlNavkuU/A6YEuk3uLuQSP8h4EIHETbH92Mbzl3DmNkR\nwE23EJISJhE7m+UpGAS2diQHBuOGEZUzKe9UW5xcv/d+WGpR/fsqoeL/ifVt\noD0eAafTLeHNPwdmVwP2mcZMZxJrKDc8nUGppmYT/A2gpGgsp0OERKP+EfHl\nOC85ggtkmAfHEjXhVcXdGP/NxnYPd4u3kf1yxKzPfagTtn6XLbjN4AU+2RxX\n8/H/S/D6KfqEhEFMrd7kJm7/PpJREReXKuxiz/PKSGjpvifxGdeSajAixFEE\nwDV9+vwY8umflzcBsbEGTY2Gf0RTlUhnSWpt43H9z0i14sbRJCtCKaArBXWI\nkuvh16FwWGPhK2nuzpPblVatp5LhVk5Lp0dUnvVMmzdzMB4sV90PzAjY6wpL\nKznq\r\n=wGzl\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDe+AGTUilXc/d/W236LF37Xbqri379jPxc2Z8JdufAcQIhAIlx5ID6s8AB6npywABjpS2RTdCF253S3BZr3TuT5NTw"}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.11.0_1607447031339_0.6740519143393238"},"_hasShrinkwrap":false},"2.11.1":{"name":"micromark","version":"2.11.1","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"main":"./index.js","module":"./index.mjs","types":"index.d.ts","dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/core":"^7.0.0","@rollup/plugin-babel":"^5.0.0","@rollup/plugin-commonjs":"^17.0.0","@rollup/plugin-node-resolve":"^11.0.0","@types/events":"^3.0.0","@unicode/unicode-13.0.0":"^1.0.0","babel-plugin-inline-constants":"^1.0.0","babel-plugin-unassert":"^3.0.0","babel-plugin-undebug":"^1.0.0","c8":"^7.0.0","character-entities":"^1.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","cross-env":"^7.0.0","dtslint":"^4.0.0","eslint-plugin-es":"^4.0.0","eslint-plugin-security":"^1.0.0","esm":"^3.0.0","glob":"^7.0.0","gzip-size-cli":"^4.0.0","jsfuzz":"1.0.14","ms":"^2.0.0","patch-package":"^6.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^9.0.0","remark-preset-wooorm":"^8.0.0","resolve-from":"^5.0.0","rollup":"^2.0.0","rollup-plugin-terser":"^7.0.0","tape":"^5.0.0","xo":"^0.35.0"},"scripts":{"generate-lib-types":"node --experimental-modules script/generate-constant-typings.mjs","generate-lib-expressions":"node --experimental-modules script/generate-expressions.mjs","generate-lib-cjs":"rollup -c --silent","generate-lib":"npm run generate-lib-types && npm run generate-lib-expressions && npm run generate-lib-cjs","generate-dist-types":"node --experimental-modules script/copy-dict.mjs","generate-dist-js":"cross-env BUILD=dist rollup -c --silent","generate-dist":"npm run generate-dist-types && npm run generate-dist-js","generate-size":"cross-env BUILD=size rollup -c --silent && gzip-size micromark.min.js && gzip-size --raw micromark.min.js","generate":"npm run generate-lib && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . -w --loglevel warn && xo --fix","pretest-fuzz":"patch-package --patch-dir script/patches && node script/generate-fixtures.mjs","test-fuzz":"cross-env NODE_OPTIONS=\"-r esm\" timeout 15m jsfuzz test/fuzz.js test/fixtures","test-api":"node --experimental-modules test/index.mjs","test-coverage":"c8 --check-coverage --lines 100 --functions 100 --branches 100 --reporter lcov node --experimental-modules test/index.mjs","test-types":"dtslint .","test":"npm run generate && npm run format && npm run test-coverage && npm run test-types"},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"extensions":["mjs"],"prettier":true,"envs":["shared-node-browser"],"rules":{"import/extensions":["error","always"]},"overrides":[{"files":["lib/**/*.{js,mjs}"],"plugin":["es"],"extends":["plugin:es/no-new-in-es2015","plugin:security/recommended"],"rules":{"complexity":"off","es/no-array-from":"off","es/no-object-assign":"off","es/no-modules":"off","import/no-mutable-exports":"off","import/no-anonymous-default-export":"off","guard-for-in":"off","max-depth":"off","no-multi-assign":"off","no-unmodified-loop-condition":"off","security/detect-object-injection":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off"}},{"files":["**/*.d.ts"],"rules":{"import/extensions":["error","never"]}},{"files":["test/**/*.{js,mjs}"],"rules":{"import/no-unassigned-import":"off"}}],"ignores":["dist/","lib/**/*.js","micromark.test.ts"]},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"c7ae2a95f4c1ecf8da7a1e7fc0557d9c8e95e4a2","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.11.1","_nodeVersion":"15.1.0","_npmVersion":"6.14.9","dist":{"integrity":"sha512-Nc9vqtfC8t5iKL7ZCi1G9+lIDZcnrqmE1Apng01dO6e2g3q76S/FYehj+CjBwiC0tUSsV1S412/HgkW8JAywsw==","shasum":"c8d3fb9935b722b324d59de730bc44a6edff3b56","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.11.1.tgz","fileCount":272,"unpackedSize":617653,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf0LQMCRA9TVsSAnZWagAAVmAQAKNRNN8C6LVGjA+k0AE/\ndzWlmm5rDUw0rZ5EXBinYOMRfRpz4ydexEq0d5kDcQiJV8XVeD08QMMw1kUn\nOzMXaLwK6C4TLrSoRnYEKRB60xCAMNwB7DcFoLSU+BLaddOFHyGO2V12b4/N\nJrMbYrwjhbbCp5B1x2UH9dLUaD9bc3l6xYnHsI1wczNxDhlaqSe+AggQZlUP\n6e5vqt9sGDIjla9dQLfzSuBEbzxRHh9n5HLIdXKzffiFFjmQX5Fq2avL3mF6\nSLCDNFOlB6z4tLi3B7KTB0gn2S79bVQ4G3qsCi2lah/1t6tkzaOiaF5zWqUU\n0IgrVUyoEvClg1kHMOGcM3VeicdMLUE72fSn80jtiam/8T8dJKL5W/ebO9Vy\nEf2NOj+xOL7yoYcVgzjaekyE1X5T06xMrFfBG5Y42ikWeKiLIMQSAYPOn55T\nDLLxgkHtnxKKFaBHfFKqbhpYB4/MWyaM/kV908Fg/8LnIoztJHNSfcsH5TOg\nmudaYjXMS7zvFGdk5txUQlP5oyFkhy9nudz+FuKAwF3qHrj+WL2JDxEKIDWy\nmkRtWmMIPKNhzISTDOZrURXxAdwonsxBbwl5F+79CWKFl99pOxsxtbApiv67\nKSYx/DJBccF+qNQfCjDWTbhaWM7+tbAg1M0weaPaczP2gY2pV7YZ3HcWaU0r\nNDKw\r\n=w0SI\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBArE2j4MfTHwzYczudZMNbsbmT1L3/QZ6Ae431dcW5QAiEAjlDHtsRA2otwc6RCY1bCnD3Lm40h/r1Sp2+o4w23e9I="}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.11.1_1607513100016_0.980352641279274"},"_hasShrinkwrap":false},"2.11.2":{"name":"micromark","version":"2.11.2","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"main":"./index.js","types":"index.d.ts","dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/core":"^7.0.0","@rollup/plugin-babel":"^5.0.0","@rollup/plugin-commonjs":"^17.0.0","@rollup/plugin-node-resolve":"^11.0.0","@types/events":"^3.0.0","@unicode/unicode-13.0.0":"^1.0.0","babel-plugin-inline-constants":"^1.0.0","babel-plugin-unassert":"^3.0.0","babel-plugin-undebug":"^1.0.0","c8":"^7.0.0","character-entities":"^1.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","cross-env":"^7.0.0","dtslint":"^4.0.0","eslint-plugin-es":"^4.0.0","eslint-plugin-security":"^1.0.0","esm":"^3.0.0","glob":"^7.0.0","gzip-size-cli":"^4.0.0","jsfuzz":"1.0.14","ms":"^2.0.0","patch-package":"^6.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^9.0.0","remark-preset-wooorm":"^8.0.0","resolve-from":"^5.0.0","rollup":"^2.0.0","rollup-plugin-terser":"^7.0.0","tape":"^5.0.0","xo":"^0.35.0"},"scripts":{"generate-lib-types":"node --experimental-modules script/generate-constant-typings.mjs","generate-lib-expressions":"node --experimental-modules script/generate-expressions.mjs","generate-lib-cjs":"rollup -c --silent","generate-lib":"npm run generate-lib-types && npm run generate-lib-expressions && npm run generate-lib-cjs","generate-dist-types":"node --experimental-modules script/copy-dict.mjs","generate-dist-js":"cross-env BUILD=dist rollup -c --silent","generate-dist":"npm run generate-dist-types && npm run generate-dist-js","generate-size":"cross-env BUILD=size rollup -c --silent && gzip-size micromark.min.js && gzip-size --raw micromark.min.js","generate":"npm run generate-lib && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . -w --loglevel warn && xo --fix","pretest-fuzz":"patch-package --patch-dir script/patches && node script/generate-fixtures.mjs","test-fuzz":"cross-env NODE_OPTIONS=\"-r esm\" timeout 15m jsfuzz test/fuzz.js test/fixtures","test-api":"node --experimental-modules test/index.mjs","test-coverage":"c8 --check-coverage --lines 100 --functions 100 --branches 100 --reporter lcov node --experimental-modules test/index.mjs","test-types":"dtslint .","test":"npm run generate && npm run format && npm run test-coverage && npm run test-types"},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"extensions":["mjs"],"prettier":true,"envs":["shared-node-browser"],"rules":{"import/extensions":["error","always"]},"overrides":[{"files":["lib/**/*.{js,mjs}"],"plugin":["es"],"extends":["plugin:es/no-new-in-es2015","plugin:security/recommended"],"rules":{"complexity":"off","es/no-array-from":"off","es/no-object-assign":"off","es/no-modules":"off","import/no-mutable-exports":"off","import/no-anonymous-default-export":"off","guard-for-in":"off","max-depth":"off","no-multi-assign":"off","no-unmodified-loop-condition":"off","security/detect-object-injection":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off"}},{"files":["**/*.d.ts"],"rules":{"import/extensions":["error","never"]}},{"files":["test/**/*.{js,mjs}"],"rules":{"import/no-unassigned-import":"off"}}],"ignores":["dist/","lib/**/*.js","micromark.test.ts"]},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"384557dbbdeda8330b242f9207754c8e34bda389","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.11.2","_nodeVersion":"15.1.0","_npmVersion":"6.14.9","dist":{"integrity":"sha512-IXuP76p2uj8uMg4FQc1cRE7lPCLsfAXuEfdjtdO55VRiFO1asrCSQ5g43NmPqFtRwzEnEhafRVzn2jg0UiKArQ==","shasum":"e8b6a05f54697d2d3d27fc89600c6bc40dd05f35","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.11.2.tgz","fileCount":272,"unpackedSize":618503,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf0OhbCRA9TVsSAnZWagAA2ocP/2F/x7CwcPX7XPCsZ0jV\nbSGhvngiWycfSyuXamV2jA7GhgHU0Vvj9mTt8EOOR61525nb1EP54tEdi7P/\nEf7XFPvoaQpACcbAmrv4Yu6eblfUMhPrTn3efHAIxfgwxVY7wnFHEZCg/vrR\niIEL3qwSVC85w1PhdDFo3mMFcDCF/Uqb6Uh9fNyHMCMj1OCX63J8aa75RzdA\njgHfO1rPNkoe8efPBWTVcClEDrn0Hn1bGGc7PQhqBSbNFzGm4CGD6KFnfdI5\nm/6b3o/CoNBAofeXn2yoY0lusgsTUUl9sGVfX2soKDRp5oPDoiLmJjLeNZAh\nEb4mqKXwA5eq+zXednUlb1CDgjkM+qBaVrqFWjxNtQBGXC34Tlg3x78VOnC3\nyIEiJcFK0bgvMpyC4QaNOA9+Ms0Eqd/6VI1ObWk/bUXBg57HFeg5B/gchJCa\nwEclZyUXQqoPXOhZ16yyMselMRGC8IPl24IGa/c3a/CDru3Rp2yXw6SN5rT3\nQIUosEWEXtvs668FlMgIPbsCYf4CS9lWK2VRXVX1YScNkYJeJ2ZwmiWAyrSW\nwGkCmjb6IBdfU7i3Q+35LmPC2OxKH6QHggRzJZXi4681e0PJ4INikHanJXXo\nk1WASfa1pzRfePmzUp/pN3sYi038hAll9jAMM3FmEk3CGkEbF45pFf+gjJus\n2ssy\r\n=gGXN\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCN0BiZikAOtvpshxXa+OZkZQL8fY+9YlBtUOVFKWAGtwIhANN8MXaLnz5OGCqFEfE9lX5fJaxbeb+fpupyOq2oEbBy"}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.11.2_1607526490692_0.8702100469648029"},"_hasShrinkwrap":false},"2.11.3":{"name":"micromark","version":"2.11.3","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"main":"./index.js","types":"index.d.ts","dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/core":"^7.0.0","@rollup/plugin-babel":"^5.0.0","@rollup/plugin-commonjs":"^17.0.0","@rollup/plugin-node-resolve":"^11.0.0","@types/events":"^3.0.0","@unicode/unicode-13.0.0":"^1.0.0","babel-plugin-inline-constants":"^1.0.0","babel-plugin-unassert":"^3.0.0","babel-plugin-undebug":"^1.0.0","c8":"^7.0.0","character-entities":"^1.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","cross-env":"^7.0.0","dtslint":"^4.0.0","eslint-plugin-es":"^4.0.0","eslint-plugin-security":"^1.0.0","esm":"^3.0.0","glob":"^7.0.0","gzip-size-cli":"^4.0.0","jsfuzz":"1.0.14","ms":"^2.0.0","patch-package":"^6.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^9.0.0","remark-preset-wooorm":"^8.0.0","resolve-from":"^5.0.0","rollup":"^2.0.0","rollup-plugin-terser":"^7.0.0","tape":"^5.0.0","xo":"^0.37.0"},"scripts":{"generate-lib-types":"node --experimental-modules script/generate-constant-typings.mjs","generate-lib-expressions":"node --experimental-modules script/generate-expressions.mjs","generate-lib-cjs":"rollup -c --silent","generate-lib":"npm run generate-lib-types && npm run generate-lib-expressions && npm run generate-lib-cjs","generate-dist-types":"node --experimental-modules script/copy-dict.mjs","generate-dist-js":"cross-env BUILD=dist rollup -c --silent","generate-dist":"npm run generate-dist-types && npm run generate-dist-js","generate-size":"cross-env BUILD=size rollup -c --silent && gzip-size micromark.min.js && gzip-size --raw micromark.min.js","generate":"npm run generate-lib && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . -w --loglevel warn && xo --fix","pretest-fuzz":"patch-package --patch-dir script/patches && node script/generate-fixtures.mjs","test-fuzz":"cross-env NODE_OPTIONS=\"-r esm\" timeout 15m jsfuzz test/fuzz.js test/fixtures","test-api":"node --experimental-modules test/index.mjs","test-coverage":"c8 --check-coverage --lines 100 --functions 100 --branches 100 --reporter lcov node --experimental-modules test/index.mjs","test-types":"dtslint .","test":"npm run generate && npm run format && npm run test-coverage && npm run test-types"},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"extensions":["mjs"],"prettier":true,"envs":["shared-node-browser"],"rules":{"import/extensions":["error","always"]},"overrides":[{"files":["lib/**/*.{js,mjs}"],"plugin":["es"],"extends":["plugin:es/no-new-in-es2015","plugin:security/recommended"],"rules":{"complexity":"off","es/no-array-from":"off","es/no-object-assign":"off","es/no-modules":"off","import/no-mutable-exports":"off","import/no-anonymous-default-export":"off","guard-for-in":"off","max-depth":"off","no-multi-assign":"off","no-unmodified-loop-condition":"off","security/detect-object-injection":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off"}},{"files":["**/*.d.ts"],"rules":{"import/extensions":["error","never"]}},{"files":["test/**/*.{js,mjs}"],"rules":{"import/no-unassigned-import":"off"}}],"ignores":["dist/","lib/**/*.js","micromark.test.ts"]},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"37eb84d8c91be03867b050b40fd338a05bf327c3","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.11.3","_nodeVersion":"15.1.0","_npmVersion":"6.14.11","dist":{"integrity":"sha512-oph5YYkVqR2U9OtWBcXYysZMtrdIvi8dfSeyEdr1wFr3Bk6YwI6THosX2AzKnhdps7mVUbXiqhmosu9DcA+xlQ==","shasum":"648e1e7970ea66a946cc2cbc678093ed814f29ed","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.11.3.tgz","fileCount":272,"unpackedSize":618579,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgGSscCRA9TVsSAnZWagAAZ5sQAIr2aqvJYM1MAyprFGt/\nfLZ5/mlD2O2I/I7XdQIxCm56xCat2ZFp4h2EE6PiB8h3rJ9nDzq26RucKd5R\n1GRnhMfyLnTNOq8PFqoqKmAQSCWh5UDLp7r3pbm6u3IXDEDCZrgHZ0n8U4Dp\nh8g8kgjmhErafbIdzzLtzkD3qmVZCY4EP7UeO6jbJwnn44KYi5TISqeCWMeh\no/9+iIieA2+xaW8HlXrv85UhOx1WCl9dChoAoNvg3Il48VSAEixtOvGxrtzd\n5xXGK7j5coXqJ/Gbt2oqjiOkE1Px8HepouoEIgqAXBRd89/6fLE+f3gOpvT3\nT6PWAgcqDxyxCR/lkgrkBm3X0kOn04Na2sqoY/02zt6aelWE8k+5+ur/bhTE\nz92iSWOToalaofFZSk7/Tk4vwG5YrtSCagL8K+r9oDS6P8o1oOxonsMCE5rB\nC1ZKn0PamV9PKXv8/ySITpGWt0H0nnk0wFj582ZZ0MFU0uxxg29C02wOgco0\nxuzR69h87JaSJZjI9Qot8xOHPyO7WJY3RDe1HU9z3RzJokN7AFdrfU+fFULK\n4e+u+CYAnPx+c17sHQbRxhLZl+7tnsxaHpPDKo7DyybdXRYKruBYG2KdV/AS\nlS7qMudvGZgQgKAEcb0YSx80VEMWyIbzmiNwJo2+fIGqxQqAn0/MEWZ9NDAa\nJ3tA\r\n=yU8I\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCMTp7Ldh9I56g4DACz9G7Ri1tbE3UkaE6cCal3P0YJTQIhAI/E+H9J/qJjO0smboqq6mHb52R2j/WkhE9qclAzBKEK"}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.11.3_1612262171910_0.8667788642604255"},"_hasShrinkwrap":false},"2.11.4":{"name":"micromark","version":"2.11.4","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Christian Murphy","email":"christian.murphy.42@gmail.com"},{"name":"Marouane Fazouane","email":"fazouanem3@gmail.com"},{"name":"John Otander","email":"johnotander@gmail.com","url":"https://johno.com"},{"name":"Stephan Schneider","email":"stephanschndr@gmail.com"},{"name":"Victor Felder","email":"victor@draft.li","url":"https://draft.li"},{"name":"Mudit Ameta","email":"zeusdeux@gmail.com","url":"https://mudit.xyz"},{"name":"Merlijn Vos","email":"merlijn@soverin.net"}],"main":"./index.js","types":"index.d.ts","dependencies":{"debug":"^4.0.0","parse-entities":"^2.0.0"},"devDependencies":{"@babel/core":"^7.0.0","@rollup/plugin-babel":"^5.0.0","@rollup/plugin-commonjs":"^17.0.0","@rollup/plugin-node-resolve":"^11.0.0","@types/events":"^3.0.0","@unicode/unicode-13.0.0":"^1.0.0","babel-plugin-inline-constants":"^1.0.0","babel-plugin-unassert":"^3.0.0","babel-plugin-undebug":"^1.0.0","c8":"^7.0.0","character-entities":"^1.0.0","commonmark.json":"^0.29.0","concat-stream":"^2.0.0","cross-env":"^7.0.0","dtslint":"^4.0.0","eslint-plugin-es":"^4.0.0","eslint-plugin-security":"^1.0.0","esm":"^3.0.0","glob":"^7.0.0","gzip-size-cli":"^4.0.0","jsfuzz":"1.0.14","ms":"^2.0.0","patch-package":"^6.0.0","prettier":"^2.0.0","regenerate":"^1.0.0","remark-cli":"^9.0.0","remark-preset-wooorm":"^8.0.0","resolve-from":"^5.0.0","rollup":"^2.0.0","rollup-plugin-terser":"^7.0.0","tape":"^5.0.0","xo":"^0.37.0"},"scripts":{"generate-lib-types":"node --experimental-modules script/generate-constant-typings.mjs","generate-lib-expressions":"node --experimental-modules script/generate-expressions.mjs","generate-lib-cjs":"rollup -c --silent","generate-lib":"npm run generate-lib-types && npm run generate-lib-expressions && npm run generate-lib-cjs","generate-dist-types":"node --experimental-modules script/copy-dict.mjs","generate-dist-js":"cross-env BUILD=dist rollup -c --silent","generate-dist":"npm run generate-dist-types && npm run generate-dist-js","generate-size":"cross-env BUILD=size rollup -c --silent && gzip-size micromark.min.js && gzip-size --raw micromark.min.js","generate":"npm run generate-lib && npm run generate-dist && npm run generate-size","format":"remark . -qfo && prettier . -w --loglevel warn && xo --fix","pretest-fuzz":"patch-package --patch-dir script/patches && node script/generate-fixtures.mjs","test-fuzz":"cross-env NODE_OPTIONS=\"-r esm\" timeout 15m jsfuzz test/fuzz.js test/fixtures","test-api":"node --experimental-modules test/index.mjs","test-coverage":"c8 --check-coverage --lines 100 --functions 100 --branches 100 --reporter lcov node --experimental-modules test/index.mjs","test-types":"dtslint .","test":"npm run generate && npm run format && npm run test-coverage && npm run test-types"},"prettier":{"tabWidth":2,"useTabs":false,"singleQuote":true,"bracketSpacing":false,"semi":false,"trailingComma":"none"},"xo":{"esnext":false,"extensions":["mjs"],"prettier":true,"envs":["shared-node-browser"],"rules":{"import/extensions":["error","always"]},"overrides":[{"files":["lib/**/*.{js,mjs}"],"plugin":["es"],"extends":["plugin:es/no-new-in-es2015","plugin:security/recommended"],"rules":{"complexity":"off","es/no-array-from":"off","es/no-object-assign":"off","es/no-modules":"off","import/no-mutable-exports":"off","import/no-anonymous-default-export":"off","guard-for-in":"off","max-depth":"off","no-multi-assign":"off","no-unmodified-loop-condition":"off","security/detect-object-injection":"off","unicorn/explicit-length-check":"off","unicorn/prefer-includes":"off","unicorn/prefer-number-properties":"off"}},{"files":["**/*.d.ts"],"rules":{"import/extensions":["error","never"]}},{"files":["test/**/*.{js,mjs}"],"rules":{"import/no-unassigned-import":"off"}}],"ignores":["dist/","lib/**/*.js","micromark.test.ts"]},"remarkConfig":{"plugins":["preset-wooorm",["lint-no-html",false]]},"gitHead":"f1414446f0dcab81fc18e926138647d2fe8bf64d","homepage":"https://github.com/micromark/micromark#readme","_id":"micromark@2.11.4","_nodeVersion":"15.1.0","_npmVersion":"6.14.11","dist":{"integrity":"sha512-+WoovN/ppKolQOFIAajxi7Lu9kInbPxFuTBVEavFcL8eAfVstoc5MocPmqBeAdBOJV00uaVjegzH4+MA0DN/uA==","shasum":"d13436138eea826383e822449c9a5c50ee44665a","tarball":"https://registry.npmjs.org/micromark/-/micromark-2.11.4.tgz","fileCount":272,"unpackedSize":619235,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgG7o2CRA9TVsSAnZWagAAS+EP/iRpURVbyXA2KDEV2rgE\nEFDRlSlRhhhbyf4OGtoWfj1jKW+5RDJ1fMWS2W1/4q+atnEkXAzSkC63EKwx\nIWcLqRvJ8nJfaX1DCxPjINqNFEU72xn2dT/NEO1ifO0CZzVtdPW2nHFoGj5L\n4ea+f28Flq3saHYaY2ane0y/G+ZN7C6R8ANeWiroSPsK5OYZ80ASvnfSPtXG\n0MgFpQfLeprrzstVqbTKNa2Q9ZehGB4n6/LuHEBnOP0FioTmiWglhg4RbSEj\nrKHuii5UaWs0PCqjj1vhIuEDZSeNy0ML/w69FQuQK2tZUt8QpEx/LGXedKEN\nFq/ZSthIGaKxqj+s4XZympwoE3Vj2/0PS6eKxO/4OavPCJCesZMprnhVgoxc\n4CV77n2u/FHsFQLBoXA+3Dw1oJNqZ9Qfh13gE+IjWyhGQMd9Fr7lUUzJCa0M\njPtKVvYnw9Wv5hYgYkCDQUhGpUOVblmLMe8DY+WgxM5i1UGTSqhgoCaIUeqI\ntkd9nnDskhVrK1dga2IPJyElGLC/rADvdYjVRzVos5N4bodNRhgJdtgbxX0J\nHB3cr3Hrh9hQlC6/BKEh0uiOPoyqIGFXMJL0zU5WlkzYxD2X4mRTlLtc8h0+\nEhbCLF3W/x7z8lLJOlbuxGvHb5UYI3z/1hHhaajVVme7zKEnAsXpLQ+QuHJW\n9cYe\r\n=Jgjt\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDOVUUpNKMNiy4JNKOGU5orGjw9If1GoDuXiwZg/QZAAAIgY/QwsZEpeZkRPXHI+3pXzP6P7+lFq97B90JlofLySt4="}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_2.11.4_1612429877526_0.6428327997824559"},"_hasShrinkwrap":false},"3.0.0-alpha.1":{"name":"micromark","version":"3.0.0-alpha.1","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git#main"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"type":"module","main":"index.js","types":"dev/index.d.ts","exports":{".":{"development":"./dev/index.js","default":"./index.js"},"./stream":{"development":"./dev/stream.js","default":"./stream.js"},"./stream.js":{"development":"./dev/stream.js","default":"./stream.js"},"./lib/compile":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/compile.js":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/parse":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/parse.js":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/postprocess":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/postprocess.js":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/preprocess":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"},"./lib/preprocess.js":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"}},"dependencies":{"@types/debug":"^4.0.0","debug":"^4.0.0","micromark-core-commonmark":"1.0.0-alpha.1","micromark-factory-space":"1.0.0-alpha.1","micromark-util-character":"1.0.0-alpha.1","micromark-util-chunked":"1.0.0-alpha.1","micromark-util-combine-extensions":"1.0.0-alpha.1","micromark-util-encode":"1.0.0-alpha.1","micromark-util-normalize-identifier":"1.0.0-alpha.1","micromark-util-resolve-all":"1.0.0-alpha.1","micromark-util-sanitize-uri":"1.0.0-alpha.1","micromark-util-subtokenize":"1.0.0-alpha.1","micromark-util-symbol":"1.0.0-alpha.1","micromark-util-types":"1.0.0-alpha.1","parse-entities":"^3.0.0"},"scripts":{"build":"rimraf \"*.d.ts\" \"{dev/,lib/}**/*.d.ts\" && tsc && micromark-build && type-coverage"},"xo":false,"typeCoverage":{"atLeast":100,"detail":true,"strict":true,"ignoreCatch":true},"readme":"<h1 align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/micromark/micromark/2e476c9/logo.svg?sanitize=true\" alt=\"micromark\" />\n</h1>\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\n> ⚠️ Note: this is the readme for the upcoming release of micromark 3.0.0.\\\n> [See here](https://github.com/micromark/micromark/tree/14d86e0) for the\n> current release.\n\nThe smallest CommonMark compliant markdown parser with positional info and\nconcrete tokens.\n\n## Feature highlights\n\n*   [x] **[compliant][commonmark]** (100% to CommonMark)\n*   [x] **[extensions][]** ([GFM][], [directives][], [footnotes][],\n    [frontmatter][], [math][], [MDX.js][mdxjs])\n*   [x] **[safe][security]** (by default)\n*   [x] **[small][size]** (smallest CM parser that exists)\n*   [x] **[robust][test]** (1800+ tests, 100% coverage, fuzz testing)\n\n## When to use this\n\n*   If you *just* want to turn markdown into HTML (w/ maybe a few extensions)\n*   If you want to do *really complex things* with markdown\n\nSee [§ Comparison][comparison] for more info\n\n## Intro\n\nmicromark is a long awaited markdown parser.\nIt uses a [state machine][cmsm] to parse the entirety of markdown into concrete\ntokens.\nIt’s the smallest 100% [CommonMark][] compliant markdown parser in JavaScript.\nIt was made to replace the internals of [`remark-parse`][remark-parse], the most\n[popular][] markdown parser.\nIts API compiles to HTML, but its parts are made to be used separately, so as to\ngenerate syntax trees ([`mdast-util-from-markdown`][from-markdown]) or compile\nto other output formats.\n\n*   to learn markdown, see this [cheatsheet and tutorial][cheat]\n*   for more about us, see [`unifiedjs.com`][site]\n*   for updates, see [Twitter][]\n*   for questions, see [Discussions][chat]\n*   to help, see [contribute][] or [sponsor][] below\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`micromark(value[, encoding][, options])`](#micromarkvalue-encoding-options)\n    *   [`stream(options?)`](#streamoptions)\n*   [Extensions](#extensions)\n    *   [List of extensions](#list-of-extensions)\n    *   [`SyntaxExtension`](#syntaxextension)\n    *   [`HtmlExtension`](#htmlextension)\n    *   [Extending markdown](#extending-markdown)\n    *   [Creating a micromark extension](#creating-a-micromark-extension)\n*   [Architecture](#architecture)\n    *   [Overview](#overview)\n    *   [Preprocess](#preprocess)\n    *   [Parse](#parse)\n    *   [Postprocess](#postprocess)\n    *   [Compile](#compile)\n*   [Examples](#examples)\n    *   [GitHub flavored markdown (GFM)](#github-flavored-markdown-gfm)\n    *   [Math](#math)\n    *   [Footnotes](#footnotes)\n    *   [Syntax tree](#syntax-tree)\n*   [Markdown](#markdown)\n    *   [CommonMark](#commonmark)\n    *   [Grammar](#grammar)\n*   [Project](#project)\n    *   [Comparison](#comparison)\n    *   [Test](#test)\n    *   [Size & debug](#size--debug)\n    *   [Version](#version)\n    *   [Security](#security)\n    *   [Contribute](#contribute)\n    *   [Sponsor](#sponsor)\n    *   [Origin story](#origin-story)\n    *   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark\n```\n\n## Use\n\nTypical use (buffering):\n\n```js\nimport {micromark} from 'micromark'\n\nconsole.log(micromark('## Hello, *world*!'))\n```\n\nYields:\n\n```html\n<h2>Hello, <em>world</em>!</h2>\n```\n\nYou can pass extensions (in this case [`micromark-extension-gfm`][gfm]):\n\n```js\nimport {micromark} from 'micromark'\nimport {gfm, gfmHtml} from 'micromark-extension-gfm'\n\nconst value = '* [x] contact@example.com ~~strikethrough~~'\n\nconst result = micromark(value, {\n  extensions: [gfm()],\n  htmlExtensions: [gfmHtml]\n})\n\nconsole.log(result)\n```\n\nYields:\n\n```html\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"mailto:contact@example.com\">contact@example.com</a> <del>strikethrough</del></li>\n</ul>\n```\n\nStreaming interface:\n\n```js\nimport fs from 'fs'\nimport {stream} from 'micromark/stream'\n\nfs.createReadStream('example.md')\n  .on('error', handleError)\n  .pipe(stream())\n  .pipe(process.stdout)\n\nfunction handleError(error) {\n  // Handle your error here!\n  throw error\n}\n```\n\n## API\n\n`micromark` core has two entries in its export map: `micromark` and\n`micromark/stream`.\n\n`micromark` exports the following identifier: `micromark`.\n`micromark/stream` exports the following identifier: `stream`.\nThere are no default exports.\n\nThe export map supports the endorsed\n[`development` condition](https://nodejs.org/api/packages.html#packages_resolving_user_conditions).\nRun `node --conditions development module.js` to get instrumented dev code.\nWithout this condition, production code is loaded.\nSee [§ Size & debug][size-debug] for more info.\n\n### `micromark(value[, encoding][, options])`\n\nCompile markdown to HTML.\n\n##### Parameters\n\n###### `value`\n\nMarkdown to parse (`string` or `Buffer`).\n\n###### `encoding`\n\n[Character encoding][encoding] to understand `value` as when it’s a\n[`Buffer`][buffer] (`string`, default: `'utf8'`).\n\n###### `options.defaultLineEnding`\n\nValue to use for line endings not in `value` (`string`, default: first line\nending or `'\\n'`).\n\nGenerally, micromark copies line endings (`'\\r'`, `'\\n'`, `'\\r\\n'`) in the\nmarkdown document over to the compiled HTML.\nIn some cases, such as `> a`, CommonMark requires that extra line endings are\nadded: `<blockquote>\\n<p>a</p>\\n</blockquote>`.\n\n###### `options.allowDangerousHtml`\n\nWhether to allow embedded HTML (`boolean`, default: `false`).\nSee [§ Security][security].\n\n###### `options.allowDangerousProtocol`\n\nWhether to allow potentially dangerous protocols in links and images (`boolean`,\ndefault: `false`).\nURLs relative to the current protocol are always allowed (such as, `image.jpg`).\nFor links, the allowed protocols are `http`, `https`, `irc`, `ircs`, `mailto`,\nand `xmpp`.\nFor images, the allowed protocols are `http` and `https`.\nSee [§ Security][security].\n\n###### `options.extensions`\n\nArray of syntax extensions ([`Array.<SyntaxExtension>`][syntax-extension],\ndefault: `[]`).\nSee [§ Extensions][extensions].\n\n###### `options.htmlExtensions`\n\nArray of HTML extensions ([`Array.<HtmlExtension>`][html-extension], default:\n`[]`).\nSee [§ Extensions][extensions].\n\n##### Returns\n\n`string` — Compiled HTML.\n\n### `stream(options?)`\n\nStreaming interface of micromark.\nCompiles markdown to HTML.\n`options` are the same as the buffering API above.\nNote that some of the work to parse markdown can be done streaming, but in the\nend buffering is required.\n\nmicromark does not handle errors for you, so you must handle errors on whatever\nstreams you pipe into it.\nAs markdown does not know errors, `micromark` itself does not emit errors.\n\n## Extensions\n\nmicromark supports extensions.\nThere are two types of extensions for micromark:\n[`SyntaxExtension`][syntax-extension],\nwhich change how markdown is parsed, and [`HtmlExtension`][html-extension],\nwhich change how it compiles.\nThey can be passed in [`options.extensions`][option-extensions] or\n[`options.htmlExtensions`][option-htmlextensions], respectively.\n\nAs a user of extensions, refer to each extension’s readme for more on how to use\nthem.\nAs a (potential) author of extensions, refer to\n[§ Extending markdown][extending-markdown] and\n[§ Creating a micromark extension][create-extension].\n\n### List of extensions\n\n*   [`micromark/micromark-extension-directive`][directives]\n    — support directives (generic extensions)\n*   [`micromark/micromark-extension-footnote`][footnotes]\n    — support footnotes\n*   [`micromark/micromark-extension-frontmatter`][frontmatter]\n    — support frontmatter (YAML, TOML, etc)\n*   [`micromark/micromark-extension-gfm`][gfm]\n    — support GFM (GitHub Flavored Markdown)\n*   [`micromark/micromark-extension-gfm-autolink-literal`](https://github.com/micromark/micromark-extension-gfm-autolink-literal)\n    — support GFM autolink literals\n*   [`micromark/micromark-extension-gfm-strikethrough`](https://github.com/micromark/micromark-extension-gfm-strikethrough)\n    — support GFM strikethrough\n*   [`micromark/micromark-extension-gfm-table`](https://github.com/micromark/micromark-extension-gfm-table)\n    — support GFM tables\n*   [`micromark/micromark-extension-gfm-tagfilter`](https://github.com/micromark/micromark-extension-gfm-tagfilter)\n    — support GFM tagfilter\n*   [`micromark/micromark-extension-gfm-task-list-item`](https://github.com/micromark/micromark-extension-gfm-task-list-item)\n    — support GFM tasklists\n*   [`micromark/micromark-extension-math`][math]\n    — support math\n*   [`micromark/micromark-extension-mdx`](https://github.com/micromark/micromark-extension-mdx)\n    — support MDX\n*   [`micromark/micromark-extension-mdxjs`][mdxjs]\n    — support MDX.js\n*   [`micromark/micromark-extension-mdx-expression`](https://github.com/micromark/micromark-extension-mdx-expression)\n    — support MDX (or MDX.js) expressions\n*   [`micromark/micromark-extension-mdx-jsx`](https://github.com/micromark/micromark-extension-mdx-jsx)\n    — support MDX (or MDX.js) JSX\n*   [`micromark/micromark-extension-mdx-md`](https://github.com/micromark/micromark-extension-mdx-md)\n    — support misc MDX changes\n*   [`micromark/micromark-extension-mdxjs-esm`](https://github.com/micromark/micromark-extension-mdxjs-esm)\n    — support MDX.js import/exports\n\n### `SyntaxExtension`\n\nA syntax extension is an object whose fields are typically the names of hooks,\nreferring to where constructs “hook” into.\nThe fields at such objects are character codes, mapping to constructs as values.\n\nThe built in [constructs][] are an example.\nSee it and [existing extensions][extensions] for inspiration.\n\n### `HtmlExtension`\n\nAn HTML extension is an object whose fields are typically `enter` or `exit`\n(reflecting whether a token is entered or exited).\nThe values at such objects are names of tokens mapping to handlers.\n\nSee [existing extensions][extensions] for inspiration.\n\n### Extending markdown\n\nmicromark lets you change markdown syntax, yes, but there are alternatives.\nThe alternatives are often better.\n\nOver the years, many micromark and remark users have asked about their unique\ngoals for markdown.\nSome exemplary goals are:\n\n1.  I want to add `rel=\"nofollow\"` to external links\n2.  I want to add links from headings to themselves\n3.  I want line breaks in paragraphs to become hard breaks\n4.  I want to support embedded music sheets\n5.  I want authors to add arbitrary attributes\n6.  I want authors to mark certain blocks with meaning, such as tip, warning,\n    etc\n7.  I want to combine markdown with JS(X)\n8.  I want to support our legacy flavor of markdown-like syntax\n\nThese can be solved in different ways and which solution is best is both\nsubjective and dependant on unique needs.\nOften, there is already a solution in the form of an existing remark or rehype\nplugin.\nRespectively, their solutions are:\n\n1.  [`remark-external-links`](https://github.com/remarkjs/remark-external-links)\n2.  [`rehype-autolink-headings`](https://github.com/rehypejs/rehype-autolink-headings)\n3.  [`remark-breaks`](https://github.com/remarkjs/remark-breaks)\n4.  custom plugin similar to\n    [`rehype-katex`](https://github.com/remarkjs/remark-math/tree/main/packages/rehype-katex)\n    but integrating [`abcjs`](https://www.abcjs.net)\n5.  either [`remark-directive`](https://github.com/remarkjs/remark-directive)\n    and a custom plugin or with\n    [`rehype-attr`](https://github.com/jaywcjlove/rehype-attr)\n6.  [`remark-directive`](https://github.com/remarkjs/remark-directive)\n    combined with a custom plugin\n7.  combining the existing micromark MDX extensions however you please, such as\n    done by [`mdx-js/mdx`](https://github.com/mdx-js/mdx) or\n    [`xdm`](https://github.com/wooorm/xdm)\n8.  Writing a micromark extension\n\nLooking at these from a higher level, they can be categorized:\n\n*   **Changing the output by transforming syntax trees**\n    (1 and 2)\n\n    This category is nice as the format remains plain markdown that authors are\n    already familiar with and which will work with existing tools and platforms.\n\n    Implementations will deal with the syntax tree\n    ([`mdast`][mdast]) and the ecosystems\n    **[remark][]** and **[rehype][]**.\n    There are many existing\n    [utilities for working with that tree][utilities].\n    Many [remark plugins][] and [rehype plugins][] also exist.\n*   **Using and abusing markdown to add new meaning**\n    (3, 4, potentially 5)\n\n    This category is similar to *Changing the output by transforming syntax\n    trees*, but adds a new meaning to certain things which already have\n    semantics in markdown.\n\n    Some examples in pseudo code:\n\n    ````markdown\n    *   **A list item with the first paragraph bold**\n\n        And then more content, is turned into `<dl>` / `<dt>` / `<dd>` elements\n\n    Or, the title attributes on links or images is [overloaded](/url 'rel:nofollow')\n    with a new meaning.\n\n    ```csv\n    fenced,code,can,include,data\n    which,is,turned,into,a,graph\n    ```\n\n    ```js data can=\"be\" passed=true\n    // after the code language name\n    ```\n\n    HTML, especially comments, could be used as **markers**<!--id=\"markers\"-->\n    ````\n*   **Arbitrary extension mechanism**\n    (potentially 5; 6)\n\n    This category is nice when content should contain embedded “components”.\n    Often this means it’s required for authors to have some programming\n    experience.\n    There are three good ways to solve arbitrary extensions.\n\n    **HTML**: Markdown already has an arbitrary extension syntax.\n    It works in most places and authors are already familiar with the syntax,\n    but it’s reasonably hard to implement securely.\n    Certain platforms will remove HTML completely, others sanitize it to varying\n    degrees.\n    HTML also supports custom elements.\n    These could be used and enhanced by client side JavaScript or enhanced when\n    transforming the syntax tree.\n\n    **Generic directives**: although\n    [a proposal][directive-proposal]\n    and not supported on most platforms, directives do work with many tools\n    already.\n    They’re not the easiest to author compared to, say, a heading, but sometimes\n    that’s okay.\n    They do have potential: they nicely solve the need for an infinite number of\n    potential extensions to markdown in a single markdown-esque way.\n\n    **MDX** also adds support for components by swapping HTML out for JS(X).\n    JSX is an extension to JavaScript, so MDX is something along the lines of\n    literate programming.\n    This does require knowledge of React (or Vue) and JavaScript, excluding some\n    authors.\n*   **Extending markdown syntax**\n    (7 and 8)\n\n    Extend the syntax of markdown means:\n\n    *   Authors won’t be familiar with the syntax\n    *   Content won’t work in other places (such as on GitHub)\n    *   Defeating the purpose of markdown: being simple to author and looking\n        like what it means\n\n    …and it’s hard to do as it requires some in-depth knowledge of JavaScript\n    and parsing.\n    But it’s possible and in certain cases very powerful.\n\n### Creating a micromark extension\n\nThis section shows how to create an extension for micromark that parses\n“variables” (a way to render some data) and one to turn a default construct off.\n\n> Stuck?\n> See [`support.md`][support].\n\n#### Prerequisites\n\n*   You should possess an intermediate to high understanding of JavaScript:\n    it’s going to get a bit complex\n*   Read the readme of [unified][] (until you hit the API section) to better\n    understand where micromark fits\n*   Read the [§ Architecture][architecture] section to understand how micromark\n    works\n*   Read the [§ Extending markdown][extending-markdown] section to understand\n    whether it’s a good idea to extend the syntax of markdown\n\n#### Extension basics\n\nmicromark supports two types of extensions.\nSyntax extensions change how markdown is parsed.\nHTML extensions change how it compiles.\n\nHTML extensions are not always needed, as micromark is often used through\n[`mdast-util-from-markdown`][from-markdown] to parse to a markdown syntax tree\nSo instead of an HTML extension a `from-markdown` utility is needed.\nThen, a [`mdast-util-to-markdown`][to-markdown] utility, which is responsible\nfor serializing syntax trees to markdown, is also needed.\n\nWhen developing something for internal use only, you can pick and choose which\nparts you need.\nWhen open sourcing your extensions, it should probably contain four parts:\nsyntax extension, HTML extension, `from-markdown` utility, and a `to-markdown`\nutility.\n\nOn to our first case!\n\n#### Case: variables\n\nLet’s first outline what we want to make: render some data, similar to how\n[Liquid](https://github.com/Shopify/liquid/wiki/Liquid-for-Designers) and the\nlike work, in our markdown.\nIt could look like this:\n\n```markdown\nHello, {planet}!\n```\n\nTurned into:\n\n```html\n<p>Hello, Venus!</p>\n```\n\nAn opening curly brace, followed by one or more characters, and then a closing\nbrace.\nWe’ll then look up `planet` in some object and replace the variable with its\ncorresponding value, to get something like `Venus` out.\n\nIt looks simple enough, but with markdown there are often a couple more things\nto think about.\nFor this case, I can see the following:\n\n*   Is there a “block” version too?\n*   Are spaces allowed?\n    Line endings?\n    Should initial and final white space be ignored?\n*   Balanced nested braces?\n    Superfluous ones such as `{{planet}}` or meaningful ones such as\n    `{a {pla} net}`?\n*   Character escapes (`{pla\\}net}`) and character references\n    (`{pla&#x7d;net}`)?\n\nTo keep things as simple as possible, let’s not support a block syntax, see\nspaces as special, support line endings, or support nested braces.\nBut to learn interesting things, we *will* support character escapes and\n\\-references.\n\nNote that this particular case is already solved quite nicely by\n[`micromark-extension-mdx-expression`][mdx-expression].\nIt’s a bit more powerful and does more things, but it can be used to solve this\ncase and otherwise serve as inspiration.\n\n##### Setup\n\nCreate a new folder, enter it, and set up a new package:\n\n```sh\nmkdir example\ncd example\nnpm init -y\n```\n\nIn this example we’ll use ESM, so add `type: 'module'` to `package.json`:\n\n```diff\n@@ -2,6 +2,7 @@\n   \"name\": \"example\",\n   \"version\": \"1.0.0\",\n   \"description\": \"\",\n+  \"type\": \"module\",\n   \"main\": \"index.js\",\n   \"scripts\": {\n     \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n```\n\nAdd a markdown file, `example.md`, with the following text:\n\n```markdown\nHello, {planet}!\n\n{pla\\}net} and {pla&#x7d;net}.\n```\n\nTo check if our extension works, add an `example.js` module, with the following\ncode:\n\n```js\nimport {promises as fs} from 'node:fs'\nimport {micromark} from 'micromark'\nimport {variables} from './index.js'\n\nmain()\n\nasync function main() {\n  const buf = await fs.readFile('example.md')\n  const out = micromark(buf, {extensions: [variables]})\n  console.log(out)\n}\n```\n\nWhile working on the extension, run `node example` to see whether things work.\nFeel free to add more examples of the variables syntax in `example.md` if\nneeded.\n\nOur extension doesn’t work yet, for one because `micromark` is not installed:\n\n```sh\nnpm install micromark --save-dev\n```\n\n…and we need to write our extension.\nLet’s do that in `index.js`:\n\n```js\nexport const variables = {}\n```\n\nAlthough our extension doesn’t do anything, running `node example` now somewhat\nworks!\n\n##### Syntax extension\n\nMuch in micromark is based on character codes (see [§ Preprocess][preprocess]).\nFor this extension, the relevant codes are:\n\n*   `-5`\n    — M-0005 CARRIAGE RETURN (CR)\n*   `-4`\n    — M-0004 LINE FEED (LF)\n*   `-3`\n    — M-0003 CARRIAGE RETURN LINE FEED (CRLF)\n*   `null`\n    — EOF (end of the stream)\n*   `92`\n    — U+005C BACKSLASH (`\\`)\n*   `123`\n    — U+007B LEFT CURLY BRACE (`{`)\n*   `125`\n    — U+007D RIGHT CURLY BRACE (`}`)\n\nAlso relevant are the content types (see [§ Content types][content-types]).\nThis extension is a *text* construct, as it’s parsed alongsides links and such.\nThe content inside it (between the braces) is *string*, to support character\nescapes and -references.\n\nLet’s write our extension.\nAdd the following code to `index.js`:\n\n```js\nconst variableConstruct = {name: 'variable', tokenize: variableTokenize}\n\nexport const variables = {text: {123: variableConstruct}}\n\nfunction variableTokenize(effects, ok, nok) {\n  return start\n\n  function start(code) {\n    console.log('start:', effects, code);\n    return nok(code)\n  }\n}\n```\n\nThe above code exports an extension with the identifier `variables`.\nThe extension defines a *text* construct for the character code `123`.\nThe construct has a `name`, so that it can be turned off (optional, see next\ncase), and it has a `tokenize` function that sets up a state machine, which\nreceives `effects` and the `ok` and `nok` states.\n`ok` can be used when successful, `nok` when not, and so constructs are a bit\nsimilar to how promises can *resolve* or *reject*.\n`tokenize` returns the initial state, `start`, which itself receives the current\ncharacter code, prints some debugging information, and then returns a call\nto `nok`.\n\nEnsure that things work by running `node example` and see what it prints.\n\nNow we need to define our states and figure out how variables work.\nSome people prefer sketching a diagram of the flow.\nI often prefer writing it down in pseudo-code prose.\nI’ve also found that test driven development works well, where I write unit\ntests for how it should work, then write the state machine, and finally use a\ncode coverage tool to ensure I’ve thought of everything.\n\nIn prose, what we have to code looks like this:\n\n*   **start**:\n    Receive `123` as `code`, enter a token for the whole (let’s call it\n    `variable`), enter a token for the marker (`variableMarker`), consume\n    `code`, exit the marker token, enter a token for the contents\n    (`variableString`), switch to *begin*\n*   **begin**:\n    If `code` is `125`, reconsume in *nok*.\n    Else, reconsume in *inside*\n*   **inside**:\n    If `code` is `-5`, `-4`, `-3`, or `null`, reconsume in `nok`.\n    Else, if `code` is `125`, exit the string token, enter a `variableMarker`,\n    consume `code`, exit the marker token, exit the variable token, and switch\n    to *ok*.\n    Else, consume, and remain in *inside*.\n\nThat should be it!\nReplace `variableTokenize` with the following to include the needed states:\n\n```js\nfunction variableTokenize(effects, ok, nok) {\n  return start\n\n  function start(code) {\n    effects.enter('variable')\n    effects.enter('variableMarker')\n    effects.consume(code)\n    effects.exit('variableMarker')\n    effects.enter('variableString')\n    return begin\n  }\n\n  function begin(code) {\n    return code === 125 ? nok(code) : inside(code)\n  }\n\n  function inside(code) {\n    if (code === -5 || code === -4 || code === -3 || code === null) {\n      return nok(code)\n    }\n\n    if (code === 125) {\n      effects.exit('variableString')\n      effects.enter('variableMarker')\n      effects.consume(code)\n      effects.exit('variableMarker')\n      effects.exit('variable')\n      return ok\n    }\n\n    effects.consume(code)\n    return inside\n  }\n}\n```\n\nRun `node example` again and see what it prints!\nThe HTML compiler ignores things it doesn’t know, so variables are now removed.\n\nWe have our first syntax extension, and it sort of works, but we don’t handle\ncharacter escapes and -references yet.\nWe need to do two things to make that work:\na) skip over `\\\\` and `\\}` in our algorithm,\nb) tell micromark to parse them.\n\nChange the code in `index.js` to support escapes like so:\n\n```diff\n@@ -23,6 +23,11 @@ function variableTokenize(effects, ok, nok) {\n       return nok(code)\n     }\n\n+    if (code === 92) {\n+      effects.consume(code)\n+      return insideEscape\n+    }\n+\n     if (code === 125) {\n       effects.exit('variableString')\n       effects.enter('variableMarker')\n@@ -35,4 +40,13 @@ function variableTokenize(effects, ok, nok) {\n     effects.consume(code)\n     return inside\n   }\n+\n+  function insideEscape(code) {\n+    if (code === 92 || code === 125) {\n+      effects.consume(code)\n+      return inside\n+    }\n+\n+    return inside(code)\n+  }\n }\n```\n\nFinally add support for character references and character escapes between\nbraces by adding a special token that defines a content type:\n\n```diff\n@@ -11,6 +11,7 @@ function variableTokenize(effects, ok, nok) {\n     effects.consume(code)\n     effects.exit('variableMarker')\n     effects.enter('variableString')\n+    effects.enter('chunkString', {contentType: 'string'})\n     return begin\n   }\n\n@@ -29,6 +30,7 @@ function variableTokenize(effects, ok, nok) {\n     }\n\n     if (code === 125) {\n+      effects.exit('chunkString')\n       effects.exit('variableString')\n       effects.enter('variableMarker')\n       effects.consume(code)\n```\n\nTokens with a `contentType` will be replaced by *postprocess* (see\n[§ Postprocess][postprocess]) by the tokens belonging to that content type.\n\n##### HTML extension\n\nUp next is an HTML extension to replace variables with data.\nChange `example.js` to use one like so:\n\n```diff\n@@ -1,11 +1,12 @@\n import {promises as fs} from 'node:fs'\n import {micromark} from 'micromark'\n-import {variables} from './index.js'\n+import {variables, variablesHtml} from './index.js'\n\n main()\n\n async function main() {\n   const buf = await fs.readFile('example.md')\n-  const out = micromark(buf, {extensions: [variables]})\n+  const html = variablesHtml({planet: '1', 'pla}net': '2'})\n+  const out = micromark(buf, {extensions: [variables], htmlExtensions: [html]})\n   console.log(out)\n }\n```\n\nAnd add the HTML extension, `variablesHtml`, to `index.js` like so:\n\n```diff\n@@ -52,3 +52,19 @@ function variableTokenize(effects, ok, nok) {\n     return inside(code)\n   }\n }\n+\n+export function variablesHtml(data = {}) {\n+  return {\n+    enter: {variableString: enterVariableString},\n+    exit: {variableString: exitVariableString},\n+  }\n+\n+  function enterVariableString() {\n+    this.buffer()\n+  }\n+\n+  function exitVariableString() {\n+    var id = this.resume()\n+    if (id in data) {\n+      this.raw(this.encode(data[id]))\n+    }\n+  }\n+}\n```\n\n`variablesHtml` is a function that receives an object mapping “variables” to\nstrings and returns an HTML extension.\nThe extension hooks two functions to `variableString`, one when it starts,\nthe other when it ends.\nWe don’t need to do anything to handle the other tokens as they’re already\nignored by default.\n`enterVariableString` calls `buffer`, which is a function that “stashes” what\nwould otherwise be emitted.\n`exitVariableString` calls `resume`, which is the inverse of `buffer` and\nreturns the stashed value.\nIf the variable is defined, we ensure it’s made safe (with `this.encode`) and\nfinally output that (with `this.raw`).\n\n##### Further exercises\n\nIt works!\nWe’re done!\nOf course, it can be better, such as with the following potential features:\n\n*   Add support for empty variables\n*   Add support for spaces between markers and string\n*   Add support for line endings in variables\n*   Add support for nested braces\n*   Add support for blocks\n*   Add warnings on undefined variables\n*   Use `micromark-build`, and use `assert`, `debug`, and\n    `micromark-util-symbol` (see [§ Size & debug][size-debug])\n*   Add [`mdast-util-from-markdown`][from-markdown] and\n    [`mdast-util-to-markdown`][to-markdown] utilities to parse and serialize the\n    AST\n\n#### Case: turn off constructs\n\nSometimes it’s needed to turn a default construct off.\nThat’s possible through a syntax extension.\nNote that not everything can be turned off (such as paragraphs) and even if it’s\npossible to turn something off, it could break micromark (such as character\nescapes).\n\nTo disable constructs, refer to them by name in an array at the `disable.null`\nfield of an extension:\n\n```js\nimport {micromark} from 'micromark'\n\nconst extension = {disable: {null: ['codeIndented']}}\n\nconsole.log(micromark('\\ta', {extensions: [extension]}))\n```\n\nYields:\n\n```html\n<p>a</p>\n```\n\n## Architecture\n\nmicromark is maintained as a monorepo.\nMany of its internals, which are used in `micromark` (core) but also useful for\ndevelopers of extensions or integrations, are available as separate modules.\nEach module maintained here is available in [`packages/`][packages].\n\n### Overview\n\nThe naming scheme in [`packages/`][packages] is as follows:\n\n*   `micromark-build`\n    — Small CLI to build dev code into production code\n*   `micromark-core-commonmark`\n    — CommonMark constructs used in micromark\n*   `micromark-factory-*`\n    — Reusable subroutines used to parse parts of constructs\n*   `micromark-util-*`\n    — Reusable helpers often needed when parsing markdown\n*   `micromark`\n    — Core module\n\nmicromark has two interfaces: buffering (maintained in\n[`micromark/dev/index.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/index.js))\nand streaming (maintained in\n[`micromark/dev/stream.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/stream.js)).\nThe first takes all input at once whereas the last uses a Node.js stream to take\ninput separately.\nThey thinly wrap how data flows through micromark:\n\n```txt\n                                            micromark\n+-----------------------------------------------------------------------------------------------+\n|            +------------+         +-------+         +-------------+         +---------+       |\n| -markdown->+ preprocess +-chunks->+ parse +-events->+ postprocess +-events->+ compile +-html- |\n|            +------------+         +-------+         +-------------+         +---------+       |\n+-----------------------------------------------------------------------------------------------+\n```\n\n### Preprocess\n\nThe **preprocessor**\n([`micromark/dev/lib/preprocess.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/lib/preprocess.js))\ntakes markdown and turns it into chunks.\n\nA **chunk** is either a character code or a slice of a buffer in the form of a\nstring.\nChunks are used because strings are more efficient storage than character codes,\nbut limited in what they can represent.\nFor example, the input `ab\\ncd` is represented as `['ab', -4, 'cd']` in chunks.\n\nA character **code** is often the same as what `String#charCodeAt()` yields but\nmicromark adds meaning to certain other values.\n\nIn micromark, the actual character U+0009 CHARACTER TABULATION (HT) is replaced\nby one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL SPACE (VS)\ncharacters, depending on the column at which the tab occurred.\nFor example, the input `\\ta` is represented as `[-2, -1, -1, -1, 97]` and `a\\tb`\nas `[97, -2, -1, -1, 98]` in character codes.\n\nThe characters U+000A LINE FEED (LF) and U+000D CARRIAGE RETURN (CR) are\nreplaced by virtual characters depending on whether they occur together: M-0003\nCARRIAGE RETURN LINE FEED (CRLF), M-0004 LINE FEED (LF), and M-0005 CARRIAGE\nRETURN (CR).\nFor example, the input `a\\r\\nb\\nc\\rd` is represented as\n`[97, -5, 98, -4, 99, -3, 100]` in character codes.\n\nThe `0` (U+0000 NUL) character code is replaced by U+FFFD REPLACEMENT CHARACTER\n(`�`).\n\nThe `null` code represents the end of the input stream (called *eof* for end of\nfile).\n\n### Parse\n\nThe **parser**\n([`micromark/dev/lib/parse.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/lib/parse.js))\ntakes chunks and turns them into events.\n\nAn **event** is the start or end of a token amongst other events.\nTokens can “contain” other tokens, even though they are stored in a flat list,\nby entering before and exiting after them.\n\nA **token** is a span of one or more codes.\nTokens are most of what micromark produces: the built in HTML compiler or other\ntools can turn them into different things.\nTokens are essentially names attached to a slice, such as `lineEndingBlank` for\ncertain line endings, or `codeFenced` for a whole fenced code.\n\nSometimes, more info is attached to tokens, such as `_open` and `_close` by\n`attention` (strong, emphasis) to signal whether the sequence can open or close\nan attention run.\nThese fields have to do with how the parser works, which is complex and not\nalways pretty.\n\nCertain fields (`previous`, `next`, and `contentType`) are used in many cases:\nlinked tokens for subcontent.\nLinked tokens are used because outer constructs are parsed first.\nTake for example:\n\n```markdown\n- *a\n  b*.\n```\n\n1.  The list marker and the space after it is parsed first\n2.  The rest of the line is a `chunkFlow` token\n3.  The two spaces on the second line are a `linePrefix` of the list\n4.  The rest of the line is another `chunkFlow` token\n\nThe two `chunkFlow` tokens are linked together and the chunks they span are\npassed through the flow tokenizer.\nThere the chunks are seen as `chunkContent` and passed through the content\ntokenizer.\nThere the chunks are seen as a paragraph and seen as `chunkText` and passed\nthrough the text tokenizer.\nFinally, the attention (emphasis) and data (“raw” characters) is parsed there,\nand we’re done!\n\n#### Content types\n\nThe parser starts out with a document tokenizer.\n*Document* is the top-most content type, which includes containers such as block\nquotes and lists.\nContainers in markdown come from the margin and include more constructs\non the lines that define them.\n\n*Flow* represents the sections (block constructs such as ATX and setext\nheadings, HTML, indented and fenced code, thematic breaks), which like\n*document* are also parsed per line.\nAn example is HTML, which has a certain starting condition (such as `<script>`\non its own line), then continues for a while, until an end condition is found\n(such as `</style>`).\nIf that line with an end condition is never found, that flow goes until the end.\n\n*Content* is zero or more definitions, and then zero or one paragraph.\nIt’s a weird one, and needed to make certain edge cases around definitions spec\ncompliant.\nDefinitions are unlike other things in markdown, in that they behave like *text*\nin that they can contain arbitrary line endings, but *have* to end at a line\nending.\nIf they end in something else, the whole definition instead is seen as a\nparagraph.\n\nThe content in markdown first needs to be parsed up to this level to figure out\nwhich things are defined, for the whole document, before continuing on with\n*text*, as whether a link or image reference forms or not depends on whether\nit’s defined.\nThis unfortunately prevents a true streaming markdown parser.\n\n*Text* contains phrasing content (rich inline text: autolinks, character escapes\nand -references, code, hard breaks, HTML, images, links, emphasis, strong).\n\n*String* is a limited *text*-like content type which only allows character\nreferences and character escapes.\nIt exists in things such as identifiers (media references, definitions),\ntitles, or URLs and such.\n\n#### Constructs\n\nConstructs are the things that make up markdown.\nSome examples are lists, thematic breaks, or character references.\n\nNote that, as a general rule of thumb, markdown is *really weird*.\nIt’s essentially made up of edge cases rather than logical rules.\nWhen browsing the built in constructs, or venturing to build your own, you’ll\nfind confusing new things and run into complex custom hooks.\n\nOne more reasonable construct is the thematic break\n([see code](https://github.com/micromark/micromark/blob/main/packages/micromark-core-commonmark/dev/lib/thematic-break.js)).\nIt’s an object that defines a `name` and a `tokenize` function.\nMost of what constructs do is defined in their required `tokenize` function,\nwhich sets up a state machine to handle character codes streaming in.\n\n### Postprocess\n\nThe **postprocessor**\n([`micromark/dev/lib/postprocess.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/lib/postprocess.js))\nis a small step that takes events, ensures all their\nnested content is parsed, and returns the modified events.\n\n### Compile\n\nThe **compiler**\n([`micromark/dev/lib/compile.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/lib/compile.js))\ntakes events and turns them into HTML.\nWhile micromark was created mostly to advance markdown parsing irrespective of\ncompiling to HTML, the common case of doing so is built in.\nA built in HTML compiler is useful because it allows us to check for compliancy\nto CommonMark, the de facto norm of markdown, specified in roughly 650\ninput/output cases.\nThe parsing parts can still be used separately to build ASTs, CSTs, or many\nother output formats.\n\nThe compiler has an interface that accepts lists of events instead of the whole\nat once, but because markdown can’t truly stream, events are buffered before\ncompiling and outputting the final result.\n\n## Examples\n\n### GitHub flavored markdown (GFM)\n\nTo support GFM (autolink literals, strikethrough, tables, and tasklists) use\n[`micromark-extension-gfm`][gfm].\nSay we have a file like this:\n\n```markdown\n# GFM\n\n## Autolink literals\n\nwww.example.com, https://example.com, and contact@example.com.\n\n## Strikethrough\n\n~one~ or ~~two~~ tildes.\n\n## Table\n\n| a | b  |  c |  d  |\n| - | :- | -: | :-: |\n\n## Tasklist\n\n* [ ] to do\n* [x] done\n```\n\nThen do something like this:\n\n```js\nimport fs from 'node:fs'\nimport {micromark} from 'micromark'\nimport {gfm, gfmHtml} from 'micromark-extension-gfm'\n\nconst doc = fs.readFileSync('example.md')\n\nconsole.log(micromark(doc, {extensions: [gfm()], htmlExtensions: [gfmHtml]}))\n```\n\n<details>\n<summary>Show equivalent HTML</summary>\n\n```html\n<h1>GFM</h1>\n<h2>Autolink literals</h2>\n<p><a href=\"http://www.example.com\">www.example.com</a>, <a href=\"https://example.com\">https://example.com</a>, and <a href=\"mailto:contact@example.com\">contact@example.com</a>.</p>\n<h2>Strikethrough</h2>\n<p><del>one</del> or <del>two</del> tildes.</p>\n<h2>Table</h2>\n<table>\n<thead>\n<tr>\n<th>a</th>\n<th align=\"left\">b</th>\n<th align=\"right\">c</th>\n<th align=\"center\">d</th>\n</tr>\n</thead>\n</table>\n<h2>Tasklist</h2>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> to do</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> done</li>\n</ul>\n```\n\n</details>\n\n### Math\n\nTo support math use [`micromark-extension-math`][math].\nSay we have a file like this:\n\n```markdown\nLift($L$) can be determined by Lift Coefficient ($C_L$) like the following equation.\n\n$$\nL = \\frac{1}{2} \\rho v^2 S C_L\n$$\n```\n\nThen do something like this:\n\n```js\nimport fs from 'node:fs'\nimport {micromark} from 'micromark'\nimport {math, mathHtml} from 'micromark-extension-math'\n\nconst doc = fs.readFileSync('example.md')\n\nconsole.log(micromark(doc, {extensions: [math], htmlExtensions: [mathHtml()]}))\n```\n\n<details>\n<summary>Show equivalent HTML</summary>\n\n```html\n<p>Lift(<span class=\"math math-inline\"><span class=\"katex\">…</span></span>) can be determined by Lift Coefficient (<span class=\"math math-inline\"><span class=\"katex\">…</span></span>) like the following equation.</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\">…</span></span></div>\n```\n\n</details>\n\n### Footnotes\n\nTo support footnotes use [`micromark-extension-footnote`][footnotes].\nSay we have a file like this:\n\n```markdown\nHere is a footnote call,[^1] and another.[^longnote]\n\n[^1]: Here is the footnote.\n\n[^longnote]: Here’s one with multiple blocks.\n\n    Subsequent paragraphs are indented to show that they\nbelong to the previous footnote.\n\n        { some.code }\n\n    The whole paragraph can be indented, or just the first\n    line.  In this way, multi-paragraph footnotes work like\n    multi-paragraph list items.\n\nThis paragraph won’t be part of the note, because it\nisn’t indented.\n\nHere is an inline note.^[Inlines notes are easier to write, since\nyou don’t have to pick an identifier and move down to type the\nnote.]\n```\n\nThen do something like this:\n\n```js\nimport fs from 'node:fs'\nimport {micromark} from 'micromark'\nimport {footnote, footnoteHtml} from 'micromark-extension-footnote'\n\nconst doc = fs.readFileSync('example.md')\n\nconsole.log(\n  micromark(doc, {extensions: [footnote], htmlExtensions: [footnoteHtml()]})\n)\n```\n\n<details>\n<summary>Show equivalent HTML</summary>\n\n```html\n<p>Here is a footnote call,<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\"><sup>1</sup></a> and another.<a href=\"#fn2\" class=\"footnote-ref\" id=\"fnref2\"><sup>2</sup></a></p>\n<p>This paragraph won’t be part of the note, because it\nisn’t indented.</p>\n<p>Here is an inline note.<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\"><sup>1</sup></a></p>\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn1\">\n<p>Here is the footnote.<a href=\"#fnref1\" class=\"footnote-back\">↩︎</a></p>\n</li>\n<li id=\"fn2\">\n<p>Here’s one with multiple blocks.</p>\n<p>Subsequent paragraphs are indented to show that they\nbelong to the previous footnote.</p>\n<pre><code>{ some.code }\n</code></pre>\n<p>The whole paragraph can be indented, or just the first\nline.  In this way, multi-paragraph footnotes work like\nmulti-paragraph list items.<a href=\"#fnref2\" class=\"footnote-back\">↩︎</a></p>\n</li>\n<li id=\"fn3\">\n<p>Inlines notes are easier to write, since\nyou don’t have to pick an identifier and move down to type the\nnote.<a href=\"#fnref3\" class=\"footnote-back\">↩︎</a></p>\n</li>\n</ol>\n</div>\n```\n\n</details>\n\n### Syntax tree\n\nA higher level project, [`mdast-util-from-markdown`][from-markdown], can give\nyou an AST.\n\n```js\nimport fromMarkdown from 'mdast-util-from-markdown' // This wraps micromark.\n\nconst result = fromMarkdown('## Hello, *world*!')\n\nconsole.log(result.children[0])\n```\n\nYields:\n\n```js\n{\n  type: 'heading',\n  depth: 2,\n  children: [\n    {type: 'text', value: 'Hello, ', position: [Object]},\n    {type: 'emphasis', children: [Array], position: [Object]},\n    {type: 'text', value: '!', position: [Object]}\n  ],\n  position: {\n    start: {line: 1, column: 1, offset: 0},\n    end: {line: 1, column: 19, offset: 18}\n  }\n}\n```\n\nAnother level up is [**remark**][remark], which provides a nice interface and\nhundreds of plugins.\n\n## Markdown\n\n### CommonMark\n\nThe first definition of “Markdown” gave several examples of how it worked,\nshowing input Markdown and output HTML, and came with a reference implementation\n(`Markdown.pl`).\nWhen new implementations followed, they mostly followed the first definition,\nbut deviated from the first implementation, and added extensions, thus making\nthe format a family of formats.\n\nSome years later, an attempt was made to standardize the differences between\nimplementations, by specifying how several edge cases should be handled, through\nmore input and output examples.\nThis is known as [CommonMark][commonmark-spec], and many implementations now\nwork towards some degree of CommonMark compliancy.\nStill, CommonMark describes what the output in HTML should be given some\ninput, which leaves many edge cases up for debate, and does not answer what\nshould happen for other output formats.\n\nmicromark passes all tests from CommonMark and has many more tests to match the\nCommonMark reference parsers.\nFinally, it comes with [CMSM][], which describes how to parse markup, instead\nof documenting input and output examples.\n\n### Grammar\n\nThe syntax of markdown can be described in Backus–Naur form (BNF) as:\n\n```bnf\nmarkdown = .*\n```\n\nNo, that’s [not a typo](http://trevorjim.com/a-specification-for-markdown/):\nmarkdown has no syntax errors; anything thrown at it renders *something*.\n\n## Project\n\n### Comparison\n\nThere are many other markdown parsers out there and maybe they’re better suited\nto your use case!\nHere is a short comparison of a couple in JavaScript.\nNote that this list is made by the folks who make `micromark` and `remark`, so\nthere is some bias.\n\n**Note**: these are, in fact, not really comparable: micromark (and remark)\nfocus on completely different things than other markdown parsers do.\nSure, you can generate HTML from markdown with them, but micromark (and remark)\nare created for (abstract or concrete) syntax trees—to inspect, transform, and\ngenerate content, so that you can make things like [MDX][], [Prettier][], or\n[Gatsby][].\n\n###### micromark\n\nmicromark can be used in two different ways.\nIt can either be used, optionally with existing extensions, to get HTML easily.\nOr, it can give tremendous power, such as access to all tokens with positional\ninfo, at the cost of being hard to get into.\nIt’s super small, pretty fast, and has 100% CommonMark compliance.\nIt has syntax extensions, such as supporting 100% GFM compliance (with\n`micromark-extension-gfm`), but they’re rather complex to write.\nIt’s the newest parser on the block, which means it’s fresh and well suited for\ncontemporary markdown needs, but it’s also battle-tested, and already the 3rd\nmost popular markdown parser in JavaScript.\n\nIf you’re looking for fine grained control, use micromark.\nIf you just want HTML from markdown, use micromark.\n\n###### remark\n\n[remark][] is the most popular markdown parser.\nIt’s built on top of `micromark` and boasts syntax trees.\nFor an analogy, it’s like if Babel, ESLint, and more, were one project.\nIt supports the syntax extensions that micromark has (so it’s 100% CM compliant\nand can be 100% GFM compliant), but most of the work is done in plugins that\ntransform or inspect the tree, and there’s *tons* of them.\nTransforming the tree is relatively easy: it’s a JSON object that can be\nmanipulated directly.\nremark is stable, widely used, and extremely powerful for handling complex data.\n\nYou probably should use [remark][].\n\n###### marked\n\n[marked][] is the oldest markdown parser on the block.\nIt’s been around for ages, is battle tested, small, popular, and has a bunch of\nextensions, but doesn’t match CommonMark or GFM, and is unsafe by default.\n\nIf you have markdown you trust and want to turn it into HTML without a fuss, and\ndon’t care about perfect compatibility with CommonMark or GFM, but do appreciate\na small bundle size and stability, use [marked][].\n\n###### markdown-it\n\n[markdown-it][] is a good, stable, and essentially CommonMark compliant markdown\nparser, with (optional) support for some GFM features as well.\nIt’s used a lot as a direct dependency in packages, but is rather big.\nIt shines at syntax extensions, where you want to support not just markdown, but\n*your* (company’s) version of markdown.\n\nIf you need a couple of custom syntax extensions to your otherwise\nCommonMark-compliant markdown, and want to get HTML out, use [markdown-it][].\n\n###### Others\n\nThere are lots of other markdown parsers!\nSome say they’re small, or fast, or that they’re CommonMark compliant—but\nthat’s not always true.\nThis list is not supposed to be exhaustive (but it’s the most relevant ones).\nThis list of markdown parsers is a snapshot in time of why (not) to use\n(alternatives to) `micromark`: they’re all good choices, depending on what your\ngoals are.\n\n### Test\n\nmicromark is tested with the \\~650 CommonMark tests and more than 1.2k extra\ntests confirmed with CM reference parsers.\nThese tests reach all branches in the code, which means that this project has\n100% code coverage.\nFinally, we use fuzz testing to ensure micromark is stable, reliable, and\nsecure.\n\nTo build, format, and test the codebase, use `$ npm test` after clone and\ninstall.\nThe `$ npm run test-api` and `$ npm run test-coverage` scripts check either the\nunit tests, or both them and their coverage, respectively.\n\nThe `$ npm run test-fuzz` script does fuzz testing for 15 minutes.\nThe timeout is provided by GNU coreutils **timeout(1)**, which might not be\navailable on your system.\nEither install `timeout` or remove that part temporarily from the script and\nmanually exit the program after a while.\n\n### Size & debug\n\nmicromark is really small.\nA ton of time went into making sure it minifies well, by the way code is written\nbut also through custom build scripts to pre-evaluate certain expressions.\nFurthermore, care went into making it compress well with gzip and brotli.\n\nNormally, you’ll use the pre-evaluated version of micromark.\nWhile developing, debugging, or testing your code, you *should* switch to use\ncode instrumented with assertions and debug messages:\n\n```sh\nnode --conditions development module.js\n```\n\nTo see debug messages, use a `DEBUG` env variable set to `micromark`:\n\n```sh\nDEBUG=\"*\" node --conditions development module.js\n```\n\n### Version\n\nmicromark adheres to [semver](https://semver.org) since 3.0.0.\n\n### Security\n\nThe typical security aspect discussed for markdown is [cross-site scripting\n(XSS)][xss] attacks.\nMarkdown itself is safe if it does not include embedded HTML or dangerous\nprotocols in links/images (such as `javascript:` or `data:`).\nmicromark makes any markdown safe by default, even if HTML is embedded or\ndangerous protocols are used, as it encodes or drops them.\nTurning on the `allowDangerousHtml` or `allowDangerousProtocol` options for\nuser-provided markdown opens you up to XSS attacks.\n\nAnother security aspect is DDoS attacks.\nFor example, an attacker could throw a 100mb file at micromark, in which case\nthe JavaScript engine will run out of memory and crash.\nIt is also possible to crash micromark with smaller payloads, notably when\nthousands of links, images, emphasis, or strong are opened but not closed.\nIt is wise to cap the accepted size of input (500kb can hold a big book) and to\nprocess content in a different thread or worker so that it can be stopped when\nneeded.\n\nUsing extensions might also be unsafe, refer to their documentation for more\ninformation.\n\nFor more information on markdown sanitation, see\n[`improper-markup-sanitization.md`][improper] by [**@chalker**][chalker].\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n### Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n### Sponsor\n\nSupport this effort and give back by sponsoring on [OpenCollective][]!\n\n<table>\n<tr valign=\"middle\">\n<td width=\"100%\" align=\"center\" colspan=\"10\">\n  <br>\n  <a href=\"https://www.salesforce.com\">Salesforce</a> 🏅<br><br>\n  <a href=\"https://www.salesforce.com\"><img src=\"https://images.opencollective.com/salesforce/ca8f997/logo/512.png\" width=\"256\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://www.gatsbyjs.org\">Gatsby</a> 🥇<br><br>\n  <a href=\"https://www.gatsbyjs.org\"><img src=\"https://avatars1.githubusercontent.com/u/12551863?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://vercel.com\">Vercel</a> 🥇<br><br>\n  <a href=\"https://vercel.com\"><img src=\"https://avatars1.githubusercontent.com/u/14985020?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://www.netlify.com\">Netlify</a><br><br>\n  <!--OC has a sharper image-->\n  <a href=\"https://www.netlify.com\"><img src=\"https://images.opencollective.com/netlify/4087de2/logo/256.png\" width=\"128\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://www.holloway.com\">Holloway</a><br><br>\n  <a href=\"https://www.holloway.com\"><img src=\"https://avatars1.githubusercontent.com/u/35904294?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://themeisle.com\">ThemeIsle</a><br><br>\n  <a href=\"https://themeisle.com\"><img src=\"https://avatars1.githubusercontent.com/u/58979018?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://boosthub.io\">Boost Hub</a><br><br>\n  <a href=\"https://boosthub.io\"><img src=\"https://images.opencollective.com/boosthub/6318083/logo/128.png\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://expo.io\">Expo</a><br><br>\n  <a href=\"https://expo.io\"><img src=\"https://avatars1.githubusercontent.com/u/12504344?s=128&v=4\" width=\"64\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n<td width=\"100%\" align=\"center\" colspan=\"10\">\n  <br>\n  <a href=\"https://opencollective.com/unified\"><strong>You?</strong></a>\n  <br><br>\n</td>\n</tr>\n</table>\n\n### Origin story\n\nOver the summer of 2018, micromark was planned, and the idea shared in August\nwith a couple of friends and potential sponsors.\nThe problem I (**[@wooorm][]**) had was that issues were piling up in remark and\nother repos, but my day job (teaching) was fun, fulfilling, and deserved time\ntoo.\nIt was getting hard to combine the two.\nThe thought was to feed two birds with one scone: fix the issues in remark with\na new markdown parser (codename marydown) while being financially supported by\nsponsors building fancy stuff on top, such as Gatsby, Contentful, and Vercel\n(ZEIT at the time).\n**[@johno][]** was making MDX on top of remark at the time (important historical\nnote: several other folks were working on JSX + markdown too).\nWe bundled our strengths: MDX was getting some traction and we thought together\nwe could perhaps make something sustainable.\n\nIn November 2018, we launched with the idea for micromark to solve all existing\nbugs, sustaining the existing hundreds of projects, and furthering the exciting\nhigh-level project MDX.\nWe pushed a single name: unified (which back then was a small but essential\npart of the chain).\nGatsby and Vercel were immediate sponsors.\nWe didn’t know whether it would work, and it worked.\nBut now you have a new problem: you are getting some financial support (much\nmore than other open source projects) but it’s not enough money for rent, and\ntoo much money to print stickers with.\nYou still have your job and issues are still piling up.\n\nAt the start of summer 2019, after a couple months of saving up donations, I\nquit my job and worked on unified through fall.\nThat got the number of open issues down significantly and set up a strong\ngovernance and maintenance system for the collective.\nBut when the time came to work on micromark, the money was gone again, so I\ncontracted through winter 2019, and in spring 2020 I could do about half open\nsource, half contracting.\nOne of the contracting gigs was to write a new MDX parser, for which I also\ndocumented how to do that with a state machine [in prose][mdx-cmsm].\nThat gave me the insight into how the same could be done for markdown: I drafted\n[CMSM][], which was some of the core ideas for micromark, but in prose.\n\nIn May 2020, Salesforce reached out: they saw the bugs in remark, how micromark\ncould help, and the initial work on CMSM.\nAnd they had thousands of Markdown files.\nIn a for open source uncharacteristic move, they decided to fund my work on\nmicromark.\nA large part of what maintaining open source means, is putting out fires,\ntriaging issues, and making sure users and sponsors are happy, so it was\namazing to get several months to just focus and make something new.\nI remember feeling that this project would probably be the hardest thing I’d\nwork on: yeah, parsers are pretty difficult, but markdown is on another level.\nMarkdown is such a giant stack of edge cases on edge cases on even more\nweirdness, what a mess.\nOn August 20, 2020, I released [2.0.0][200], the first working version of\nmicromark.\nAnd it’s hard to describe how that moment felt.\nIt was great.\n\n### License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark.svg\n\n[downloads]: https://www.npmjs.com/package/micromark\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n\n[cheat]: https://commonmark.org/help/\n\n[twitter]: https://twitter.com/unifiedjs\n\n[remark]: https://github.com/remarkjs/remark\n\n[rehype]: https://github.com/rehypejs/rehype\n\n[site]: https://unifiedjs.com\n\n[contribute]: #contribute\n\n[encoding]: https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings\n\n[buffer]: https://nodejs.org/api/buffer.html\n\n[commonmark-spec]: https://commonmark.org\n\n[popular]: https://www.npmtrends.com/remark-parse-vs-marked-vs-markdown-it\n\n[remark-parse]: https://unifiedjs.com/explore/package/remark-parse/\n\n[improper]: https://github.com/ChALkeR/notes/blob/master/Improper-markup-sanitization.md\n\n[chalker]: https://github.com/ChALkeR\n\n[cmsm]: https://github.com/micromark/common-markup-state-machine\n\n[mdx-cmsm]: https://github.com/micromark/mdx-state-machine\n\n[from-markdown]: https://github.com/syntax-tree/mdast-util-from-markdown\n\n[to-markdown]: https://github.com/syntax-tree/mdast-util-to-markdown\n\n[directives]: https://github.com/micromark/micromark-extension-directive\n\n[footnotes]: https://github.com/micromark/micromark-extension-footnote\n\n[frontmatter]: https://github.com/micromark/micromark-extension-frontmatter\n\n[gfm]: https://github.com/micromark/micromark-extension-gfm\n\n[math]: https://github.com/micromark/micromark-extension-math\n\n[mdxjs]: https://github.com/micromark/micromark-extension-mdxjs\n\n[constructs]: /packages/micromark/dev/lib/constructs.js\n\n[comparison]: #comparison\n\n[extensions]: #list-of-extensions\n\n[syntax-extension]: #syntaxextension\n\n[html-extension]: #htmlextension\n\n[option-extensions]: #optionsextensions\n\n[option-htmlextensions]: #optionshtmlextensions\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[utilities]: https://github.com/syntax-tree/mdast#list-of-utilities\n\n[unified]: https://github.com/unifiedjs/unified\n\n[remark plugins]: https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins\n\n[rehype plugins]: https://github.com/rehypejs/rehype/blob/main/doc/plugins.md#list-of-plugins\n\n[directive-proposal]: https://talk.commonmark.org/t/generic-directives-plugins-syntax/444\n\n[architecture]: #architecture\n\n[extending-markdown]: #extending-markdown\n\n[create-extension]: #creating-a-micromark-extension\n\n[mdx-expression]: https://github.com/micromark/micromark-extension-mdx-expression\n\n[preprocess]: #preprocess\n\n[content-types]: https://github.com/micromark/micromark#content-types\n\n[postprocess]: https://github.com/micromark/micromark#postprocess\n\n[size-debug]: https://github.com/micromark/micromark#size--debug\n\n[packages]: https://github.com/micromark/micromark/tree/main/packages\n\n[marked]: https://github.com/markedjs/marked\n\n[markdown-it]: https://github.com/markdown-it/markdown-it\n\n[mdx]: https://github.com/mdx-js/mdx\n\n[prettier]: https://github.com/prettier/prettier\n\n[gatsby]: https://github.com/gatsbyjs/gatsby\n\n[commonmark]: #commonmark\n\n[size]: #size--debug\n\n[test]: #test\n\n[security]: #security\n\n[sponsor]: #sponsor\n\n[@wooorm]: https://github.com/wooorm\n\n[@johno]: https://github.com/johno\n\n[200]: https://github.com/micromark/micromark/releases/tag/2.0.0\n","readmeFilename":"readme.md","homepage":"https://github.com/micromark/micromark/tree/main#readme","_id":"micromark@3.0.0-alpha.1","_nodeVersion":"16.2.0","_npmVersion":"7.15.1","dist":{"integrity":"sha512-+nCUGBZaH7UipWzvDBsfH5+4DEQWCter8s5qXgQMWVfJ1j1NTn8IHIbxvZDP2lnpVcpFxEA0L3TJI0qx/6ZWGQ==","shasum":"e943fc45353a892d1800a041c70c6f1b75682fa1","tarball":"https://registry.npmjs.org/micromark/-/micromark-3.0.0-alpha.1.tgz","fileCount":48,"unpackedSize":160447,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgveYUCRA9TVsSAnZWagAA41wP/38ZqRhY2oIhrTAPV9Fg\nkl/375thoExc+1Ma+uz7gkWrwBlXzFwf2cH0EZ1kk3G05clIkOumdUPvFFw2\ngDts5CJJ4xbTyXxTlzZrsu8hBmJLeLnFNpy70H/M7uULV2pEYsaT8W818uvZ\nZZs65Yey6AGCmPROedDIS7O7pZG2nsJng2tfpuXfcsjgW4EMUSBfO9zUlB4B\nBuOs5ZsImL/9lS2oVGeGpTFcGjI2zNbZIXAHz7+z8BDIjBCP0tVI9PWquMkC\nuiSegwF60uHzc6xnQf4iHbpnwU+zn/5LLRK0QRKPWE+FajOge3Kh91Do+6pP\n8Epz+qkxyNIkTa/6kPoso4DI/t8a6A9J70xK6oNzopGX3vB0JNQmqOW75wzy\nNtJLek23xUrPOUHmZRlnFgWjGB1t7//LC5WKxXBlDqTsIkmqKFvL/LrV0hDK\nsfgAAWqFWmgvjMn7YATX4EUUDKBSxpMkWJPZn78OXrJJBp3SFxyO/VtgrBSC\nw0D37Cmf+Hn6GiyC5lAdj72QeQypOwaPbUwy4Qt5v/g/hiy+qF1nevHMrvZh\n+omlhBLQ/eL69eexBZe6uXQ8/GsKStK+lOJuoNRvuW7PZAVGffe5Vf07z/bU\npiOq2Y92ImDlNbIoG7CAYJHX0lqIKCndGw6R0QMsxaQLOsK02KsEC4UdjUqE\nMxsM\r\n=ntWq\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDuw6RNg+8AH9fHwJIEAZOSANJ8ASh4Ki6TglhUtY/HxAiBVAB3OhR9kgWiWwQ2cla5XkJ7cxszpa6ybyIf5F5SP6g=="}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_3.0.0-alpha.1_1623057940730_0.19872354441158713"},"_hasShrinkwrap":false},"3.0.0-alpha.2":{"name":"micromark","version":"3.0.0-alpha.2","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git#main"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"sideEffects":false,"type":"module","main":"index.js","types":"dev/index.d.ts","exports":{".":{"development":"./dev/index.js","default":"./index.js"},"./stream":{"development":"./dev/stream.js","default":"./stream.js"},"./stream.js":{"development":"./dev/stream.js","default":"./stream.js"},"./lib/compile":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/compile.js":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/parse":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/parse.js":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/postprocess":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/postprocess.js":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/preprocess":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"},"./lib/preprocess.js":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"}},"dependencies":{"@types/debug":"^4.0.0","debug":"^4.0.0","micromark-core-commonmark":"1.0.0-alpha.2","micromark-factory-space":"1.0.0-alpha.2","micromark-util-character":"1.0.0-alpha.2","micromark-util-chunked":"1.0.0-alpha.2","micromark-util-combine-extensions":"1.0.0-alpha.2","micromark-util-encode":"1.0.0-alpha.2","micromark-util-normalize-identifier":"1.0.0-alpha.2","micromark-util-resolve-all":"1.0.0-alpha.2","micromark-util-sanitize-uri":"1.0.0-alpha.2","micromark-util-subtokenize":"1.0.0-alpha.2","micromark-util-symbol":"1.0.0-alpha.2","micromark-util-types":"1.0.0-alpha.2","parse-entities":"^3.0.0"},"scripts":{"build":"rimraf \"*.d.ts\" \"{dev/,lib/}**/*.d.ts\" && tsc && micromark-build && type-coverage"},"xo":false,"typeCoverage":{"atLeast":100,"detail":true,"strict":true,"ignoreCatch":true},"readme":"<h1 align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/micromark/micromark/2e476c9/logo.svg?sanitize=true\" alt=\"micromark\" />\n</h1>\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\n> ⚠️ Note: this is the readme for the upcoming release of micromark 3.0.0.\\\n> [See here](https://github.com/micromark/micromark/tree/14d86e0) for the\n> current release.\n\nThe smallest CommonMark compliant markdown parser with positional info and\nconcrete tokens.\n\n## Feature highlights\n\n*   [x] **[compliant][commonmark]** (100% to CommonMark)\n*   [x] **[extensions][]** ([GFM][], [directives][], [footnotes][],\n    [frontmatter][], [math][], [MDX.js][mdxjs])\n*   [x] **[safe][security]** (by default)\n*   [x] **[small][size]** (smallest CM parser that exists)\n*   [x] **[robust][test]** (1800+ tests, 100% coverage, fuzz testing)\n\n## When to use this\n\n*   If you *just* want to turn markdown into HTML (w/ maybe a few extensions)\n*   If you want to do *really complex things* with markdown\n\nSee [§ Comparison][comparison] for more info\n\n## Intro\n\nmicromark is a long awaited markdown parser.\nIt uses a [state machine][cmsm] to parse the entirety of markdown into concrete\ntokens.\nIt’s the smallest 100% [CommonMark][] compliant markdown parser in JavaScript.\nIt was made to replace the internals of [`remark-parse`][remark-parse], the most\n[popular][] markdown parser.\nIts API compiles to HTML, but its parts are made to be used separately, so as to\ngenerate syntax trees ([`mdast-util-from-markdown`][from-markdown]) or compile\nto other output formats.\n\n*   to learn markdown, see this [cheatsheet and tutorial][cheat]\n*   for more about us, see [`unifiedjs.com`][site]\n*   for updates, see [Twitter][]\n*   for questions, see [Discussions][chat]\n*   to help, see [contribute][] or [sponsor][] below\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`micromark(value[, encoding][, options])`](#micromarkvalue-encoding-options)\n    *   [`stream(options?)`](#streamoptions)\n*   [Extensions](#extensions)\n    *   [List of extensions](#list-of-extensions)\n    *   [`SyntaxExtension`](#syntaxextension)\n    *   [`HtmlExtension`](#htmlextension)\n    *   [Extending markdown](#extending-markdown)\n    *   [Creating a micromark extension](#creating-a-micromark-extension)\n*   [Architecture](#architecture)\n    *   [Overview](#overview)\n    *   [Preprocess](#preprocess)\n    *   [Parse](#parse)\n    *   [Postprocess](#postprocess)\n    *   [Compile](#compile)\n*   [Examples](#examples)\n    *   [GitHub flavored markdown (GFM)](#github-flavored-markdown-gfm)\n    *   [Math](#math)\n    *   [Footnotes](#footnotes)\n    *   [Syntax tree](#syntax-tree)\n*   [Markdown](#markdown)\n    *   [CommonMark](#commonmark)\n    *   [Grammar](#grammar)\n*   [Project](#project)\n    *   [Comparison](#comparison)\n    *   [Test](#test)\n    *   [Size & debug](#size--debug)\n    *   [Version](#version)\n    *   [Security](#security)\n    *   [Contribute](#contribute)\n    *   [Sponsor](#sponsor)\n    *   [Origin story](#origin-story)\n    *   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark\n```\n\n## Use\n\nTypical use (buffering):\n\n```js\nimport {micromark} from 'micromark'\n\nconsole.log(micromark('## Hello, *world*!'))\n```\n\nYields:\n\n```html\n<h2>Hello, <em>world</em>!</h2>\n```\n\nYou can pass extensions (in this case [`micromark-extension-gfm`][gfm]):\n\n```js\nimport {micromark} from 'micromark'\nimport {gfm, gfmHtml} from 'micromark-extension-gfm'\n\nconst value = '* [x] contact@example.com ~~strikethrough~~'\n\nconst result = micromark(value, {\n  extensions: [gfm()],\n  htmlExtensions: [gfmHtml]\n})\n\nconsole.log(result)\n```\n\nYields:\n\n```html\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"mailto:contact@example.com\">contact@example.com</a> <del>strikethrough</del></li>\n</ul>\n```\n\nStreaming interface:\n\n```js\nimport fs from 'fs'\nimport {stream} from 'micromark/stream'\n\nfs.createReadStream('example.md')\n  .on('error', handleError)\n  .pipe(stream())\n  .pipe(process.stdout)\n\nfunction handleError(error) {\n  // Handle your error here!\n  throw error\n}\n```\n\n## API\n\n`micromark` core has two entries in its export map: `micromark` and\n`micromark/stream`.\n\n`micromark` exports the following identifier: `micromark`.\n`micromark/stream` exports the following identifier: `stream`.\nThere are no default exports.\n\nThe export map supports the endorsed\n[`development` condition](https://nodejs.org/api/packages.html#packages_resolving_user_conditions).\nRun `node --conditions development module.js` to get instrumented dev code.\nWithout this condition, production code is loaded.\nSee [§ Size & debug][size-debug] for more info.\n\n### `micromark(value[, encoding][, options])`\n\nCompile markdown to HTML.\n\n##### Parameters\n\n###### `value`\n\nMarkdown to parse (`string` or `Buffer`).\n\n###### `encoding`\n\n[Character encoding][encoding] to understand `value` as when it’s a\n[`Buffer`][buffer] (`string`, default: `'utf8'`).\n\n###### `options.defaultLineEnding`\n\nValue to use for line endings not in `value` (`string`, default: first line\nending or `'\\n'`).\n\nGenerally, micromark copies line endings (`'\\r'`, `'\\n'`, `'\\r\\n'`) in the\nmarkdown document over to the compiled HTML.\nIn some cases, such as `> a`, CommonMark requires that extra line endings are\nadded: `<blockquote>\\n<p>a</p>\\n</blockquote>`.\n\n###### `options.allowDangerousHtml`\n\nWhether to allow embedded HTML (`boolean`, default: `false`).\nSee [§ Security][security].\n\n###### `options.allowDangerousProtocol`\n\nWhether to allow potentially dangerous protocols in links and images (`boolean`,\ndefault: `false`).\nURLs relative to the current protocol are always allowed (such as, `image.jpg`).\nFor links, the allowed protocols are `http`, `https`, `irc`, `ircs`, `mailto`,\nand `xmpp`.\nFor images, the allowed protocols are `http` and `https`.\nSee [§ Security][security].\n\n###### `options.extensions`\n\nArray of syntax extensions ([`Array.<SyntaxExtension>`][syntax-extension],\ndefault: `[]`).\nSee [§ Extensions][extensions].\n\n###### `options.htmlExtensions`\n\nArray of HTML extensions ([`Array.<HtmlExtension>`][html-extension], default:\n`[]`).\nSee [§ Extensions][extensions].\n\n##### Returns\n\n`string` — Compiled HTML.\n\n### `stream(options?)`\n\nStreaming interface of micromark.\nCompiles markdown to HTML.\n`options` are the same as the buffering API above.\nNote that some of the work to parse markdown can be done streaming, but in the\nend buffering is required.\n\nmicromark does not handle errors for you, so you must handle errors on whatever\nstreams you pipe into it.\nAs markdown does not know errors, `micromark` itself does not emit errors.\n\n## Extensions\n\nmicromark supports extensions.\nThere are two types of extensions for micromark:\n[`SyntaxExtension`][syntax-extension],\nwhich change how markdown is parsed, and [`HtmlExtension`][html-extension],\nwhich change how it compiles.\nThey can be passed in [`options.extensions`][option-extensions] or\n[`options.htmlExtensions`][option-htmlextensions], respectively.\n\nAs a user of extensions, refer to each extension’s readme for more on how to use\nthem.\nAs a (potential) author of extensions, refer to\n[§ Extending markdown][extending-markdown] and\n[§ Creating a micromark extension][create-extension].\n\n### List of extensions\n\n*   [`micromark/micromark-extension-directive`][directives]\n    — support directives (generic extensions)\n*   [`micromark/micromark-extension-footnote`][footnotes]\n    — support footnotes\n*   [`micromark/micromark-extension-frontmatter`][frontmatter]\n    — support frontmatter (YAML, TOML, etc)\n*   [`micromark/micromark-extension-gfm`][gfm]\n    — support GFM (GitHub Flavored Markdown)\n*   [`micromark/micromark-extension-gfm-autolink-literal`](https://github.com/micromark/micromark-extension-gfm-autolink-literal)\n    — support GFM autolink literals\n*   [`micromark/micromark-extension-gfm-strikethrough`](https://github.com/micromark/micromark-extension-gfm-strikethrough)\n    — support GFM strikethrough\n*   [`micromark/micromark-extension-gfm-table`](https://github.com/micromark/micromark-extension-gfm-table)\n    — support GFM tables\n*   [`micromark/micromark-extension-gfm-tagfilter`](https://github.com/micromark/micromark-extension-gfm-tagfilter)\n    — support GFM tagfilter\n*   [`micromark/micromark-extension-gfm-task-list-item`](https://github.com/micromark/micromark-extension-gfm-task-list-item)\n    — support GFM tasklists\n*   [`micromark/micromark-extension-math`][math]\n    — support math\n*   [`micromark/micromark-extension-mdx`](https://github.com/micromark/micromark-extension-mdx)\n    — support MDX\n*   [`micromark/micromark-extension-mdxjs`][mdxjs]\n    — support MDX.js\n*   [`micromark/micromark-extension-mdx-expression`](https://github.com/micromark/micromark-extension-mdx-expression)\n    — support MDX (or MDX.js) expressions\n*   [`micromark/micromark-extension-mdx-jsx`](https://github.com/micromark/micromark-extension-mdx-jsx)\n    — support MDX (or MDX.js) JSX\n*   [`micromark/micromark-extension-mdx-md`](https://github.com/micromark/micromark-extension-mdx-md)\n    — support misc MDX changes\n*   [`micromark/micromark-extension-mdxjs-esm`](https://github.com/micromark/micromark-extension-mdxjs-esm)\n    — support MDX.js import/exports\n\n### `SyntaxExtension`\n\nA syntax extension is an object whose fields are typically the names of hooks,\nreferring to where constructs “hook” into.\nThe fields at such objects are character codes, mapping to constructs as values.\n\nThe built in [constructs][] are an example.\nSee it and [existing extensions][extensions] for inspiration.\n\n### `HtmlExtension`\n\nAn HTML extension is an object whose fields are typically `enter` or `exit`\n(reflecting whether a token is entered or exited).\nThe values at such objects are names of tokens mapping to handlers.\n\nSee [existing extensions][extensions] for inspiration.\n\n### Extending markdown\n\nmicromark lets you change markdown syntax, yes, but there are alternatives.\nThe alternatives are often better.\n\nOver the years, many micromark and remark users have asked about their unique\ngoals for markdown.\nSome exemplary goals are:\n\n1.  I want to add `rel=\"nofollow\"` to external links\n2.  I want to add links from headings to themselves\n3.  I want line breaks in paragraphs to become hard breaks\n4.  I want to support embedded music sheets\n5.  I want authors to add arbitrary attributes\n6.  I want authors to mark certain blocks with meaning, such as tip, warning,\n    etc\n7.  I want to combine markdown with JS(X)\n8.  I want to support our legacy flavor of markdown-like syntax\n\nThese can be solved in different ways and which solution is best is both\nsubjective and dependant on unique needs.\nOften, there is already a solution in the form of an existing remark or rehype\nplugin.\nRespectively, their solutions are:\n\n1.  [`remark-external-links`](https://github.com/remarkjs/remark-external-links)\n2.  [`rehype-autolink-headings`](https://github.com/rehypejs/rehype-autolink-headings)\n3.  [`remark-breaks`](https://github.com/remarkjs/remark-breaks)\n4.  custom plugin similar to\n    [`rehype-katex`](https://github.com/remarkjs/remark-math/tree/main/packages/rehype-katex)\n    but integrating [`abcjs`](https://www.abcjs.net)\n5.  either [`remark-directive`](https://github.com/remarkjs/remark-directive)\n    and a custom plugin or with\n    [`rehype-attr`](https://github.com/jaywcjlove/rehype-attr)\n6.  [`remark-directive`](https://github.com/remarkjs/remark-directive)\n    combined with a custom plugin\n7.  combining the existing micromark MDX extensions however you please, such as\n    done by [`mdx-js/mdx`](https://github.com/mdx-js/mdx) or\n    [`xdm`](https://github.com/wooorm/xdm)\n8.  Writing a micromark extension\n\nLooking at these from a higher level, they can be categorized:\n\n*   **Changing the output by transforming syntax trees**\n    (1 and 2)\n\n    This category is nice as the format remains plain markdown that authors are\n    already familiar with and which will work with existing tools and platforms.\n\n    Implementations will deal with the syntax tree\n    ([`mdast`][mdast]) and the ecosystems\n    **[remark][]** and **[rehype][]**.\n    There are many existing\n    [utilities for working with that tree][utilities].\n    Many [remark plugins][] and [rehype plugins][] also exist.\n*   **Using and abusing markdown to add new meaning**\n    (3, 4, potentially 5)\n\n    This category is similar to *Changing the output by transforming syntax\n    trees*, but adds a new meaning to certain things which already have\n    semantics in markdown.\n\n    Some examples in pseudo code:\n\n    ````markdown\n    *   **A list item with the first paragraph bold**\n\n        And then more content, is turned into `<dl>` / `<dt>` / `<dd>` elements\n\n    Or, the title attributes on links or images is [overloaded](/url 'rel:nofollow')\n    with a new meaning.\n\n    ```csv\n    fenced,code,can,include,data\n    which,is,turned,into,a,graph\n    ```\n\n    ```js data can=\"be\" passed=true\n    // after the code language name\n    ```\n\n    HTML, especially comments, could be used as **markers**<!--id=\"markers\"-->\n    ````\n*   **Arbitrary extension mechanism**\n    (potentially 5; 6)\n\n    This category is nice when content should contain embedded “components”.\n    Often this means it’s required for authors to have some programming\n    experience.\n    There are three good ways to solve arbitrary extensions.\n\n    **HTML**: Markdown already has an arbitrary extension syntax.\n    It works in most places and authors are already familiar with the syntax,\n    but it’s reasonably hard to implement securely.\n    Certain platforms will remove HTML completely, others sanitize it to varying\n    degrees.\n    HTML also supports custom elements.\n    These could be used and enhanced by client side JavaScript or enhanced when\n    transforming the syntax tree.\n\n    **Generic directives**: although\n    [a proposal][directive-proposal]\n    and not supported on most platforms, directives do work with many tools\n    already.\n    They’re not the easiest to author compared to, say, a heading, but sometimes\n    that’s okay.\n    They do have potential: they nicely solve the need for an infinite number of\n    potential extensions to markdown in a single markdown-esque way.\n\n    **MDX** also adds support for components by swapping HTML out for JS(X).\n    JSX is an extension to JavaScript, so MDX is something along the lines of\n    literate programming.\n    This does require knowledge of React (or Vue) and JavaScript, excluding some\n    authors.\n*   **Extending markdown syntax**\n    (7 and 8)\n\n    Extend the syntax of markdown means:\n\n    *   Authors won’t be familiar with the syntax\n    *   Content won’t work in other places (such as on GitHub)\n    *   Defeating the purpose of markdown: being simple to author and looking\n        like what it means\n\n    …and it’s hard to do as it requires some in-depth knowledge of JavaScript\n    and parsing.\n    But it’s possible and in certain cases very powerful.\n\n### Creating a micromark extension\n\nThis section shows how to create an extension for micromark that parses\n“variables” (a way to render some data) and one to turn a default construct off.\n\n> Stuck?\n> See [`support.md`][support].\n\n#### Prerequisites\n\n*   You should possess an intermediate to high understanding of JavaScript:\n    it’s going to get a bit complex\n*   Read the readme of [unified][] (until you hit the API section) to better\n    understand where micromark fits\n*   Read the [§ Architecture][architecture] section to understand how micromark\n    works\n*   Read the [§ Extending markdown][extending-markdown] section to understand\n    whether it’s a good idea to extend the syntax of markdown\n\n#### Extension basics\n\nmicromark supports two types of extensions.\nSyntax extensions change how markdown is parsed.\nHTML extensions change how it compiles.\n\nHTML extensions are not always needed, as micromark is often used through\n[`mdast-util-from-markdown`][from-markdown] to parse to a markdown syntax tree\nSo instead of an HTML extension a `from-markdown` utility is needed.\nThen, a [`mdast-util-to-markdown`][to-markdown] utility, which is responsible\nfor serializing syntax trees to markdown, is also needed.\n\nWhen developing something for internal use only, you can pick and choose which\nparts you need.\nWhen open sourcing your extensions, it should probably contain four parts:\nsyntax extension, HTML extension, `from-markdown` utility, and a `to-markdown`\nutility.\n\nOn to our first case!\n\n#### Case: variables\n\nLet’s first outline what we want to make: render some data, similar to how\n[Liquid](https://github.com/Shopify/liquid/wiki/Liquid-for-Designers) and the\nlike work, in our markdown.\nIt could look like this:\n\n```markdown\nHello, {planet}!\n```\n\nTurned into:\n\n```html\n<p>Hello, Venus!</p>\n```\n\nAn opening curly brace, followed by one or more characters, and then a closing\nbrace.\nWe’ll then look up `planet` in some object and replace the variable with its\ncorresponding value, to get something like `Venus` out.\n\nIt looks simple enough, but with markdown there are often a couple more things\nto think about.\nFor this case, I can see the following:\n\n*   Is there a “block” version too?\n*   Are spaces allowed?\n    Line endings?\n    Should initial and final white space be ignored?\n*   Balanced nested braces?\n    Superfluous ones such as `{{planet}}` or meaningful ones such as\n    `{a {pla} net}`?\n*   Character escapes (`{pla\\}net}`) and character references\n    (`{pla&#x7d;net}`)?\n\nTo keep things as simple as possible, let’s not support a block syntax, see\nspaces as special, support line endings, or support nested braces.\nBut to learn interesting things, we *will* support character escapes and\n\\-references.\n\nNote that this particular case is already solved quite nicely by\n[`micromark-extension-mdx-expression`][mdx-expression].\nIt’s a bit more powerful and does more things, but it can be used to solve this\ncase and otherwise serve as inspiration.\n\n##### Setup\n\nCreate a new folder, enter it, and set up a new package:\n\n```sh\nmkdir example\ncd example\nnpm init -y\n```\n\nIn this example we’ll use ESM, so add `type: 'module'` to `package.json`:\n\n```diff\n@@ -2,6 +2,7 @@\n   \"name\": \"example\",\n   \"version\": \"1.0.0\",\n   \"description\": \"\",\n+  \"type\": \"module\",\n   \"main\": \"index.js\",\n   \"scripts\": {\n     \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n```\n\nAdd a markdown file, `example.md`, with the following text:\n\n```markdown\nHello, {planet}!\n\n{pla\\}net} and {pla&#x7d;net}.\n```\n\nTo check if our extension works, add an `example.js` module, with the following\ncode:\n\n```js\nimport {promises as fs} from 'node:fs'\nimport {micromark} from 'micromark'\nimport {variables} from './index.js'\n\nmain()\n\nasync function main() {\n  const buf = await fs.readFile('example.md')\n  const out = micromark(buf, {extensions: [variables]})\n  console.log(out)\n}\n```\n\nWhile working on the extension, run `node example` to see whether things work.\nFeel free to add more examples of the variables syntax in `example.md` if\nneeded.\n\nOur extension doesn’t work yet, for one because `micromark` is not installed:\n\n```sh\nnpm install micromark --save-dev\n```\n\n…and we need to write our extension.\nLet’s do that in `index.js`:\n\n```js\nexport const variables = {}\n```\n\nAlthough our extension doesn’t do anything, running `node example` now somewhat\nworks!\n\n##### Syntax extension\n\nMuch in micromark is based on character codes (see [§ Preprocess][preprocess]).\nFor this extension, the relevant codes are:\n\n*   `-5`\n    — M-0005 CARRIAGE RETURN (CR)\n*   `-4`\n    — M-0004 LINE FEED (LF)\n*   `-3`\n    — M-0003 CARRIAGE RETURN LINE FEED (CRLF)\n*   `null`\n    — EOF (end of the stream)\n*   `92`\n    — U+005C BACKSLASH (`\\`)\n*   `123`\n    — U+007B LEFT CURLY BRACE (`{`)\n*   `125`\n    — U+007D RIGHT CURLY BRACE (`}`)\n\nAlso relevant are the content types (see [§ Content types][content-types]).\nThis extension is a *text* construct, as it’s parsed alongsides links and such.\nThe content inside it (between the braces) is *string*, to support character\nescapes and -references.\n\nLet’s write our extension.\nAdd the following code to `index.js`:\n\n```js\nconst variableConstruct = {name: 'variable', tokenize: variableTokenize}\n\nexport const variables = {text: {123: variableConstruct}}\n\nfunction variableTokenize(effects, ok, nok) {\n  return start\n\n  function start(code) {\n    console.log('start:', effects, code);\n    return nok(code)\n  }\n}\n```\n\nThe above code exports an extension with the identifier `variables`.\nThe extension defines a *text* construct for the character code `123`.\nThe construct has a `name`, so that it can be turned off (optional, see next\ncase), and it has a `tokenize` function that sets up a state machine, which\nreceives `effects` and the `ok` and `nok` states.\n`ok` can be used when successful, `nok` when not, and so constructs are a bit\nsimilar to how promises can *resolve* or *reject*.\n`tokenize` returns the initial state, `start`, which itself receives the current\ncharacter code, prints some debugging information, and then returns a call\nto `nok`.\n\nEnsure that things work by running `node example` and see what it prints.\n\nNow we need to define our states and figure out how variables work.\nSome people prefer sketching a diagram of the flow.\nI often prefer writing it down in pseudo-code prose.\nI’ve also found that test driven development works well, where I write unit\ntests for how it should work, then write the state machine, and finally use a\ncode coverage tool to ensure I’ve thought of everything.\n\nIn prose, what we have to code looks like this:\n\n*   **start**:\n    Receive `123` as `code`, enter a token for the whole (let’s call it\n    `variable`), enter a token for the marker (`variableMarker`), consume\n    `code`, exit the marker token, enter a token for the contents\n    (`variableString`), switch to *begin*\n*   **begin**:\n    If `code` is `125`, reconsume in *nok*.\n    Else, reconsume in *inside*\n*   **inside**:\n    If `code` is `-5`, `-4`, `-3`, or `null`, reconsume in `nok`.\n    Else, if `code` is `125`, exit the string token, enter a `variableMarker`,\n    consume `code`, exit the marker token, exit the variable token, and switch\n    to *ok*.\n    Else, consume, and remain in *inside*.\n\nThat should be it!\nReplace `variableTokenize` with the following to include the needed states:\n\n```js\nfunction variableTokenize(effects, ok, nok) {\n  return start\n\n  function start(code) {\n    effects.enter('variable')\n    effects.enter('variableMarker')\n    effects.consume(code)\n    effects.exit('variableMarker')\n    effects.enter('variableString')\n    return begin\n  }\n\n  function begin(code) {\n    return code === 125 ? nok(code) : inside(code)\n  }\n\n  function inside(code) {\n    if (code === -5 || code === -4 || code === -3 || code === null) {\n      return nok(code)\n    }\n\n    if (code === 125) {\n      effects.exit('variableString')\n      effects.enter('variableMarker')\n      effects.consume(code)\n      effects.exit('variableMarker')\n      effects.exit('variable')\n      return ok\n    }\n\n    effects.consume(code)\n    return inside\n  }\n}\n```\n\nRun `node example` again and see what it prints!\nThe HTML compiler ignores things it doesn’t know, so variables are now removed.\n\nWe have our first syntax extension, and it sort of works, but we don’t handle\ncharacter escapes and -references yet.\nWe need to do two things to make that work:\na) skip over `\\\\` and `\\}` in our algorithm,\nb) tell micromark to parse them.\n\nChange the code in `index.js` to support escapes like so:\n\n```diff\n@@ -23,6 +23,11 @@ function variableTokenize(effects, ok, nok) {\n       return nok(code)\n     }\n\n+    if (code === 92) {\n+      effects.consume(code)\n+      return insideEscape\n+    }\n+\n     if (code === 125) {\n       effects.exit('variableString')\n       effects.enter('variableMarker')\n@@ -35,4 +40,13 @@ function variableTokenize(effects, ok, nok) {\n     effects.consume(code)\n     return inside\n   }\n+\n+  function insideEscape(code) {\n+    if (code === 92 || code === 125) {\n+      effects.consume(code)\n+      return inside\n+    }\n+\n+    return inside(code)\n+  }\n }\n```\n\nFinally add support for character references and character escapes between\nbraces by adding a special token that defines a content type:\n\n```diff\n@@ -11,6 +11,7 @@ function variableTokenize(effects, ok, nok) {\n     effects.consume(code)\n     effects.exit('variableMarker')\n     effects.enter('variableString')\n+    effects.enter('chunkString', {contentType: 'string'})\n     return begin\n   }\n\n@@ -29,6 +30,7 @@ function variableTokenize(effects, ok, nok) {\n     }\n\n     if (code === 125) {\n+      effects.exit('chunkString')\n       effects.exit('variableString')\n       effects.enter('variableMarker')\n       effects.consume(code)\n```\n\nTokens with a `contentType` will be replaced by *postprocess* (see\n[§ Postprocess][postprocess]) by the tokens belonging to that content type.\n\n##### HTML extension\n\nUp next is an HTML extension to replace variables with data.\nChange `example.js` to use one like so:\n\n```diff\n@@ -1,11 +1,12 @@\n import {promises as fs} from 'node:fs'\n import {micromark} from 'micromark'\n-import {variables} from './index.js'\n+import {variables, variablesHtml} from './index.js'\n\n main()\n\n async function main() {\n   const buf = await fs.readFile('example.md')\n-  const out = micromark(buf, {extensions: [variables]})\n+  const html = variablesHtml({planet: '1', 'pla}net': '2'})\n+  const out = micromark(buf, {extensions: [variables], htmlExtensions: [html]})\n   console.log(out)\n }\n```\n\nAnd add the HTML extension, `variablesHtml`, to `index.js` like so:\n\n```diff\n@@ -52,3 +52,19 @@ function variableTokenize(effects, ok, nok) {\n     return inside(code)\n   }\n }\n+\n+export function variablesHtml(data = {}) {\n+  return {\n+    enter: {variableString: enterVariableString},\n+    exit: {variableString: exitVariableString},\n+  }\n+\n+  function enterVariableString() {\n+    this.buffer()\n+  }\n+\n+  function exitVariableString() {\n+    var id = this.resume()\n+    if (id in data) {\n+      this.raw(this.encode(data[id]))\n+    }\n+  }\n+}\n```\n\n`variablesHtml` is a function that receives an object mapping “variables” to\nstrings and returns an HTML extension.\nThe extension hooks two functions to `variableString`, one when it starts,\nthe other when it ends.\nWe don’t need to do anything to handle the other tokens as they’re already\nignored by default.\n`enterVariableString` calls `buffer`, which is a function that “stashes” what\nwould otherwise be emitted.\n`exitVariableString` calls `resume`, which is the inverse of `buffer` and\nreturns the stashed value.\nIf the variable is defined, we ensure it’s made safe (with `this.encode`) and\nfinally output that (with `this.raw`).\n\n##### Further exercises\n\nIt works!\nWe’re done!\nOf course, it can be better, such as with the following potential features:\n\n*   Add support for empty variables\n*   Add support for spaces between markers and string\n*   Add support for line endings in variables\n*   Add support for nested braces\n*   Add support for blocks\n*   Add warnings on undefined variables\n*   Use `micromark-build`, and use `assert`, `debug`, and\n    `micromark-util-symbol` (see [§ Size & debug][size-debug])\n*   Add [`mdast-util-from-markdown`][from-markdown] and\n    [`mdast-util-to-markdown`][to-markdown] utilities to parse and serialize the\n    AST\n\n#### Case: turn off constructs\n\nSometimes it’s needed to turn a default construct off.\nThat’s possible through a syntax extension.\nNote that not everything can be turned off (such as paragraphs) and even if it’s\npossible to turn something off, it could break micromark (such as character\nescapes).\n\nTo disable constructs, refer to them by name in an array at the `disable.null`\nfield of an extension:\n\n```js\nimport {micromark} from 'micromark'\n\nconst extension = {disable: {null: ['codeIndented']}}\n\nconsole.log(micromark('\\ta', {extensions: [extension]}))\n```\n\nYields:\n\n```html\n<p>a</p>\n```\n\n## Architecture\n\nmicromark is maintained as a monorepo.\nMany of its internals, which are used in `micromark` (core) but also useful for\ndevelopers of extensions or integrations, are available as separate modules.\nEach module maintained here is available in [`packages/`][packages].\n\n### Overview\n\nThe naming scheme in [`packages/`][packages] is as follows:\n\n*   `micromark-build`\n    — Small CLI to build dev code into production code\n*   `micromark-core-commonmark`\n    — CommonMark constructs used in micromark\n*   `micromark-factory-*`\n    — Reusable subroutines used to parse parts of constructs\n*   `micromark-util-*`\n    — Reusable helpers often needed when parsing markdown\n*   `micromark`\n    — Core module\n\nmicromark has two interfaces: buffering (maintained in\n[`micromark/dev/index.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/index.js))\nand streaming (maintained in\n[`micromark/dev/stream.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/stream.js)).\nThe first takes all input at once whereas the last uses a Node.js stream to take\ninput separately.\nThey thinly wrap how data flows through micromark:\n\n```txt\n                                            micromark\n+-----------------------------------------------------------------------------------------------+\n|            +------------+         +-------+         +-------------+         +---------+       |\n| -markdown->+ preprocess +-chunks->+ parse +-events->+ postprocess +-events->+ compile +-html- |\n|            +------------+         +-------+         +-------------+         +---------+       |\n+-----------------------------------------------------------------------------------------------+\n```\n\n### Preprocess\n\nThe **preprocessor**\n([`micromark/dev/lib/preprocess.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/lib/preprocess.js))\ntakes markdown and turns it into chunks.\n\nA **chunk** is either a character code or a slice of a buffer in the form of a\nstring.\nChunks are used because strings are more efficient storage than character codes,\nbut limited in what they can represent.\nFor example, the input `ab\\ncd` is represented as `['ab', -4, 'cd']` in chunks.\n\nA character **code** is often the same as what `String#charCodeAt()` yields but\nmicromark adds meaning to certain other values.\n\nIn micromark, the actual character U+0009 CHARACTER TABULATION (HT) is replaced\nby one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL SPACE (VS)\ncharacters, depending on the column at which the tab occurred.\nFor example, the input `\\ta` is represented as `[-2, -1, -1, -1, 97]` and `a\\tb`\nas `[97, -2, -1, -1, 98]` in character codes.\n\nThe characters U+000A LINE FEED (LF) and U+000D CARRIAGE RETURN (CR) are\nreplaced by virtual characters depending on whether they occur together: M-0003\nCARRIAGE RETURN LINE FEED (CRLF), M-0004 LINE FEED (LF), and M-0005 CARRIAGE\nRETURN (CR).\nFor example, the input `a\\r\\nb\\nc\\rd` is represented as\n`[97, -5, 98, -4, 99, -3, 100]` in character codes.\n\nThe `0` (U+0000 NUL) character code is replaced by U+FFFD REPLACEMENT CHARACTER\n(`�`).\n\nThe `null` code represents the end of the input stream (called *eof* for end of\nfile).\n\n### Parse\n\nThe **parser**\n([`micromark/dev/lib/parse.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/lib/parse.js))\ntakes chunks and turns them into events.\n\nAn **event** is the start or end of a token amongst other events.\nTokens can “contain” other tokens, even though they are stored in a flat list,\nby entering before and exiting after them.\n\nA **token** is a span of one or more codes.\nTokens are most of what micromark produces: the built in HTML compiler or other\ntools can turn them into different things.\nTokens are essentially names attached to a slice, such as `lineEndingBlank` for\ncertain line endings, or `codeFenced` for a whole fenced code.\n\nSometimes, more info is attached to tokens, such as `_open` and `_close` by\n`attention` (strong, emphasis) to signal whether the sequence can open or close\nan attention run.\nThese fields have to do with how the parser works, which is complex and not\nalways pretty.\n\nCertain fields (`previous`, `next`, and `contentType`) are used in many cases:\nlinked tokens for subcontent.\nLinked tokens are used because outer constructs are parsed first.\nTake for example:\n\n```markdown\n- *a\n  b*.\n```\n\n1.  The list marker and the space after it is parsed first\n2.  The rest of the line is a `chunkFlow` token\n3.  The two spaces on the second line are a `linePrefix` of the list\n4.  The rest of the line is another `chunkFlow` token\n\nThe two `chunkFlow` tokens are linked together and the chunks they span are\npassed through the flow tokenizer.\nThere the chunks are seen as `chunkContent` and passed through the content\ntokenizer.\nThere the chunks are seen as a paragraph and seen as `chunkText` and passed\nthrough the text tokenizer.\nFinally, the attention (emphasis) and data (“raw” characters) is parsed there,\nand we’re done!\n\n#### Content types\n\nThe parser starts out with a document tokenizer.\n*Document* is the top-most content type, which includes containers such as block\nquotes and lists.\nContainers in markdown come from the margin and include more constructs\non the lines that define them.\n\n*Flow* represents the sections (block constructs such as ATX and setext\nheadings, HTML, indented and fenced code, thematic breaks), which like\n*document* are also parsed per line.\nAn example is HTML, which has a certain starting condition (such as `<script>`\non its own line), then continues for a while, until an end condition is found\n(such as `</style>`).\nIf that line with an end condition is never found, that flow goes until the end.\n\n*Content* is zero or more definitions, and then zero or one paragraph.\nIt’s a weird one, and needed to make certain edge cases around definitions spec\ncompliant.\nDefinitions are unlike other things in markdown, in that they behave like *text*\nin that they can contain arbitrary line endings, but *have* to end at a line\nending.\nIf they end in something else, the whole definition instead is seen as a\nparagraph.\n\nThe content in markdown first needs to be parsed up to this level to figure out\nwhich things are defined, for the whole document, before continuing on with\n*text*, as whether a link or image reference forms or not depends on whether\nit’s defined.\nThis unfortunately prevents a true streaming markdown parser.\n\n*Text* contains phrasing content (rich inline text: autolinks, character escapes\nand -references, code, hard breaks, HTML, images, links, emphasis, strong).\n\n*String* is a limited *text*-like content type which only allows character\nreferences and character escapes.\nIt exists in things such as identifiers (media references, definitions),\ntitles, or URLs and such.\n\n#### Constructs\n\nConstructs are the things that make up markdown.\nSome examples are lists, thematic breaks, or character references.\n\nNote that, as a general rule of thumb, markdown is *really weird*.\nIt’s essentially made up of edge cases rather than logical rules.\nWhen browsing the built in constructs, or venturing to build your own, you’ll\nfind confusing new things and run into complex custom hooks.\n\nOne more reasonable construct is the thematic break\n([see code](https://github.com/micromark/micromark/blob/main/packages/micromark-core-commonmark/dev/lib/thematic-break.js)).\nIt’s an object that defines a `name` and a `tokenize` function.\nMost of what constructs do is defined in their required `tokenize` function,\nwhich sets up a state machine to handle character codes streaming in.\n\n### Postprocess\n\nThe **postprocessor**\n([`micromark/dev/lib/postprocess.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/lib/postprocess.js))\nis a small step that takes events, ensures all their\nnested content is parsed, and returns the modified events.\n\n### Compile\n\nThe **compiler**\n([`micromark/dev/lib/compile.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/lib/compile.js))\ntakes events and turns them into HTML.\nWhile micromark was created mostly to advance markdown parsing irrespective of\ncompiling to HTML, the common case of doing so is built in.\nA built in HTML compiler is useful because it allows us to check for compliancy\nto CommonMark, the de facto norm of markdown, specified in roughly 650\ninput/output cases.\nThe parsing parts can still be used separately to build ASTs, CSTs, or many\nother output formats.\n\nThe compiler has an interface that accepts lists of events instead of the whole\nat once, but because markdown can’t truly stream, events are buffered before\ncompiling and outputting the final result.\n\n## Examples\n\n### GitHub flavored markdown (GFM)\n\nTo support GFM (autolink literals, strikethrough, tables, and tasklists) use\n[`micromark-extension-gfm`][gfm].\nSay we have a file like this:\n\n```markdown\n# GFM\n\n## Autolink literals\n\nwww.example.com, https://example.com, and contact@example.com.\n\n## Strikethrough\n\n~one~ or ~~two~~ tildes.\n\n## Table\n\n| a | b  |  c |  d  |\n| - | :- | -: | :-: |\n\n## Tasklist\n\n* [ ] to do\n* [x] done\n```\n\nThen do something like this:\n\n```js\nimport fs from 'node:fs'\nimport {micromark} from 'micromark'\nimport {gfm, gfmHtml} from 'micromark-extension-gfm'\n\nconst doc = fs.readFileSync('example.md')\n\nconsole.log(micromark(doc, {extensions: [gfm()], htmlExtensions: [gfmHtml]}))\n```\n\n<details>\n<summary>Show equivalent HTML</summary>\n\n```html\n<h1>GFM</h1>\n<h2>Autolink literals</h2>\n<p><a href=\"http://www.example.com\">www.example.com</a>, <a href=\"https://example.com\">https://example.com</a>, and <a href=\"mailto:contact@example.com\">contact@example.com</a>.</p>\n<h2>Strikethrough</h2>\n<p><del>one</del> or <del>two</del> tildes.</p>\n<h2>Table</h2>\n<table>\n<thead>\n<tr>\n<th>a</th>\n<th align=\"left\">b</th>\n<th align=\"right\">c</th>\n<th align=\"center\">d</th>\n</tr>\n</thead>\n</table>\n<h2>Tasklist</h2>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> to do</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> done</li>\n</ul>\n```\n\n</details>\n\n### Math\n\nTo support math use [`micromark-extension-math`][math].\nSay we have a file like this:\n\n```markdown\nLift($L$) can be determined by Lift Coefficient ($C_L$) like the following equation.\n\n$$\nL = \\frac{1}{2} \\rho v^2 S C_L\n$$\n```\n\nThen do something like this:\n\n```js\nimport fs from 'node:fs'\nimport {micromark} from 'micromark'\nimport {math, mathHtml} from 'micromark-extension-math'\n\nconst doc = fs.readFileSync('example.md')\n\nconsole.log(micromark(doc, {extensions: [math], htmlExtensions: [mathHtml()]}))\n```\n\n<details>\n<summary>Show equivalent HTML</summary>\n\n```html\n<p>Lift(<span class=\"math math-inline\"><span class=\"katex\">…</span></span>) can be determined by Lift Coefficient (<span class=\"math math-inline\"><span class=\"katex\">…</span></span>) like the following equation.</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\">…</span></span></div>\n```\n\n</details>\n\n### Footnotes\n\nTo support footnotes use [`micromark-extension-footnote`][footnotes].\nSay we have a file like this:\n\n```markdown\nHere is a footnote call,[^1] and another.[^longnote]\n\n[^1]: Here is the footnote.\n\n[^longnote]: Here’s one with multiple blocks.\n\n    Subsequent paragraphs are indented to show that they\nbelong to the previous footnote.\n\n        { some.code }\n\n    The whole paragraph can be indented, or just the first\n    line.  In this way, multi-paragraph footnotes work like\n    multi-paragraph list items.\n\nThis paragraph won’t be part of the note, because it\nisn’t indented.\n\nHere is an inline note.^[Inlines notes are easier to write, since\nyou don’t have to pick an identifier and move down to type the\nnote.]\n```\n\nThen do something like this:\n\n```js\nimport fs from 'node:fs'\nimport {micromark} from 'micromark'\nimport {footnote, footnoteHtml} from 'micromark-extension-footnote'\n\nconst doc = fs.readFileSync('example.md')\n\nconsole.log(\n  micromark(doc, {extensions: [footnote], htmlExtensions: [footnoteHtml()]})\n)\n```\n\n<details>\n<summary>Show equivalent HTML</summary>\n\n```html\n<p>Here is a footnote call,<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\"><sup>1</sup></a> and another.<a href=\"#fn2\" class=\"footnote-ref\" id=\"fnref2\"><sup>2</sup></a></p>\n<p>This paragraph won’t be part of the note, because it\nisn’t indented.</p>\n<p>Here is an inline note.<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\"><sup>1</sup></a></p>\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn1\">\n<p>Here is the footnote.<a href=\"#fnref1\" class=\"footnote-back\">↩︎</a></p>\n</li>\n<li id=\"fn2\">\n<p>Here’s one with multiple blocks.</p>\n<p>Subsequent paragraphs are indented to show that they\nbelong to the previous footnote.</p>\n<pre><code>{ some.code }\n</code></pre>\n<p>The whole paragraph can be indented, or just the first\nline.  In this way, multi-paragraph footnotes work like\nmulti-paragraph list items.<a href=\"#fnref2\" class=\"footnote-back\">↩︎</a></p>\n</li>\n<li id=\"fn3\">\n<p>Inlines notes are easier to write, since\nyou don’t have to pick an identifier and move down to type the\nnote.<a href=\"#fnref3\" class=\"footnote-back\">↩︎</a></p>\n</li>\n</ol>\n</div>\n```\n\n</details>\n\n### Syntax tree\n\nA higher level project, [`mdast-util-from-markdown`][from-markdown], can give\nyou an AST.\n\n```js\nimport fromMarkdown from 'mdast-util-from-markdown' // This wraps micromark.\n\nconst result = fromMarkdown('## Hello, *world*!')\n\nconsole.log(result.children[0])\n```\n\nYields:\n\n```js\n{\n  type: 'heading',\n  depth: 2,\n  children: [\n    {type: 'text', value: 'Hello, ', position: [Object]},\n    {type: 'emphasis', children: [Array], position: [Object]},\n    {type: 'text', value: '!', position: [Object]}\n  ],\n  position: {\n    start: {line: 1, column: 1, offset: 0},\n    end: {line: 1, column: 19, offset: 18}\n  }\n}\n```\n\nAnother level up is [**remark**][remark], which provides a nice interface and\nhundreds of plugins.\n\n## Markdown\n\n### CommonMark\n\nThe first definition of “Markdown” gave several examples of how it worked,\nshowing input Markdown and output HTML, and came with a reference implementation\n(`Markdown.pl`).\nWhen new implementations followed, they mostly followed the first definition,\nbut deviated from the first implementation, and added extensions, thus making\nthe format a family of formats.\n\nSome years later, an attempt was made to standardize the differences between\nimplementations, by specifying how several edge cases should be handled, through\nmore input and output examples.\nThis is known as [CommonMark][commonmark-spec], and many implementations now\nwork towards some degree of CommonMark compliancy.\nStill, CommonMark describes what the output in HTML should be given some\ninput, which leaves many edge cases up for debate, and does not answer what\nshould happen for other output formats.\n\nmicromark passes all tests from CommonMark and has many more tests to match the\nCommonMark reference parsers.\nFinally, it comes with [CMSM][], which describes how to parse markup, instead\nof documenting input and output examples.\n\n### Grammar\n\nThe syntax of markdown can be described in Backus–Naur form (BNF) as:\n\n```bnf\nmarkdown = .*\n```\n\nNo, that’s [not a typo](http://trevorjim.com/a-specification-for-markdown/):\nmarkdown has no syntax errors; anything thrown at it renders *something*.\n\n## Project\n\n### Comparison\n\nThere are many other markdown parsers out there and maybe they’re better suited\nto your use case!\nHere is a short comparison of a couple in JavaScript.\nNote that this list is made by the folks who make `micromark` and `remark`, so\nthere is some bias.\n\n**Note**: these are, in fact, not really comparable: micromark (and remark)\nfocus on completely different things than other markdown parsers do.\nSure, you can generate HTML from markdown with them, but micromark (and remark)\nare created for (abstract or concrete) syntax trees—to inspect, transform, and\ngenerate content, so that you can make things like [MDX][], [Prettier][], or\n[Gatsby][].\n\n###### micromark\n\nmicromark can be used in two different ways.\nIt can either be used, optionally with existing extensions, to get HTML easily.\nOr, it can give tremendous power, such as access to all tokens with positional\ninfo, at the cost of being hard to get into.\nIt’s super small, pretty fast, and has 100% CommonMark compliance.\nIt has syntax extensions, such as supporting 100% GFM compliance (with\n`micromark-extension-gfm`), but they’re rather complex to write.\nIt’s the newest parser on the block, which means it’s fresh and well suited for\ncontemporary markdown needs, but it’s also battle-tested, and already the 3rd\nmost popular markdown parser in JavaScript.\n\nIf you’re looking for fine grained control, use micromark.\nIf you just want HTML from markdown, use micromark.\n\n###### remark\n\n[remark][] is the most popular markdown parser.\nIt’s built on top of `micromark` and boasts syntax trees.\nFor an analogy, it’s like if Babel, ESLint, and more, were one project.\nIt supports the syntax extensions that micromark has (so it’s 100% CM compliant\nand can be 100% GFM compliant), but most of the work is done in plugins that\ntransform or inspect the tree, and there’s *tons* of them.\nTransforming the tree is relatively easy: it’s a JSON object that can be\nmanipulated directly.\nremark is stable, widely used, and extremely powerful for handling complex data.\n\nYou probably should use [remark][].\n\n###### marked\n\n[marked][] is the oldest markdown parser on the block.\nIt’s been around for ages, is battle tested, small, popular, and has a bunch of\nextensions, but doesn’t match CommonMark or GFM, and is unsafe by default.\n\nIf you have markdown you trust and want to turn it into HTML without a fuss, and\ndon’t care about perfect compatibility with CommonMark or GFM, but do appreciate\na small bundle size and stability, use [marked][].\n\n###### markdown-it\n\n[markdown-it][] is a good, stable, and essentially CommonMark compliant markdown\nparser, with (optional) support for some GFM features as well.\nIt’s used a lot as a direct dependency in packages, but is rather big.\nIt shines at syntax extensions, where you want to support not just markdown, but\n*your* (company’s) version of markdown.\n\nIf you need a couple of custom syntax extensions to your otherwise\nCommonMark-compliant markdown, and want to get HTML out, use [markdown-it][].\n\n###### Others\n\nThere are lots of other markdown parsers!\nSome say they’re small, or fast, or that they’re CommonMark compliant—but\nthat’s not always true.\nThis list is not supposed to be exhaustive (but it’s the most relevant ones).\nThis list of markdown parsers is a snapshot in time of why (not) to use\n(alternatives to) `micromark`: they’re all good choices, depending on what your\ngoals are.\n\n### Test\n\nmicromark is tested with the \\~650 CommonMark tests and more than 1.2k extra\ntests confirmed with CM reference parsers.\nThese tests reach all branches in the code, which means that this project has\n100% code coverage.\nFinally, we use fuzz testing to ensure micromark is stable, reliable, and\nsecure.\n\nTo build, format, and test the codebase, use `$ npm test` after clone and\ninstall.\nThe `$ npm run test-api` and `$ npm run test-coverage` scripts check either the\nunit tests, or both them and their coverage, respectively.\n\nThe `$ npm run test-fuzz` script does fuzz testing for 15 minutes.\nThe timeout is provided by GNU coreutils **timeout(1)**, which might not be\navailable on your system.\nEither install `timeout` or remove that part temporarily from the script and\nmanually exit the program after a while.\n\n### Size & debug\n\nmicromark is really small.\nA ton of time went into making sure it minifies well, by the way code is written\nbut also through custom build scripts to pre-evaluate certain expressions.\nFurthermore, care went into making it compress well with gzip and brotli.\n\nNormally, you’ll use the pre-evaluated version of micromark.\nWhile developing, debugging, or testing your code, you *should* switch to use\ncode instrumented with assertions and debug messages:\n\n```sh\nnode --conditions development module.js\n```\n\nTo see debug messages, use a `DEBUG` env variable set to `micromark`:\n\n```sh\nDEBUG=\"*\" node --conditions development module.js\n```\n\n### Version\n\nmicromark adheres to [semver](https://semver.org) since 3.0.0.\n\n### Security\n\nThe typical security aspect discussed for markdown is [cross-site scripting\n(XSS)][xss] attacks.\nMarkdown itself is safe if it does not include embedded HTML or dangerous\nprotocols in links/images (such as `javascript:` or `data:`).\nmicromark makes any markdown safe by default, even if HTML is embedded or\ndangerous protocols are used, as it encodes or drops them.\nTurning on the `allowDangerousHtml` or `allowDangerousProtocol` options for\nuser-provided markdown opens you up to XSS attacks.\n\nAnother security aspect is DDoS attacks.\nFor example, an attacker could throw a 100mb file at micromark, in which case\nthe JavaScript engine will run out of memory and crash.\nIt is also possible to crash micromark with smaller payloads, notably when\nthousands of links, images, emphasis, or strong are opened but not closed.\nIt is wise to cap the accepted size of input (500kb can hold a big book) and to\nprocess content in a different thread or worker so that it can be stopped when\nneeded.\n\nUsing extensions might also be unsafe, refer to their documentation for more\ninformation.\n\nFor more information on markdown sanitation, see\n[`improper-markup-sanitization.md`][improper] by [**@chalker**][chalker].\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n### Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n### Sponsor\n\nSupport this effort and give back by sponsoring on [OpenCollective][]!\n\n<table>\n<tr valign=\"middle\">\n<td width=\"100%\" align=\"center\" colspan=\"10\">\n  <br>\n  <a href=\"https://www.salesforce.com\">Salesforce</a> 🏅<br><br>\n  <a href=\"https://www.salesforce.com\"><img src=\"https://images.opencollective.com/salesforce/ca8f997/logo/512.png\" width=\"256\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://www.gatsbyjs.org\">Gatsby</a> 🥇<br><br>\n  <a href=\"https://www.gatsbyjs.org\"><img src=\"https://avatars1.githubusercontent.com/u/12551863?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://vercel.com\">Vercel</a> 🥇<br><br>\n  <a href=\"https://vercel.com\"><img src=\"https://avatars1.githubusercontent.com/u/14985020?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://www.netlify.com\">Netlify</a><br><br>\n  <!--OC has a sharper image-->\n  <a href=\"https://www.netlify.com\"><img src=\"https://images.opencollective.com/netlify/4087de2/logo/256.png\" width=\"128\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://www.holloway.com\">Holloway</a><br><br>\n  <a href=\"https://www.holloway.com\"><img src=\"https://avatars1.githubusercontent.com/u/35904294?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://themeisle.com\">ThemeIsle</a><br><br>\n  <a href=\"https://themeisle.com\"><img src=\"https://avatars1.githubusercontent.com/u/58979018?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://boosthub.io\">Boost Hub</a><br><br>\n  <a href=\"https://boosthub.io\"><img src=\"https://images.opencollective.com/boosthub/6318083/logo/128.png\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://expo.io\">Expo</a><br><br>\n  <a href=\"https://expo.io\"><img src=\"https://avatars1.githubusercontent.com/u/12504344?s=128&v=4\" width=\"64\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n<td width=\"100%\" align=\"center\" colspan=\"10\">\n  <br>\n  <a href=\"https://opencollective.com/unified\"><strong>You?</strong></a>\n  <br><br>\n</td>\n</tr>\n</table>\n\n### Origin story\n\nOver the summer of 2018, micromark was planned, and the idea shared in August\nwith a couple of friends and potential sponsors.\nThe problem I (**[@wooorm][]**) had was that issues were piling up in remark and\nother repos, but my day job (teaching) was fun, fulfilling, and deserved time\ntoo.\nIt was getting hard to combine the two.\nThe thought was to feed two birds with one scone: fix the issues in remark with\na new markdown parser (codename marydown) while being financially supported by\nsponsors building fancy stuff on top, such as Gatsby, Contentful, and Vercel\n(ZEIT at the time).\n**[@johno][]** was making MDX on top of remark at the time (important historical\nnote: several other folks were working on JSX + markdown too).\nWe bundled our strengths: MDX was getting some traction and we thought together\nwe could perhaps make something sustainable.\n\nIn November 2018, we launched with the idea for micromark to solve all existing\nbugs, sustaining the existing hundreds of projects, and furthering the exciting\nhigh-level project MDX.\nWe pushed a single name: unified (which back then was a small but essential\npart of the chain).\nGatsby and Vercel were immediate sponsors.\nWe didn’t know whether it would work, and it worked.\nBut now you have a new problem: you are getting some financial support (much\nmore than other open source projects) but it’s not enough money for rent, and\ntoo much money to print stickers with.\nYou still have your job and issues are still piling up.\n\nAt the start of summer 2019, after a couple months of saving up donations, I\nquit my job and worked on unified through fall.\nThat got the number of open issues down significantly and set up a strong\ngovernance and maintenance system for the collective.\nBut when the time came to work on micromark, the money was gone again, so I\ncontracted through winter 2019, and in spring 2020 I could do about half open\nsource, half contracting.\nOne of the contracting gigs was to write a new MDX parser, for which I also\ndocumented how to do that with a state machine [in prose][mdx-cmsm].\nThat gave me the insight into how the same could be done for markdown: I drafted\n[CMSM][], which was some of the core ideas for micromark, but in prose.\n\nIn May 2020, Salesforce reached out: they saw the bugs in remark, how micromark\ncould help, and the initial work on CMSM.\nAnd they had thousands of Markdown files.\nIn a for open source uncharacteristic move, they decided to fund my work on\nmicromark.\nA large part of what maintaining open source means, is putting out fires,\ntriaging issues, and making sure users and sponsors are happy, so it was\namazing to get several months to just focus and make something new.\nI remember feeling that this project would probably be the hardest thing I’d\nwork on: yeah, parsers are pretty difficult, but markdown is on another level.\nMarkdown is such a giant stack of edge cases on edge cases on even more\nweirdness, what a mess.\nOn August 20, 2020, I released [2.0.0][200], the first working version of\nmicromark.\nAnd it’s hard to describe how that moment felt.\nIt was great.\n\n### License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark.svg\n\n[downloads]: https://www.npmjs.com/package/micromark\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n\n[cheat]: https://commonmark.org/help/\n\n[twitter]: https://twitter.com/unifiedjs\n\n[remark]: https://github.com/remarkjs/remark\n\n[rehype]: https://github.com/rehypejs/rehype\n\n[site]: https://unifiedjs.com\n\n[contribute]: #contribute\n\n[encoding]: https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings\n\n[buffer]: https://nodejs.org/api/buffer.html\n\n[commonmark-spec]: https://commonmark.org\n\n[popular]: https://www.npmtrends.com/remark-parse-vs-marked-vs-markdown-it\n\n[remark-parse]: https://unifiedjs.com/explore/package/remark-parse/\n\n[improper]: https://github.com/ChALkeR/notes/blob/master/Improper-markup-sanitization.md\n\n[chalker]: https://github.com/ChALkeR\n\n[cmsm]: https://github.com/micromark/common-markup-state-machine\n\n[mdx-cmsm]: https://github.com/micromark/mdx-state-machine\n\n[from-markdown]: https://github.com/syntax-tree/mdast-util-from-markdown\n\n[to-markdown]: https://github.com/syntax-tree/mdast-util-to-markdown\n\n[directives]: https://github.com/micromark/micromark-extension-directive\n\n[footnotes]: https://github.com/micromark/micromark-extension-footnote\n\n[frontmatter]: https://github.com/micromark/micromark-extension-frontmatter\n\n[gfm]: https://github.com/micromark/micromark-extension-gfm\n\n[math]: https://github.com/micromark/micromark-extension-math\n\n[mdxjs]: https://github.com/micromark/micromark-extension-mdxjs\n\n[constructs]: /packages/micromark/dev/lib/constructs.js\n\n[comparison]: #comparison\n\n[extensions]: #list-of-extensions\n\n[syntax-extension]: #syntaxextension\n\n[html-extension]: #htmlextension\n\n[option-extensions]: #optionsextensions\n\n[option-htmlextensions]: #optionshtmlextensions\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[utilities]: https://github.com/syntax-tree/mdast#list-of-utilities\n\n[unified]: https://github.com/unifiedjs/unified\n\n[remark plugins]: https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins\n\n[rehype plugins]: https://github.com/rehypejs/rehype/blob/main/doc/plugins.md#list-of-plugins\n\n[directive-proposal]: https://talk.commonmark.org/t/generic-directives-plugins-syntax/444\n\n[architecture]: #architecture\n\n[extending-markdown]: #extending-markdown\n\n[create-extension]: #creating-a-micromark-extension\n\n[mdx-expression]: https://github.com/micromark/micromark-extension-mdx-expression\n\n[preprocess]: #preprocess\n\n[content-types]: https://github.com/micromark/micromark#content-types\n\n[postprocess]: https://github.com/micromark/micromark#postprocess\n\n[size-debug]: https://github.com/micromark/micromark#size--debug\n\n[packages]: https://github.com/micromark/micromark/tree/main/packages\n\n[marked]: https://github.com/markedjs/marked\n\n[markdown-it]: https://github.com/markdown-it/markdown-it\n\n[mdx]: https://github.com/mdx-js/mdx\n\n[prettier]: https://github.com/prettier/prettier\n\n[gatsby]: https://github.com/gatsbyjs/gatsby\n\n[commonmark]: #commonmark\n\n[size]: #size--debug\n\n[test]: #test\n\n[security]: #security\n\n[sponsor]: #sponsor\n\n[@wooorm]: https://github.com/wooorm\n\n[@johno]: https://github.com/johno\n\n[200]: https://github.com/micromark/micromark/releases/tag/2.0.0\n","readmeFilename":"readme.md","homepage":"https://github.com/micromark/micromark/tree/main#readme","_id":"micromark@3.0.0-alpha.2","_nodeVersion":"16.2.0","_npmVersion":"7.15.1","dist":{"integrity":"sha512-8M70YH/3A9asszVJO6mYe9RqVRuwvPO2Mgm5RplYDumGOWePlFTkexcZkZyrCGnDOA6KEmQJi6Y9HB+ET19wkw==","shasum":"e226c8046d4bc7e8ec065afedd7331ea44777b4b","tarball":"https://registry.npmjs.org/micromark/-/micromark-3.0.0-alpha.2.tgz","fileCount":48,"unpackedSize":160471,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgviCaCRA9TVsSAnZWagAA/I8P/0knP/0+Lg42kU5oepis\nXeE0Ga1mKrMdQ2r+g6RefMBhH65HrS5zP2vf/rlKWtnoFkbFH7zhqx80fvzL\nALvilKexaNnce0efYm3+mmE0SCkk8AfEQBzlMfLlHums8/TsbmwciufafDCK\nQd12y1nJC5LSnekgLS//lH04Kq5JjMUjdoQNvtKyhu5ESk1P5BoOJHQHI8lM\n5mjmIO6IkB9Jv+bPEVlqfdvn5U5FDeBnv/HL5CzXJVbSp5sCquYwIPXSF4z/\n+e4Ht19WLwfASxJ4gkTLid3yKEvc+Ry4EigNgjIYrhoOcZZY71qljMfpl6rJ\nSyF21BazYUu8OT3C+ayM8tVdEw9CgMDoRDc/tWlbpZ9DodkWvT+1/yjAKnun\ntwcC+16Vfae7dpCzydg2w6lMXZ+1zFK5BcOeshpeOGSKyZBuOM5XS/p7mDdB\nyF01bbBlMXBhyZk0nHrnnncygp5XarRVBk1Y9DJjzd+r4FO8G1fx4DI1FnlK\nra66kGtg5CNTSM83i2JNvIj5IPol4dq2bNwgeDWDNOJmavviHeu3npOsW6G+\nVC8qQ66vo6a5DoDNEIyTDUX1KXFFcHs1Z592/qNTIo60e8Giv6m9ED62BZIZ\ny9VzPk5xt2e4FGbjmOmgf9ZdVPOSO4ksHLZx3MoW3W0AI1ANoTRyc6JfR6QN\nzweo\r\n=oTUG\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDT665DOvosOy5s2t0f+AVuyJKlHzHOdI4HEzC6rJYc8AIhAOfPz0mjJLuM0qw1L9/qNPGzsO+OjIMKI6U29WP42WAU"}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_3.0.0-alpha.2_1623072922322_0.4748853942541631"},"_hasShrinkwrap":false},"3.0.0-alpha.3":{"name":"micromark","version":"3.0.0-alpha.3","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git#main"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"sideEffects":false,"type":"module","main":"index.js","types":"dev/index.d.ts","exports":{".":{"development":"./dev/index.js","default":"./index.js"},"./stream":{"development":"./dev/stream.js","default":"./stream.js"},"./stream.js":{"development":"./dev/stream.js","default":"./stream.js"},"./lib/compile":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/compile.js":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/parse":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/parse.js":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/postprocess":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/postprocess.js":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/preprocess":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"},"./lib/preprocess.js":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"}},"dependencies":{"@types/debug":"^4.0.0","debug":"^4.0.0","micromark-core-commonmark":"1.0.0-alpha.3","micromark-factory-space":"1.0.0-alpha.3","micromark-util-character":"1.0.0-alpha.3","micromark-util-chunked":"1.0.0-alpha.3","micromark-util-combine-extensions":"1.0.0-alpha.3","micromark-util-encode":"1.0.0-alpha.3","micromark-util-normalize-identifier":"1.0.0-alpha.3","micromark-util-resolve-all":"1.0.0-alpha.3","micromark-util-sanitize-uri":"1.0.0-alpha.3","micromark-util-subtokenize":"1.0.0-alpha.3","micromark-util-symbol":"1.0.0-alpha.3","micromark-util-types":"1.0.0-alpha.3","parse-entities":"^3.0.0"},"scripts":{"build":"rimraf \"*.d.ts\" \"{dev/,lib/}**/*.d.ts\" && tsc && micromark-build && type-coverage"},"xo":false,"typeCoverage":{"atLeast":100,"detail":true,"strict":true,"ignoreCatch":true},"readme":"<h1 align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/micromark/micromark/2e476c9/logo.svg?sanitize=true\" alt=\"micromark\" />\n</h1>\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\n> ⚠️ Note: this is the readme for the upcoming release of micromark 3.0.0.\\\n> [See here](https://github.com/micromark/micromark/tree/14d86e0) for the\n> current release.\n\nThe smallest CommonMark compliant markdown parser with positional info and\nconcrete tokens.\n\n## Feature highlights\n\n*   [x] **[compliant][commonmark]** (100% to CommonMark)\n*   [x] **[extensions][]** ([GFM][], [directives][], [footnotes][],\n    [frontmatter][], [math][], [MDX.js][mdxjs])\n*   [x] **[safe][security]** (by default)\n*   [x] **[small][size]** (smallest CM parser that exists)\n*   [x] **[robust][test]** (1800+ tests, 100% coverage, fuzz testing)\n\n## When to use this\n\n*   If you *just* want to turn markdown into HTML (w/ maybe a few extensions)\n*   If you want to do *really complex things* with markdown\n\nSee [§ Comparison][comparison] for more info\n\n## Intro\n\nmicromark is a long awaited markdown parser.\nIt uses a [state machine][cmsm] to parse the entirety of markdown into concrete\ntokens.\nIt’s the smallest 100% [CommonMark][] compliant markdown parser in JavaScript.\nIt was made to replace the internals of [`remark-parse`][remark-parse], the most\n[popular][] markdown parser.\nIts API compiles to HTML, but its parts are made to be used separately, so as to\ngenerate syntax trees ([`mdast-util-from-markdown`][from-markdown]) or compile\nto other output formats.\n\n*   to learn markdown, see this [cheatsheet and tutorial][cheat]\n*   for more about us, see [`unifiedjs.com`][site]\n*   for updates, see [Twitter][]\n*   for questions, see [Discussions][chat]\n*   to help, see [contribute][] or [sponsor][] below\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`micromark(value[, encoding][, options])`](#micromarkvalue-encoding-options)\n    *   [`stream(options?)`](#streamoptions)\n*   [Extensions](#extensions)\n    *   [List of extensions](#list-of-extensions)\n    *   [`SyntaxExtension`](#syntaxextension)\n    *   [`HtmlExtension`](#htmlextension)\n    *   [Extending markdown](#extending-markdown)\n    *   [Creating a micromark extension](#creating-a-micromark-extension)\n*   [Architecture](#architecture)\n    *   [Overview](#overview)\n    *   [Preprocess](#preprocess)\n    *   [Parse](#parse)\n    *   [Postprocess](#postprocess)\n    *   [Compile](#compile)\n*   [Examples](#examples)\n    *   [GitHub flavored markdown (GFM)](#github-flavored-markdown-gfm)\n    *   [Math](#math)\n    *   [Footnotes](#footnotes)\n    *   [Syntax tree](#syntax-tree)\n*   [Markdown](#markdown)\n    *   [CommonMark](#commonmark)\n    *   [Grammar](#grammar)\n*   [Project](#project)\n    *   [Comparison](#comparison)\n    *   [Test](#test)\n    *   [Size & debug](#size--debug)\n    *   [Version](#version)\n    *   [Security](#security)\n    *   [Contribute](#contribute)\n    *   [Sponsor](#sponsor)\n    *   [Origin story](#origin-story)\n    *   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark\n```\n\n## Use\n\nTypical use (buffering):\n\n```js\nimport {micromark} from 'micromark'\n\nconsole.log(micromark('## Hello, *world*!'))\n```\n\nYields:\n\n```html\n<h2>Hello, <em>world</em>!</h2>\n```\n\nYou can pass extensions (in this case [`micromark-extension-gfm`][gfm]):\n\n```js\nimport {micromark} from 'micromark'\nimport {gfm, gfmHtml} from 'micromark-extension-gfm'\n\nconst value = '* [x] contact@example.com ~~strikethrough~~'\n\nconst result = micromark(value, {\n  extensions: [gfm()],\n  htmlExtensions: [gfmHtml]\n})\n\nconsole.log(result)\n```\n\nYields:\n\n```html\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"mailto:contact@example.com\">contact@example.com</a> <del>strikethrough</del></li>\n</ul>\n```\n\nStreaming interface:\n\n```js\nimport fs from 'fs'\nimport {stream} from 'micromark/stream'\n\nfs.createReadStream('example.md')\n  .on('error', handleError)\n  .pipe(stream())\n  .pipe(process.stdout)\n\nfunction handleError(error) {\n  // Handle your error here!\n  throw error\n}\n```\n\n## API\n\n`micromark` core has two entries in its export map: `micromark` and\n`micromark/stream`.\n\n`micromark` exports the following identifier: `micromark`.\n`micromark/stream` exports the following identifier: `stream`.\nThere are no default exports.\n\nThe export map supports the endorsed\n[`development` condition](https://nodejs.org/api/packages.html#packages_resolving_user_conditions).\nRun `node --conditions development module.js` to get instrumented dev code.\nWithout this condition, production code is loaded.\nSee [§ Size & debug][size-debug] for more info.\n\n### `micromark(value[, encoding][, options])`\n\nCompile markdown to HTML.\n\n##### Parameters\n\n###### `value`\n\nMarkdown to parse (`string` or `Buffer`).\n\n###### `encoding`\n\n[Character encoding][encoding] to understand `value` as when it’s a\n[`Buffer`][buffer] (`string`, default: `'utf8'`).\n\n###### `options.defaultLineEnding`\n\nValue to use for line endings not in `value` (`string`, default: first line\nending or `'\\n'`).\n\nGenerally, micromark copies line endings (`'\\r'`, `'\\n'`, `'\\r\\n'`) in the\nmarkdown document over to the compiled HTML.\nIn some cases, such as `> a`, CommonMark requires that extra line endings are\nadded: `<blockquote>\\n<p>a</p>\\n</blockquote>`.\n\n###### `options.allowDangerousHtml`\n\nWhether to allow embedded HTML (`boolean`, default: `false`).\nSee [§ Security][security].\n\n###### `options.allowDangerousProtocol`\n\nWhether to allow potentially dangerous protocols in links and images (`boolean`,\ndefault: `false`).\nURLs relative to the current protocol are always allowed (such as, `image.jpg`).\nFor links, the allowed protocols are `http`, `https`, `irc`, `ircs`, `mailto`,\nand `xmpp`.\nFor images, the allowed protocols are `http` and `https`.\nSee [§ Security][security].\n\n###### `options.extensions`\n\nArray of syntax extensions ([`Array.<SyntaxExtension>`][syntax-extension],\ndefault: `[]`).\nSee [§ Extensions][extensions].\n\n###### `options.htmlExtensions`\n\nArray of HTML extensions ([`Array.<HtmlExtension>`][html-extension], default:\n`[]`).\nSee [§ Extensions][extensions].\n\n##### Returns\n\n`string` — Compiled HTML.\n\n### `stream(options?)`\n\nStreaming interface of micromark.\nCompiles markdown to HTML.\n`options` are the same as the buffering API above.\nNote that some of the work to parse markdown can be done streaming, but in the\nend buffering is required.\n\nmicromark does not handle errors for you, so you must handle errors on whatever\nstreams you pipe into it.\nAs markdown does not know errors, `micromark` itself does not emit errors.\n\n## Extensions\n\nmicromark supports extensions.\nThere are two types of extensions for micromark:\n[`SyntaxExtension`][syntax-extension],\nwhich change how markdown is parsed, and [`HtmlExtension`][html-extension],\nwhich change how it compiles.\nThey can be passed in [`options.extensions`][option-extensions] or\n[`options.htmlExtensions`][option-htmlextensions], respectively.\n\nAs a user of extensions, refer to each extension’s readme for more on how to use\nthem.\nAs a (potential) author of extensions, refer to\n[§ Extending markdown][extending-markdown] and\n[§ Creating a micromark extension][create-extension].\n\n### List of extensions\n\n*   [`micromark/micromark-extension-directive`][directives]\n    — support directives (generic extensions)\n*   [`micromark/micromark-extension-footnote`][footnotes]\n    — support footnotes\n*   [`micromark/micromark-extension-frontmatter`][frontmatter]\n    — support frontmatter (YAML, TOML, etc)\n*   [`micromark/micromark-extension-gfm`][gfm]\n    — support GFM (GitHub Flavored Markdown)\n*   [`micromark/micromark-extension-gfm-autolink-literal`](https://github.com/micromark/micromark-extension-gfm-autolink-literal)\n    — support GFM autolink literals\n*   [`micromark/micromark-extension-gfm-strikethrough`](https://github.com/micromark/micromark-extension-gfm-strikethrough)\n    — support GFM strikethrough\n*   [`micromark/micromark-extension-gfm-table`](https://github.com/micromark/micromark-extension-gfm-table)\n    — support GFM tables\n*   [`micromark/micromark-extension-gfm-tagfilter`](https://github.com/micromark/micromark-extension-gfm-tagfilter)\n    — support GFM tagfilter\n*   [`micromark/micromark-extension-gfm-task-list-item`](https://github.com/micromark/micromark-extension-gfm-task-list-item)\n    — support GFM tasklists\n*   [`micromark/micromark-extension-math`][math]\n    — support math\n*   [`micromark/micromark-extension-mdx`](https://github.com/micromark/micromark-extension-mdx)\n    — support MDX\n*   [`micromark/micromark-extension-mdxjs`][mdxjs]\n    — support MDX.js\n*   [`micromark/micromark-extension-mdx-expression`](https://github.com/micromark/micromark-extension-mdx-expression)\n    — support MDX (or MDX.js) expressions\n*   [`micromark/micromark-extension-mdx-jsx`](https://github.com/micromark/micromark-extension-mdx-jsx)\n    — support MDX (or MDX.js) JSX\n*   [`micromark/micromark-extension-mdx-md`](https://github.com/micromark/micromark-extension-mdx-md)\n    — support misc MDX changes\n*   [`micromark/micromark-extension-mdxjs-esm`](https://github.com/micromark/micromark-extension-mdxjs-esm)\n    — support MDX.js import/exports\n\n### `SyntaxExtension`\n\nA syntax extension is an object whose fields are typically the names of hooks,\nreferring to where constructs “hook” into.\nThe fields at such objects are character codes, mapping to constructs as values.\n\nThe built in [constructs][] are an example.\nSee it and [existing extensions][extensions] for inspiration.\n\n### `HtmlExtension`\n\nAn HTML extension is an object whose fields are typically `enter` or `exit`\n(reflecting whether a token is entered or exited).\nThe values at such objects are names of tokens mapping to handlers.\n\nSee [existing extensions][extensions] for inspiration.\n\n### Extending markdown\n\nmicromark lets you change markdown syntax, yes, but there are alternatives.\nThe alternatives are often better.\n\nOver the years, many micromark and remark users have asked about their unique\ngoals for markdown.\nSome exemplary goals are:\n\n1.  I want to add `rel=\"nofollow\"` to external links\n2.  I want to add links from headings to themselves\n3.  I want line breaks in paragraphs to become hard breaks\n4.  I want to support embedded music sheets\n5.  I want authors to add arbitrary attributes\n6.  I want authors to mark certain blocks with meaning, such as tip, warning,\n    etc\n7.  I want to combine markdown with JS(X)\n8.  I want to support our legacy flavor of markdown-like syntax\n\nThese can be solved in different ways and which solution is best is both\nsubjective and dependant on unique needs.\nOften, there is already a solution in the form of an existing remark or rehype\nplugin.\nRespectively, their solutions are:\n\n1.  [`remark-external-links`](https://github.com/remarkjs/remark-external-links)\n2.  [`rehype-autolink-headings`](https://github.com/rehypejs/rehype-autolink-headings)\n3.  [`remark-breaks`](https://github.com/remarkjs/remark-breaks)\n4.  custom plugin similar to\n    [`rehype-katex`](https://github.com/remarkjs/remark-math/tree/main/packages/rehype-katex)\n    but integrating [`abcjs`](https://www.abcjs.net)\n5.  either [`remark-directive`](https://github.com/remarkjs/remark-directive)\n    and a custom plugin or with\n    [`rehype-attr`](https://github.com/jaywcjlove/rehype-attr)\n6.  [`remark-directive`](https://github.com/remarkjs/remark-directive)\n    combined with a custom plugin\n7.  combining the existing micromark MDX extensions however you please, such as\n    done by [`mdx-js/mdx`](https://github.com/mdx-js/mdx) or\n    [`xdm`](https://github.com/wooorm/xdm)\n8.  Writing a micromark extension\n\nLooking at these from a higher level, they can be categorized:\n\n*   **Changing the output by transforming syntax trees**\n    (1 and 2)\n\n    This category is nice as the format remains plain markdown that authors are\n    already familiar with and which will work with existing tools and platforms.\n\n    Implementations will deal with the syntax tree\n    ([`mdast`][mdast]) and the ecosystems\n    **[remark][]** and **[rehype][]**.\n    There are many existing\n    [utilities for working with that tree][utilities].\n    Many [remark plugins][] and [rehype plugins][] also exist.\n*   **Using and abusing markdown to add new meaning**\n    (3, 4, potentially 5)\n\n    This category is similar to *Changing the output by transforming syntax\n    trees*, but adds a new meaning to certain things which already have\n    semantics in markdown.\n\n    Some examples in pseudo code:\n\n    ````markdown\n    *   **A list item with the first paragraph bold**\n\n        And then more content, is turned into `<dl>` / `<dt>` / `<dd>` elements\n\n    Or, the title attributes on links or images is [overloaded](/url 'rel:nofollow')\n    with a new meaning.\n\n    ```csv\n    fenced,code,can,include,data\n    which,is,turned,into,a,graph\n    ```\n\n    ```js data can=\"be\" passed=true\n    // after the code language name\n    ```\n\n    HTML, especially comments, could be used as **markers**<!--id=\"markers\"-->\n    ````\n*   **Arbitrary extension mechanism**\n    (potentially 5; 6)\n\n    This category is nice when content should contain embedded “components”.\n    Often this means it’s required for authors to have some programming\n    experience.\n    There are three good ways to solve arbitrary extensions.\n\n    **HTML**: Markdown already has an arbitrary extension syntax.\n    It works in most places and authors are already familiar with the syntax,\n    but it’s reasonably hard to implement securely.\n    Certain platforms will remove HTML completely, others sanitize it to varying\n    degrees.\n    HTML also supports custom elements.\n    These could be used and enhanced by client side JavaScript or enhanced when\n    transforming the syntax tree.\n\n    **Generic directives**: although\n    [a proposal][directive-proposal]\n    and not supported on most platforms, directives do work with many tools\n    already.\n    They’re not the easiest to author compared to, say, a heading, but sometimes\n    that’s okay.\n    They do have potential: they nicely solve the need for an infinite number of\n    potential extensions to markdown in a single markdown-esque way.\n\n    **MDX** also adds support for components by swapping HTML out for JS(X).\n    JSX is an extension to JavaScript, so MDX is something along the lines of\n    literate programming.\n    This does require knowledge of React (or Vue) and JavaScript, excluding some\n    authors.\n*   **Extending markdown syntax**\n    (7 and 8)\n\n    Extend the syntax of markdown means:\n\n    *   Authors won’t be familiar with the syntax\n    *   Content won’t work in other places (such as on GitHub)\n    *   Defeating the purpose of markdown: being simple to author and looking\n        like what it means\n\n    …and it’s hard to do as it requires some in-depth knowledge of JavaScript\n    and parsing.\n    But it’s possible and in certain cases very powerful.\n\n### Creating a micromark extension\n\nThis section shows how to create an extension for micromark that parses\n“variables” (a way to render some data) and one to turn a default construct off.\n\n> Stuck?\n> See [`support.md`][support].\n\n#### Prerequisites\n\n*   You should possess an intermediate to high understanding of JavaScript:\n    it’s going to get a bit complex\n*   Read the readme of [unified][] (until you hit the API section) to better\n    understand where micromark fits\n*   Read the [§ Architecture][architecture] section to understand how micromark\n    works\n*   Read the [§ Extending markdown][extending-markdown] section to understand\n    whether it’s a good idea to extend the syntax of markdown\n\n#### Extension basics\n\nmicromark supports two types of extensions.\nSyntax extensions change how markdown is parsed.\nHTML extensions change how it compiles.\n\nHTML extensions are not always needed, as micromark is often used through\n[`mdast-util-from-markdown`][from-markdown] to parse to a markdown syntax tree\nSo instead of an HTML extension a `from-markdown` utility is needed.\nThen, a [`mdast-util-to-markdown`][to-markdown] utility, which is responsible\nfor serializing syntax trees to markdown, is also needed.\n\nWhen developing something for internal use only, you can pick and choose which\nparts you need.\nWhen open sourcing your extensions, it should probably contain four parts:\nsyntax extension, HTML extension, `from-markdown` utility, and a `to-markdown`\nutility.\n\nOn to our first case!\n\n#### Case: variables\n\nLet’s first outline what we want to make: render some data, similar to how\n[Liquid](https://github.com/Shopify/liquid/wiki/Liquid-for-Designers) and the\nlike work, in our markdown.\nIt could look like this:\n\n```markdown\nHello, {planet}!\n```\n\nTurned into:\n\n```html\n<p>Hello, Venus!</p>\n```\n\nAn opening curly brace, followed by one or more characters, and then a closing\nbrace.\nWe’ll then look up `planet` in some object and replace the variable with its\ncorresponding value, to get something like `Venus` out.\n\nIt looks simple enough, but with markdown there are often a couple more things\nto think about.\nFor this case, I can see the following:\n\n*   Is there a “block” version too?\n*   Are spaces allowed?\n    Line endings?\n    Should initial and final white space be ignored?\n*   Balanced nested braces?\n    Superfluous ones such as `{{planet}}` or meaningful ones such as\n    `{a {pla} net}`?\n*   Character escapes (`{pla\\}net}`) and character references\n    (`{pla&#x7d;net}`)?\n\nTo keep things as simple as possible, let’s not support a block syntax, see\nspaces as special, support line endings, or support nested braces.\nBut to learn interesting things, we *will* support character escapes and\n\\-references.\n\nNote that this particular case is already solved quite nicely by\n[`micromark-extension-mdx-expression`][mdx-expression].\nIt’s a bit more powerful and does more things, but it can be used to solve this\ncase and otherwise serve as inspiration.\n\n##### Setup\n\nCreate a new folder, enter it, and set up a new package:\n\n```sh\nmkdir example\ncd example\nnpm init -y\n```\n\nIn this example we’ll use ESM, so add `type: 'module'` to `package.json`:\n\n```diff\n@@ -2,6 +2,7 @@\n   \"name\": \"example\",\n   \"version\": \"1.0.0\",\n   \"description\": \"\",\n+  \"type\": \"module\",\n   \"main\": \"index.js\",\n   \"scripts\": {\n     \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n```\n\nAdd a markdown file, `example.md`, with the following text:\n\n```markdown\nHello, {planet}!\n\n{pla\\}net} and {pla&#x7d;net}.\n```\n\nTo check if our extension works, add an `example.js` module, with the following\ncode:\n\n```js\nimport {promises as fs} from 'node:fs'\nimport {micromark} from 'micromark'\nimport {variables} from './index.js'\n\nmain()\n\nasync function main() {\n  const buf = await fs.readFile('example.md')\n  const out = micromark(buf, {extensions: [variables]})\n  console.log(out)\n}\n```\n\nWhile working on the extension, run `node example` to see whether things work.\nFeel free to add more examples of the variables syntax in `example.md` if\nneeded.\n\nOur extension doesn’t work yet, for one because `micromark` is not installed:\n\n```sh\nnpm install micromark --save-dev\n```\n\n…and we need to write our extension.\nLet’s do that in `index.js`:\n\n```js\nexport const variables = {}\n```\n\nAlthough our extension doesn’t do anything, running `node example` now somewhat\nworks!\n\n##### Syntax extension\n\nMuch in micromark is based on character codes (see [§ Preprocess][preprocess]).\nFor this extension, the relevant codes are:\n\n*   `-5`\n    — M-0005 CARRIAGE RETURN (CR)\n*   `-4`\n    — M-0004 LINE FEED (LF)\n*   `-3`\n    — M-0003 CARRIAGE RETURN LINE FEED (CRLF)\n*   `null`\n    — EOF (end of the stream)\n*   `92`\n    — U+005C BACKSLASH (`\\`)\n*   `123`\n    — U+007B LEFT CURLY BRACE (`{`)\n*   `125`\n    — U+007D RIGHT CURLY BRACE (`}`)\n\nAlso relevant are the content types (see [§ Content types][content-types]).\nThis extension is a *text* construct, as it’s parsed alongsides links and such.\nThe content inside it (between the braces) is *string*, to support character\nescapes and -references.\n\nLet’s write our extension.\nAdd the following code to `index.js`:\n\n```js\nconst variableConstruct = {name: 'variable', tokenize: variableTokenize}\n\nexport const variables = {text: {123: variableConstruct}}\n\nfunction variableTokenize(effects, ok, nok) {\n  return start\n\n  function start(code) {\n    console.log('start:', effects, code);\n    return nok(code)\n  }\n}\n```\n\nThe above code exports an extension with the identifier `variables`.\nThe extension defines a *text* construct for the character code `123`.\nThe construct has a `name`, so that it can be turned off (optional, see next\ncase), and it has a `tokenize` function that sets up a state machine, which\nreceives `effects` and the `ok` and `nok` states.\n`ok` can be used when successful, `nok` when not, and so constructs are a bit\nsimilar to how promises can *resolve* or *reject*.\n`tokenize` returns the initial state, `start`, which itself receives the current\ncharacter code, prints some debugging information, and then returns a call\nto `nok`.\n\nEnsure that things work by running `node example` and see what it prints.\n\nNow we need to define our states and figure out how variables work.\nSome people prefer sketching a diagram of the flow.\nI often prefer writing it down in pseudo-code prose.\nI’ve also found that test driven development works well, where I write unit\ntests for how it should work, then write the state machine, and finally use a\ncode coverage tool to ensure I’ve thought of everything.\n\nIn prose, what we have to code looks like this:\n\n*   **start**:\n    Receive `123` as `code`, enter a token for the whole (let’s call it\n    `variable`), enter a token for the marker (`variableMarker`), consume\n    `code`, exit the marker token, enter a token for the contents\n    (`variableString`), switch to *begin*\n*   **begin**:\n    If `code` is `125`, reconsume in *nok*.\n    Else, reconsume in *inside*\n*   **inside**:\n    If `code` is `-5`, `-4`, `-3`, or `null`, reconsume in `nok`.\n    Else, if `code` is `125`, exit the string token, enter a `variableMarker`,\n    consume `code`, exit the marker token, exit the variable token, and switch\n    to *ok*.\n    Else, consume, and remain in *inside*.\n\nThat should be it!\nReplace `variableTokenize` with the following to include the needed states:\n\n```js\nfunction variableTokenize(effects, ok, nok) {\n  return start\n\n  function start(code) {\n    effects.enter('variable')\n    effects.enter('variableMarker')\n    effects.consume(code)\n    effects.exit('variableMarker')\n    effects.enter('variableString')\n    return begin\n  }\n\n  function begin(code) {\n    return code === 125 ? nok(code) : inside(code)\n  }\n\n  function inside(code) {\n    if (code === -5 || code === -4 || code === -3 || code === null) {\n      return nok(code)\n    }\n\n    if (code === 125) {\n      effects.exit('variableString')\n      effects.enter('variableMarker')\n      effects.consume(code)\n      effects.exit('variableMarker')\n      effects.exit('variable')\n      return ok\n    }\n\n    effects.consume(code)\n    return inside\n  }\n}\n```\n\nRun `node example` again and see what it prints!\nThe HTML compiler ignores things it doesn’t know, so variables are now removed.\n\nWe have our first syntax extension, and it sort of works, but we don’t handle\ncharacter escapes and -references yet.\nWe need to do two things to make that work:\na) skip over `\\\\` and `\\}` in our algorithm,\nb) tell micromark to parse them.\n\nChange the code in `index.js` to support escapes like so:\n\n```diff\n@@ -23,6 +23,11 @@ function variableTokenize(effects, ok, nok) {\n       return nok(code)\n     }\n\n+    if (code === 92) {\n+      effects.consume(code)\n+      return insideEscape\n+    }\n+\n     if (code === 125) {\n       effects.exit('variableString')\n       effects.enter('variableMarker')\n@@ -35,4 +40,13 @@ function variableTokenize(effects, ok, nok) {\n     effects.consume(code)\n     return inside\n   }\n+\n+  function insideEscape(code) {\n+    if (code === 92 || code === 125) {\n+      effects.consume(code)\n+      return inside\n+    }\n+\n+    return inside(code)\n+  }\n }\n```\n\nFinally add support for character references and character escapes between\nbraces by adding a special token that defines a content type:\n\n```diff\n@@ -11,6 +11,7 @@ function variableTokenize(effects, ok, nok) {\n     effects.consume(code)\n     effects.exit('variableMarker')\n     effects.enter('variableString')\n+    effects.enter('chunkString', {contentType: 'string'})\n     return begin\n   }\n\n@@ -29,6 +30,7 @@ function variableTokenize(effects, ok, nok) {\n     }\n\n     if (code === 125) {\n+      effects.exit('chunkString')\n       effects.exit('variableString')\n       effects.enter('variableMarker')\n       effects.consume(code)\n```\n\nTokens with a `contentType` will be replaced by *postprocess* (see\n[§ Postprocess][postprocess]) by the tokens belonging to that content type.\n\n##### HTML extension\n\nUp next is an HTML extension to replace variables with data.\nChange `example.js` to use one like so:\n\n```diff\n@@ -1,11 +1,12 @@\n import {promises as fs} from 'node:fs'\n import {micromark} from 'micromark'\n-import {variables} from './index.js'\n+import {variables, variablesHtml} from './index.js'\n\n main()\n\n async function main() {\n   const buf = await fs.readFile('example.md')\n-  const out = micromark(buf, {extensions: [variables]})\n+  const html = variablesHtml({planet: '1', 'pla}net': '2'})\n+  const out = micromark(buf, {extensions: [variables], htmlExtensions: [html]})\n   console.log(out)\n }\n```\n\nAnd add the HTML extension, `variablesHtml`, to `index.js` like so:\n\n```diff\n@@ -52,3 +52,19 @@ function variableTokenize(effects, ok, nok) {\n     return inside(code)\n   }\n }\n+\n+export function variablesHtml(data = {}) {\n+  return {\n+    enter: {variableString: enterVariableString},\n+    exit: {variableString: exitVariableString},\n+  }\n+\n+  function enterVariableString() {\n+    this.buffer()\n+  }\n+\n+  function exitVariableString() {\n+    var id = this.resume()\n+    if (id in data) {\n+      this.raw(this.encode(data[id]))\n+    }\n+  }\n+}\n```\n\n`variablesHtml` is a function that receives an object mapping “variables” to\nstrings and returns an HTML extension.\nThe extension hooks two functions to `variableString`, one when it starts,\nthe other when it ends.\nWe don’t need to do anything to handle the other tokens as they’re already\nignored by default.\n`enterVariableString` calls `buffer`, which is a function that “stashes” what\nwould otherwise be emitted.\n`exitVariableString` calls `resume`, which is the inverse of `buffer` and\nreturns the stashed value.\nIf the variable is defined, we ensure it’s made safe (with `this.encode`) and\nfinally output that (with `this.raw`).\n\n##### Further exercises\n\nIt works!\nWe’re done!\nOf course, it can be better, such as with the following potential features:\n\n*   Add support for empty variables\n*   Add support for spaces between markers and string\n*   Add support for line endings in variables\n*   Add support for nested braces\n*   Add support for blocks\n*   Add warnings on undefined variables\n*   Use `micromark-build`, and use `assert`, `debug`, and\n    `micromark-util-symbol` (see [§ Size & debug][size-debug])\n*   Add [`mdast-util-from-markdown`][from-markdown] and\n    [`mdast-util-to-markdown`][to-markdown] utilities to parse and serialize the\n    AST\n\n#### Case: turn off constructs\n\nSometimes it’s needed to turn a default construct off.\nThat’s possible through a syntax extension.\nNote that not everything can be turned off (such as paragraphs) and even if it’s\npossible to turn something off, it could break micromark (such as character\nescapes).\n\nTo disable constructs, refer to them by name in an array at the `disable.null`\nfield of an extension:\n\n```js\nimport {micromark} from 'micromark'\n\nconst extension = {disable: {null: ['codeIndented']}}\n\nconsole.log(micromark('\\ta', {extensions: [extension]}))\n```\n\nYields:\n\n```html\n<p>a</p>\n```\n\n## Architecture\n\nmicromark is maintained as a monorepo.\nMany of its internals, which are used in `micromark` (core) but also useful for\ndevelopers of extensions or integrations, are available as separate modules.\nEach module maintained here is available in [`packages/`][packages].\n\n### Overview\n\nThe naming scheme in [`packages/`][packages] is as follows:\n\n*   `micromark-build`\n    — Small CLI to build dev code into production code\n*   `micromark-core-commonmark`\n    — CommonMark constructs used in micromark\n*   `micromark-factory-*`\n    — Reusable subroutines used to parse parts of constructs\n*   `micromark-util-*`\n    — Reusable helpers often needed when parsing markdown\n*   `micromark`\n    — Core module\n\nmicromark has two interfaces: buffering (maintained in\n[`micromark/dev/index.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/index.js))\nand streaming (maintained in\n[`micromark/dev/stream.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/stream.js)).\nThe first takes all input at once whereas the last uses a Node.js stream to take\ninput separately.\nThey thinly wrap how data flows through micromark:\n\n```txt\n                                            micromark\n+-----------------------------------------------------------------------------------------------+\n|            +------------+         +-------+         +-------------+         +---------+       |\n| -markdown->+ preprocess +-chunks->+ parse +-events->+ postprocess +-events->+ compile +-html- |\n|            +------------+         +-------+         +-------------+         +---------+       |\n+-----------------------------------------------------------------------------------------------+\n```\n\n### Preprocess\n\nThe **preprocessor**\n([`micromark/dev/lib/preprocess.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/lib/preprocess.js))\ntakes markdown and turns it into chunks.\n\nA **chunk** is either a character code or a slice of a buffer in the form of a\nstring.\nChunks are used because strings are more efficient storage than character codes,\nbut limited in what they can represent.\nFor example, the input `ab\\ncd` is represented as `['ab', -4, 'cd']` in chunks.\n\nA character **code** is often the same as what `String#charCodeAt()` yields but\nmicromark adds meaning to certain other values.\n\nIn micromark, the actual character U+0009 CHARACTER TABULATION (HT) is replaced\nby one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL SPACE (VS)\ncharacters, depending on the column at which the tab occurred.\nFor example, the input `\\ta` is represented as `[-2, -1, -1, -1, 97]` and `a\\tb`\nas `[97, -2, -1, -1, 98]` in character codes.\n\nThe characters U+000A LINE FEED (LF) and U+000D CARRIAGE RETURN (CR) are\nreplaced by virtual characters depending on whether they occur together: M-0003\nCARRIAGE RETURN LINE FEED (CRLF), M-0004 LINE FEED (LF), and M-0005 CARRIAGE\nRETURN (CR).\nFor example, the input `a\\r\\nb\\nc\\rd` is represented as\n`[97, -5, 98, -4, 99, -3, 100]` in character codes.\n\nThe `0` (U+0000 NUL) character code is replaced by U+FFFD REPLACEMENT CHARACTER\n(`�`).\n\nThe `null` code represents the end of the input stream (called *eof* for end of\nfile).\n\n### Parse\n\nThe **parser**\n([`micromark/dev/lib/parse.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/lib/parse.js))\ntakes chunks and turns them into events.\n\nAn **event** is the start or end of a token amongst other events.\nTokens can “contain” other tokens, even though they are stored in a flat list,\nby entering before and exiting after them.\n\nA **token** is a span of one or more codes.\nTokens are most of what micromark produces: the built in HTML compiler or other\ntools can turn them into different things.\nTokens are essentially names attached to a slice, such as `lineEndingBlank` for\ncertain line endings, or `codeFenced` for a whole fenced code.\n\nSometimes, more info is attached to tokens, such as `_open` and `_close` by\n`attention` (strong, emphasis) to signal whether the sequence can open or close\nan attention run.\nThese fields have to do with how the parser works, which is complex and not\nalways pretty.\n\nCertain fields (`previous`, `next`, and `contentType`) are used in many cases:\nlinked tokens for subcontent.\nLinked tokens are used because outer constructs are parsed first.\nTake for example:\n\n```markdown\n- *a\n  b*.\n```\n\n1.  The list marker and the space after it is parsed first\n2.  The rest of the line is a `chunkFlow` token\n3.  The two spaces on the second line are a `linePrefix` of the list\n4.  The rest of the line is another `chunkFlow` token\n\nThe two `chunkFlow` tokens are linked together and the chunks they span are\npassed through the flow tokenizer.\nThere the chunks are seen as `chunkContent` and passed through the content\ntokenizer.\nThere the chunks are seen as a paragraph and seen as `chunkText` and passed\nthrough the text tokenizer.\nFinally, the attention (emphasis) and data (“raw” characters) is parsed there,\nand we’re done!\n\n#### Content types\n\nThe parser starts out with a document tokenizer.\n*Document* is the top-most content type, which includes containers such as block\nquotes and lists.\nContainers in markdown come from the margin and include more constructs\non the lines that define them.\n\n*Flow* represents the sections (block constructs such as ATX and setext\nheadings, HTML, indented and fenced code, thematic breaks), which like\n*document* are also parsed per line.\nAn example is HTML, which has a certain starting condition (such as `<script>`\non its own line), then continues for a while, until an end condition is found\n(such as `</style>`).\nIf that line with an end condition is never found, that flow goes until the end.\n\n*Content* is zero or more definitions, and then zero or one paragraph.\nIt’s a weird one, and needed to make certain edge cases around definitions spec\ncompliant.\nDefinitions are unlike other things in markdown, in that they behave like *text*\nin that they can contain arbitrary line endings, but *have* to end at a line\nending.\nIf they end in something else, the whole definition instead is seen as a\nparagraph.\n\nThe content in markdown first needs to be parsed up to this level to figure out\nwhich things are defined, for the whole document, before continuing on with\n*text*, as whether a link or image reference forms or not depends on whether\nit’s defined.\nThis unfortunately prevents a true streaming markdown parser.\n\n*Text* contains phrasing content (rich inline text: autolinks, character escapes\nand -references, code, hard breaks, HTML, images, links, emphasis, strong).\n\n*String* is a limited *text*-like content type which only allows character\nreferences and character escapes.\nIt exists in things such as identifiers (media references, definitions),\ntitles, or URLs and such.\n\n#### Constructs\n\nConstructs are the things that make up markdown.\nSome examples are lists, thematic breaks, or character references.\n\nNote that, as a general rule of thumb, markdown is *really weird*.\nIt’s essentially made up of edge cases rather than logical rules.\nWhen browsing the built in constructs, or venturing to build your own, you’ll\nfind confusing new things and run into complex custom hooks.\n\nOne more reasonable construct is the thematic break\n([see code](https://github.com/micromark/micromark/blob/main/packages/micromark-core-commonmark/dev/lib/thematic-break.js)).\nIt’s an object that defines a `name` and a `tokenize` function.\nMost of what constructs do is defined in their required `tokenize` function,\nwhich sets up a state machine to handle character codes streaming in.\n\n### Postprocess\n\nThe **postprocessor**\n([`micromark/dev/lib/postprocess.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/lib/postprocess.js))\nis a small step that takes events, ensures all their\nnested content is parsed, and returns the modified events.\n\n### Compile\n\nThe **compiler**\n([`micromark/dev/lib/compile.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/lib/compile.js))\ntakes events and turns them into HTML.\nWhile micromark was created mostly to advance markdown parsing irrespective of\ncompiling to HTML, the common case of doing so is built in.\nA built in HTML compiler is useful because it allows us to check for compliancy\nto CommonMark, the de facto norm of markdown, specified in roughly 650\ninput/output cases.\nThe parsing parts can still be used separately to build ASTs, CSTs, or many\nother output formats.\n\nThe compiler has an interface that accepts lists of events instead of the whole\nat once, but because markdown can’t truly stream, events are buffered before\ncompiling and outputting the final result.\n\n## Examples\n\n### GitHub flavored markdown (GFM)\n\nTo support GFM (autolink literals, strikethrough, tables, and tasklists) use\n[`micromark-extension-gfm`][gfm].\nSay we have a file like this:\n\n```markdown\n# GFM\n\n## Autolink literals\n\nwww.example.com, https://example.com, and contact@example.com.\n\n## Strikethrough\n\n~one~ or ~~two~~ tildes.\n\n## Table\n\n| a | b  |  c |  d  |\n| - | :- | -: | :-: |\n\n## Tasklist\n\n* [ ] to do\n* [x] done\n```\n\nThen do something like this:\n\n```js\nimport fs from 'node:fs'\nimport {micromark} from 'micromark'\nimport {gfm, gfmHtml} from 'micromark-extension-gfm'\n\nconst doc = fs.readFileSync('example.md')\n\nconsole.log(micromark(doc, {extensions: [gfm()], htmlExtensions: [gfmHtml]}))\n```\n\n<details>\n<summary>Show equivalent HTML</summary>\n\n```html\n<h1>GFM</h1>\n<h2>Autolink literals</h2>\n<p><a href=\"http://www.example.com\">www.example.com</a>, <a href=\"https://example.com\">https://example.com</a>, and <a href=\"mailto:contact@example.com\">contact@example.com</a>.</p>\n<h2>Strikethrough</h2>\n<p><del>one</del> or <del>two</del> tildes.</p>\n<h2>Table</h2>\n<table>\n<thead>\n<tr>\n<th>a</th>\n<th align=\"left\">b</th>\n<th align=\"right\">c</th>\n<th align=\"center\">d</th>\n</tr>\n</thead>\n</table>\n<h2>Tasklist</h2>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> to do</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> done</li>\n</ul>\n```\n\n</details>\n\n### Math\n\nTo support math use [`micromark-extension-math`][math].\nSay we have a file like this:\n\n```markdown\nLift($L$) can be determined by Lift Coefficient ($C_L$) like the following equation.\n\n$$\nL = \\frac{1}{2} \\rho v^2 S C_L\n$$\n```\n\nThen do something like this:\n\n```js\nimport fs from 'node:fs'\nimport {micromark} from 'micromark'\nimport {math, mathHtml} from 'micromark-extension-math'\n\nconst doc = fs.readFileSync('example.md')\n\nconsole.log(micromark(doc, {extensions: [math], htmlExtensions: [mathHtml()]}))\n```\n\n<details>\n<summary>Show equivalent HTML</summary>\n\n```html\n<p>Lift(<span class=\"math math-inline\"><span class=\"katex\">…</span></span>) can be determined by Lift Coefficient (<span class=\"math math-inline\"><span class=\"katex\">…</span></span>) like the following equation.</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\">…</span></span></div>\n```\n\n</details>\n\n### Footnotes\n\nTo support footnotes use [`micromark-extension-footnote`][footnotes].\nSay we have a file like this:\n\n```markdown\nHere is a footnote call,[^1] and another.[^longnote]\n\n[^1]: Here is the footnote.\n\n[^longnote]: Here’s one with multiple blocks.\n\n    Subsequent paragraphs are indented to show that they\nbelong to the previous footnote.\n\n        { some.code }\n\n    The whole paragraph can be indented, or just the first\n    line.  In this way, multi-paragraph footnotes work like\n    multi-paragraph list items.\n\nThis paragraph won’t be part of the note, because it\nisn’t indented.\n\nHere is an inline note.^[Inlines notes are easier to write, since\nyou don’t have to pick an identifier and move down to type the\nnote.]\n```\n\nThen do something like this:\n\n```js\nimport fs from 'node:fs'\nimport {micromark} from 'micromark'\nimport {footnote, footnoteHtml} from 'micromark-extension-footnote'\n\nconst doc = fs.readFileSync('example.md')\n\nconsole.log(\n  micromark(doc, {extensions: [footnote], htmlExtensions: [footnoteHtml()]})\n)\n```\n\n<details>\n<summary>Show equivalent HTML</summary>\n\n```html\n<p>Here is a footnote call,<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\"><sup>1</sup></a> and another.<a href=\"#fn2\" class=\"footnote-ref\" id=\"fnref2\"><sup>2</sup></a></p>\n<p>This paragraph won’t be part of the note, because it\nisn’t indented.</p>\n<p>Here is an inline note.<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\"><sup>1</sup></a></p>\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn1\">\n<p>Here is the footnote.<a href=\"#fnref1\" class=\"footnote-back\">↩︎</a></p>\n</li>\n<li id=\"fn2\">\n<p>Here’s one with multiple blocks.</p>\n<p>Subsequent paragraphs are indented to show that they\nbelong to the previous footnote.</p>\n<pre><code>{ some.code }\n</code></pre>\n<p>The whole paragraph can be indented, or just the first\nline.  In this way, multi-paragraph footnotes work like\nmulti-paragraph list items.<a href=\"#fnref2\" class=\"footnote-back\">↩︎</a></p>\n</li>\n<li id=\"fn3\">\n<p>Inlines notes are easier to write, since\nyou don’t have to pick an identifier and move down to type the\nnote.<a href=\"#fnref3\" class=\"footnote-back\">↩︎</a></p>\n</li>\n</ol>\n</div>\n```\n\n</details>\n\n### Syntax tree\n\nA higher level project, [`mdast-util-from-markdown`][from-markdown], can give\nyou an AST.\n\n```js\nimport fromMarkdown from 'mdast-util-from-markdown' // This wraps micromark.\n\nconst result = fromMarkdown('## Hello, *world*!')\n\nconsole.log(result.children[0])\n```\n\nYields:\n\n```js\n{\n  type: 'heading',\n  depth: 2,\n  children: [\n    {type: 'text', value: 'Hello, ', position: [Object]},\n    {type: 'emphasis', children: [Array], position: [Object]},\n    {type: 'text', value: '!', position: [Object]}\n  ],\n  position: {\n    start: {line: 1, column: 1, offset: 0},\n    end: {line: 1, column: 19, offset: 18}\n  }\n}\n```\n\nAnother level up is [**remark**][remark], which provides a nice interface and\nhundreds of plugins.\n\n## Markdown\n\n### CommonMark\n\nThe first definition of “Markdown” gave several examples of how it worked,\nshowing input Markdown and output HTML, and came with a reference implementation\n(`Markdown.pl`).\nWhen new implementations followed, they mostly followed the first definition,\nbut deviated from the first implementation, and added extensions, thus making\nthe format a family of formats.\n\nSome years later, an attempt was made to standardize the differences between\nimplementations, by specifying how several edge cases should be handled, through\nmore input and output examples.\nThis is known as [CommonMark][commonmark-spec], and many implementations now\nwork towards some degree of CommonMark compliancy.\nStill, CommonMark describes what the output in HTML should be given some\ninput, which leaves many edge cases up for debate, and does not answer what\nshould happen for other output formats.\n\nmicromark passes all tests from CommonMark and has many more tests to match the\nCommonMark reference parsers.\nFinally, it comes with [CMSM][], which describes how to parse markup, instead\nof documenting input and output examples.\n\n### Grammar\n\nThe syntax of markdown can be described in Backus–Naur form (BNF) as:\n\n```bnf\nmarkdown = .*\n```\n\nNo, that’s [not a typo](http://trevorjim.com/a-specification-for-markdown/):\nmarkdown has no syntax errors; anything thrown at it renders *something*.\n\n## Project\n\n### Comparison\n\nThere are many other markdown parsers out there and maybe they’re better suited\nto your use case!\nHere is a short comparison of a couple in JavaScript.\nNote that this list is made by the folks who make `micromark` and `remark`, so\nthere is some bias.\n\n**Note**: these are, in fact, not really comparable: micromark (and remark)\nfocus on completely different things than other markdown parsers do.\nSure, you can generate HTML from markdown with them, but micromark (and remark)\nare created for (abstract or concrete) syntax trees—to inspect, transform, and\ngenerate content, so that you can make things like [MDX][], [Prettier][], or\n[Gatsby][].\n\n###### micromark\n\nmicromark can be used in two different ways.\nIt can either be used, optionally with existing extensions, to get HTML easily.\nOr, it can give tremendous power, such as access to all tokens with positional\ninfo, at the cost of being hard to get into.\nIt’s super small, pretty fast, and has 100% CommonMark compliance.\nIt has syntax extensions, such as supporting 100% GFM compliance (with\n`micromark-extension-gfm`), but they’re rather complex to write.\nIt’s the newest parser on the block, which means it’s fresh and well suited for\ncontemporary markdown needs, but it’s also battle-tested, and already the 3rd\nmost popular markdown parser in JavaScript.\n\nIf you’re looking for fine grained control, use micromark.\nIf you just want HTML from markdown, use micromark.\n\n###### remark\n\n[remark][] is the most popular markdown parser.\nIt’s built on top of `micromark` and boasts syntax trees.\nFor an analogy, it’s like if Babel, ESLint, and more, were one project.\nIt supports the syntax extensions that micromark has (so it’s 100% CM compliant\nand can be 100% GFM compliant), but most of the work is done in plugins that\ntransform or inspect the tree, and there’s *tons* of them.\nTransforming the tree is relatively easy: it’s a JSON object that can be\nmanipulated directly.\nremark is stable, widely used, and extremely powerful for handling complex data.\n\nYou probably should use [remark][].\n\n###### marked\n\n[marked][] is the oldest markdown parser on the block.\nIt’s been around for ages, is battle tested, small, popular, and has a bunch of\nextensions, but doesn’t match CommonMark or GFM, and is unsafe by default.\n\nIf you have markdown you trust and want to turn it into HTML without a fuss, and\ndon’t care about perfect compatibility with CommonMark or GFM, but do appreciate\na small bundle size and stability, use [marked][].\n\n###### markdown-it\n\n[markdown-it][] is a good, stable, and essentially CommonMark compliant markdown\nparser, with (optional) support for some GFM features as well.\nIt’s used a lot as a direct dependency in packages, but is rather big.\nIt shines at syntax extensions, where you want to support not just markdown, but\n*your* (company’s) version of markdown.\n\nIf you need a couple of custom syntax extensions to your otherwise\nCommonMark-compliant markdown, and want to get HTML out, use [markdown-it][].\n\n###### Others\n\nThere are lots of other markdown parsers!\nSome say they’re small, or fast, or that they’re CommonMark compliant—but\nthat’s not always true.\nThis list is not supposed to be exhaustive (but it’s the most relevant ones).\nThis list of markdown parsers is a snapshot in time of why (not) to use\n(alternatives to) `micromark`: they’re all good choices, depending on what your\ngoals are.\n\n### Test\n\nmicromark is tested with the \\~650 CommonMark tests and more than 1.2k extra\ntests confirmed with CM reference parsers.\nThese tests reach all branches in the code, which means that this project has\n100% code coverage.\nFinally, we use fuzz testing to ensure micromark is stable, reliable, and\nsecure.\n\nTo build, format, and test the codebase, use `$ npm test` after clone and\ninstall.\nThe `$ npm run test-api` and `$ npm run test-coverage` scripts check either the\nunit tests, or both them and their coverage, respectively.\n\nThe `$ npm run test-fuzz` script does fuzz testing for 15 minutes.\nThe timeout is provided by GNU coreutils **timeout(1)**, which might not be\navailable on your system.\nEither install `timeout` or remove that part temporarily from the script and\nmanually exit the program after a while.\n\n### Size & debug\n\nmicromark is really small.\nA ton of time went into making sure it minifies well, by the way code is written\nbut also through custom build scripts to pre-evaluate certain expressions.\nFurthermore, care went into making it compress well with gzip and brotli.\n\nNormally, you’ll use the pre-evaluated version of micromark.\nWhile developing, debugging, or testing your code, you *should* switch to use\ncode instrumented with assertions and debug messages:\n\n```sh\nnode --conditions development module.js\n```\n\nTo see debug messages, use a `DEBUG` env variable set to `micromark`:\n\n```sh\nDEBUG=\"*\" node --conditions development module.js\n```\n\n### Version\n\nmicromark adheres to [semver](https://semver.org) since 3.0.0.\n\n### Security\n\nThe typical security aspect discussed for markdown is [cross-site scripting\n(XSS)][xss] attacks.\nMarkdown itself is safe if it does not include embedded HTML or dangerous\nprotocols in links/images (such as `javascript:` or `data:`).\nmicromark makes any markdown safe by default, even if HTML is embedded or\ndangerous protocols are used, as it encodes or drops them.\nTurning on the `allowDangerousHtml` or `allowDangerousProtocol` options for\nuser-provided markdown opens you up to XSS attacks.\n\nAnother security aspect is DDoS attacks.\nFor example, an attacker could throw a 100mb file at micromark, in which case\nthe JavaScript engine will run out of memory and crash.\nIt is also possible to crash micromark with smaller payloads, notably when\nthousands of links, images, emphasis, or strong are opened but not closed.\nIt is wise to cap the accepted size of input (500kb can hold a big book) and to\nprocess content in a different thread or worker so that it can be stopped when\nneeded.\n\nUsing extensions might also be unsafe, refer to their documentation for more\ninformation.\n\nFor more information on markdown sanitation, see\n[`improper-markup-sanitization.md`][improper] by [**@chalker**][chalker].\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n### Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n### Sponsor\n\nSupport this effort and give back by sponsoring on [OpenCollective][]!\n\n<table>\n<tr valign=\"middle\">\n<td width=\"100%\" align=\"center\" colspan=\"10\">\n  <br>\n  <a href=\"https://www.salesforce.com\">Salesforce</a> 🏅<br><br>\n  <a href=\"https://www.salesforce.com\"><img src=\"https://images.opencollective.com/salesforce/ca8f997/logo/512.png\" width=\"256\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://www.gatsbyjs.org\">Gatsby</a> 🥇<br><br>\n  <a href=\"https://www.gatsbyjs.org\"><img src=\"https://avatars1.githubusercontent.com/u/12551863?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://vercel.com\">Vercel</a> 🥇<br><br>\n  <a href=\"https://vercel.com\"><img src=\"https://avatars1.githubusercontent.com/u/14985020?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://www.netlify.com\">Netlify</a><br><br>\n  <!--OC has a sharper image-->\n  <a href=\"https://www.netlify.com\"><img src=\"https://images.opencollective.com/netlify/4087de2/logo/256.png\" width=\"128\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://www.holloway.com\">Holloway</a><br><br>\n  <a href=\"https://www.holloway.com\"><img src=\"https://avatars1.githubusercontent.com/u/35904294?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://themeisle.com\">ThemeIsle</a><br><br>\n  <a href=\"https://themeisle.com\"><img src=\"https://avatars1.githubusercontent.com/u/58979018?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://boosthub.io\">Boost Hub</a><br><br>\n  <a href=\"https://boosthub.io\"><img src=\"https://images.opencollective.com/boosthub/6318083/logo/128.png\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://expo.io\">Expo</a><br><br>\n  <a href=\"https://expo.io\"><img src=\"https://avatars1.githubusercontent.com/u/12504344?s=128&v=4\" width=\"64\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n<td width=\"100%\" align=\"center\" colspan=\"10\">\n  <br>\n  <a href=\"https://opencollective.com/unified\"><strong>You?</strong></a>\n  <br><br>\n</td>\n</tr>\n</table>\n\n### Origin story\n\nOver the summer of 2018, micromark was planned, and the idea shared in August\nwith a couple of friends and potential sponsors.\nThe problem I (**[@wooorm][]**) had was that issues were piling up in remark and\nother repos, but my day job (teaching) was fun, fulfilling, and deserved time\ntoo.\nIt was getting hard to combine the two.\nThe thought was to feed two birds with one scone: fix the issues in remark with\na new markdown parser (codename marydown) while being financially supported by\nsponsors building fancy stuff on top, such as Gatsby, Contentful, and Vercel\n(ZEIT at the time).\n**[@johno][]** was making MDX on top of remark at the time (important historical\nnote: several other folks were working on JSX + markdown too).\nWe bundled our strengths: MDX was getting some traction and we thought together\nwe could perhaps make something sustainable.\n\nIn November 2018, we launched with the idea for micromark to solve all existing\nbugs, sustaining the existing hundreds of projects, and furthering the exciting\nhigh-level project MDX.\nWe pushed a single name: unified (which back then was a small but essential\npart of the chain).\nGatsby and Vercel were immediate sponsors.\nWe didn’t know whether it would work, and it worked.\nBut now you have a new problem: you are getting some financial support (much\nmore than other open source projects) but it’s not enough money for rent, and\ntoo much money to print stickers with.\nYou still have your job and issues are still piling up.\n\nAt the start of summer 2019, after a couple months of saving up donations, I\nquit my job and worked on unified through fall.\nThat got the number of open issues down significantly and set up a strong\ngovernance and maintenance system for the collective.\nBut when the time came to work on micromark, the money was gone again, so I\ncontracted through winter 2019, and in spring 2020 I could do about half open\nsource, half contracting.\nOne of the contracting gigs was to write a new MDX parser, for which I also\ndocumented how to do that with a state machine [in prose][mdx-cmsm].\nThat gave me the insight into how the same could be done for markdown: I drafted\n[CMSM][], which was some of the core ideas for micromark, but in prose.\n\nIn May 2020, Salesforce reached out: they saw the bugs in remark, how micromark\ncould help, and the initial work on CMSM.\nAnd they had thousands of Markdown files.\nIn a for open source uncharacteristic move, they decided to fund my work on\nmicromark.\nA large part of what maintaining open source means, is putting out fires,\ntriaging issues, and making sure users and sponsors are happy, so it was\namazing to get several months to just focus and make something new.\nI remember feeling that this project would probably be the hardest thing I’d\nwork on: yeah, parsers are pretty difficult, but markdown is on another level.\nMarkdown is such a giant stack of edge cases on edge cases on even more\nweirdness, what a mess.\nOn August 20, 2020, I released [2.0.0][200], the first working version of\nmicromark.\nAnd it’s hard to describe how that moment felt.\nIt was great.\n\n### License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark.svg\n\n[downloads]: https://www.npmjs.com/package/micromark\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n\n[cheat]: https://commonmark.org/help/\n\n[twitter]: https://twitter.com/unifiedjs\n\n[remark]: https://github.com/remarkjs/remark\n\n[rehype]: https://github.com/rehypejs/rehype\n\n[site]: https://unifiedjs.com\n\n[contribute]: #contribute\n\n[encoding]: https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings\n\n[buffer]: https://nodejs.org/api/buffer.html\n\n[commonmark-spec]: https://commonmark.org\n\n[popular]: https://www.npmtrends.com/remark-parse-vs-marked-vs-markdown-it\n\n[remark-parse]: https://unifiedjs.com/explore/package/remark-parse/\n\n[improper]: https://github.com/ChALkeR/notes/blob/master/Improper-markup-sanitization.md\n\n[chalker]: https://github.com/ChALkeR\n\n[cmsm]: https://github.com/micromark/common-markup-state-machine\n\n[mdx-cmsm]: https://github.com/micromark/mdx-state-machine\n\n[from-markdown]: https://github.com/syntax-tree/mdast-util-from-markdown\n\n[to-markdown]: https://github.com/syntax-tree/mdast-util-to-markdown\n\n[directives]: https://github.com/micromark/micromark-extension-directive\n\n[footnotes]: https://github.com/micromark/micromark-extension-footnote\n\n[frontmatter]: https://github.com/micromark/micromark-extension-frontmatter\n\n[gfm]: https://github.com/micromark/micromark-extension-gfm\n\n[math]: https://github.com/micromark/micromark-extension-math\n\n[mdxjs]: https://github.com/micromark/micromark-extension-mdxjs\n\n[constructs]: /packages/micromark/dev/lib/constructs.js\n\n[comparison]: #comparison\n\n[extensions]: #list-of-extensions\n\n[syntax-extension]: #syntaxextension\n\n[html-extension]: #htmlextension\n\n[option-extensions]: #optionsextensions\n\n[option-htmlextensions]: #optionshtmlextensions\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[utilities]: https://github.com/syntax-tree/mdast#list-of-utilities\n\n[unified]: https://github.com/unifiedjs/unified\n\n[remark plugins]: https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins\n\n[rehype plugins]: https://github.com/rehypejs/rehype/blob/main/doc/plugins.md#list-of-plugins\n\n[directive-proposal]: https://talk.commonmark.org/t/generic-directives-plugins-syntax/444\n\n[architecture]: #architecture\n\n[extending-markdown]: #extending-markdown\n\n[create-extension]: #creating-a-micromark-extension\n\n[mdx-expression]: https://github.com/micromark/micromark-extension-mdx-expression\n\n[preprocess]: #preprocess\n\n[content-types]: https://github.com/micromark/micromark#content-types\n\n[postprocess]: https://github.com/micromark/micromark#postprocess\n\n[size-debug]: https://github.com/micromark/micromark#size--debug\n\n[packages]: https://github.com/micromark/micromark/tree/main/packages\n\n[marked]: https://github.com/markedjs/marked\n\n[markdown-it]: https://github.com/markdown-it/markdown-it\n\n[mdx]: https://github.com/mdx-js/mdx\n\n[prettier]: https://github.com/prettier/prettier\n\n[gatsby]: https://github.com/gatsbyjs/gatsby\n\n[commonmark]: #commonmark\n\n[size]: #size--debug\n\n[test]: #test\n\n[security]: #security\n\n[sponsor]: #sponsor\n\n[@wooorm]: https://github.com/wooorm\n\n[@johno]: https://github.com/johno\n\n[200]: https://github.com/micromark/micromark/releases/tag/2.0.0\n","readmeFilename":"readme.md","homepage":"https://github.com/micromark/micromark/tree/main#readme","_id":"micromark@3.0.0-alpha.3","_nodeVersion":"16.2.0","_npmVersion":"7.16.0","dist":{"integrity":"sha512-DshGO4tCE4mlxBtr5H5b2ARbJa9WUQeJUqSLrHOzx5Z7/CfNtJFBe3kHZNDFrm/fFntpatNotPhZBSVpkSOZWg==","shasum":"0d04c2fe2d76c41702f58a1f08dc93ffa908cd97","tarball":"https://registry.npmjs.org/micromark/-/micromark-3.0.0-alpha.3.tgz","fileCount":49,"unpackedSize":171235,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgyjI4CRA9TVsSAnZWagAAdoYP/iwxHxVJFzpv2l25ZRxV\n+NNyhcy4P3Z8/NdyY26NS+E0bFZf8n1H3rIoMv1UtKYZa7wg4jbH/hRpHBjo\nDwijou5x2ucUTbElZaJEEN8bF4+5skeQLnoeWyCTpaT6h5iezK44AVTfZNSY\nT+0dDpqZM0azIOhxVuK7qEmVSPfY2ej6VsdCd1/ZPtsRgdK4zNOM7NmDwPEo\nEYLqYlgJUt0uMIBhieC3/PpshpkeBMUcddtI43zhOvDpcZkxczDCzrFTfL3E\nIQVMJkGadF8eDfuoMGUMYv/ITV2YvgCRoWb08pcWp7IQNPYCmU9Fclgq1W1C\nK0pjq4T+zO5o6GM+GafbEJvpO5RFg03BZB2c/fIxvlWMUR0hlyshOM6BA39D\nZXMlyz0UKlGap1o4qIS/CmtTBGYPb1/W/mc3jJ62vbp+emlAAb9kLi2Yc6Qh\nD3wSHzQ9NsUsPZqWj6s29mMl7WbqpiZIxdv/tUDtHK7DMIr9L2LEOM4Zvvbp\nzf9nv4/kkVdkjiGcZLFB8RWKoTGewA8M8+14ezWFmPTM4Tl035hqCaIHXqth\nmbwkUWJr7Ji5PSQ3Fgy9fmAQ//fdLkK+Nn7WtpNGzYarjh4T2pf6Qb/LgKqW\nZ2ckr6Z4nRQiz0+3QSnRC2f2fgAaWOx1BLu8oyViAcVze/P3P6366fFVQCJv\nlRF5\r\n=No1a\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEL9KRNBu70wAymDZdHtVuaKjkbfcnqtjSbcbKMZ/oHdAiBqt20BFR2UB1e1GlXDaoYxi1KvSGbp468YeRwAryy6pQ=="}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_3.0.0-alpha.3_1623863864146_0.8344452060301191"},"_hasShrinkwrap":false},"3.0.0-beta.1":{"name":"micromark","version":"3.0.0-beta.1","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git#main"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"sideEffects":false,"type":"module","main":"index.js","types":"dev/index.d.ts","exports":{".":{"development":"./dev/index.js","default":"./index.js"},"./stream":{"development":"./dev/stream.js","default":"./stream.js"},"./stream.js":{"development":"./dev/stream.js","default":"./stream.js"},"./lib/compile":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/compile.js":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/parse":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/parse.js":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/postprocess":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/postprocess.js":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/preprocess":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"},"./lib/preprocess.js":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"}},"dependencies":{"@types/debug":"^4.0.0","debug":"^4.0.0","micromark-core-commonmark":"1.0.0-beta.1","micromark-factory-space":"1.0.0-beta.1","micromark-util-character":"1.0.0-beta.1","micromark-util-chunked":"1.0.0-beta.1","micromark-util-combine-extensions":"1.0.0-beta.1","micromark-util-decode-numeric-character-reference":"1.0.0-beta.1","micromark-util-encode":"1.0.0-beta.1","micromark-util-normalize-identifier":"1.0.0-beta.1","micromark-util-resolve-all":"1.0.0-beta.1","micromark-util-sanitize-uri":"1.0.0-beta.1","micromark-util-subtokenize":"1.0.0-beta.1","micromark-util-symbol":"1.0.0-beta.1","micromark-util-types":"1.0.0-beta.1","parse-entities":"^3.0.0"},"scripts":{"build":"rimraf \"*.d.ts\" \"{dev/,lib/}**/*.d.ts\" && tsc && micromark-build && type-coverage"},"xo":false,"typeCoverage":{"atLeast":100,"detail":true,"strict":true,"ignoreCatch":true},"readme":"<h1 align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/micromark/micromark/2e476c9/logo.svg?sanitize=true\" alt=\"micromark\" />\n</h1>\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\n> ⚠️ Note: this is the readme for the upcoming release of micromark 3.0.0.\\\n> [See here](https://github.com/micromark/micromark/tree/14d86e0) for the\n> current release.\n\nThe smallest CommonMark compliant markdown parser with positional info and\nconcrete tokens.\n\n## Feature highlights\n\n*   [x] **[compliant][commonmark]** (100% to CommonMark)\n*   [x] **[extensions][]** ([GFM][], [directives][], [footnotes][],\n    [frontmatter][], [math][], [MDX.js][mdxjs])\n*   [x] **[safe][security]** (by default)\n*   [x] **[small][size]** (smallest CM parser that exists)\n*   [x] **[robust][test]** (1800+ tests, 100% coverage, fuzz testing)\n\n## When to use this\n\n*   If you *just* want to turn markdown into HTML (w/ maybe a few extensions)\n*   If you want to do *really complex things* with markdown\n\nSee [§ Comparison][comparison] for more info\n\n## Intro\n\nmicromark is a long awaited markdown parser.\nIt uses a [state machine][cmsm] to parse the entirety of markdown into concrete\ntokens.\nIt’s the smallest 100% [CommonMark][] compliant markdown parser in JavaScript.\nIt was made to replace the internals of [`remark-parse`][remark-parse], the most\n[popular][] markdown parser.\nIts API compiles to HTML, but its parts are made to be used separately, so as to\ngenerate syntax trees ([`mdast-util-from-markdown`][from-markdown]) or compile\nto other output formats.\n\n*   to learn markdown, see this [cheatsheet and tutorial][cheat]\n*   for more about us, see [`unifiedjs.com`][site]\n*   for updates, see [Twitter][]\n*   for questions, see [Discussions][chat]\n*   to help, see [contribute][] or [sponsor][] below\n\n## Contents\n\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`micromark(value[, encoding][, options])`](#micromarkvalue-encoding-options)\n    *   [`stream(options?)`](#streamoptions)\n*   [Extensions](#extensions)\n    *   [List of extensions](#list-of-extensions)\n    *   [`SyntaxExtension`](#syntaxextension)\n    *   [`HtmlExtension`](#htmlextension)\n    *   [Extending markdown](#extending-markdown)\n    *   [Creating a micromark extension](#creating-a-micromark-extension)\n*   [Architecture](#architecture)\n    *   [Overview](#overview)\n    *   [Preprocess](#preprocess)\n    *   [Parse](#parse)\n    *   [Postprocess](#postprocess)\n    *   [Compile](#compile)\n*   [Examples](#examples)\n    *   [GitHub flavored markdown (GFM)](#github-flavored-markdown-gfm)\n    *   [Math](#math)\n    *   [Footnotes](#footnotes)\n    *   [Syntax tree](#syntax-tree)\n*   [Markdown](#markdown)\n    *   [CommonMark](#commonmark)\n    *   [Grammar](#grammar)\n*   [Project](#project)\n    *   [Comparison](#comparison)\n    *   [Test](#test)\n    *   [Size & debug](#size--debug)\n    *   [Version](#version)\n    *   [Security](#security)\n    *   [Contribute](#contribute)\n    *   [Sponsor](#sponsor)\n    *   [Origin story](#origin-story)\n    *   [License](#license)\n\n## Install\n\n[npm][]:\n\n```sh\nnpm install micromark\n```\n\n## Use\n\nTypical use (buffering):\n\n```js\nimport {micromark} from 'micromark'\n\nconsole.log(micromark('## Hello, *world*!'))\n```\n\nYields:\n\n```html\n<h2>Hello, <em>world</em>!</h2>\n```\n\nYou can pass extensions (in this case [`micromark-extension-gfm`][gfm]):\n\n```js\nimport {micromark} from 'micromark'\nimport {gfm, gfmHtml} from 'micromark-extension-gfm'\n\nconst value = '* [x] contact@example.com ~~strikethrough~~'\n\nconst result = micromark(value, {\n  extensions: [gfm()],\n  htmlExtensions: [gfmHtml]\n})\n\nconsole.log(result)\n```\n\nYields:\n\n```html\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"mailto:contact@example.com\">contact@example.com</a> <del>strikethrough</del></li>\n</ul>\n```\n\nStreaming interface:\n\n```js\nimport fs from 'fs'\nimport {stream} from 'micromark/stream'\n\nfs.createReadStream('example.md')\n  .on('error', handleError)\n  .pipe(stream())\n  .pipe(process.stdout)\n\nfunction handleError(error) {\n  // Handle your error here!\n  throw error\n}\n```\n\n## API\n\n`micromark` core has two entries in its export map: `micromark` and\n`micromark/stream`.\n\n`micromark` exports the following identifier: `micromark`.\n`micromark/stream` exports the following identifier: `stream`.\nThere are no default exports.\n\nThe export map supports the endorsed\n[`development` condition](https://nodejs.org/api/packages.html#packages_resolving_user_conditions).\nRun `node --conditions development module.js` to get instrumented dev code.\nWithout this condition, production code is loaded.\nSee [§ Size & debug][size-debug] for more info.\n\n### `micromark(value[, encoding][, options])`\n\nCompile markdown to HTML.\n\n##### Parameters\n\n###### `value`\n\nMarkdown to parse (`string` or `Buffer`).\n\n###### `encoding`\n\n[Character encoding][encoding] to understand `value` as when it’s a\n[`Buffer`][buffer] (`string`, default: `'utf8'`).\n\n###### `options.defaultLineEnding`\n\nValue to use for line endings not in `value` (`string`, default: first line\nending or `'\\n'`).\n\nGenerally, micromark copies line endings (`'\\r'`, `'\\n'`, `'\\r\\n'`) in the\nmarkdown document over to the compiled HTML.\nIn some cases, such as `> a`, CommonMark requires that extra line endings are\nadded: `<blockquote>\\n<p>a</p>\\n</blockquote>`.\n\n###### `options.allowDangerousHtml`\n\nWhether to allow embedded HTML (`boolean`, default: `false`).\nSee [§ Security][security].\n\n###### `options.allowDangerousProtocol`\n\nWhether to allow potentially dangerous protocols in links and images (`boolean`,\ndefault: `false`).\nURLs relative to the current protocol are always allowed (such as, `image.jpg`).\nFor links, the allowed protocols are `http`, `https`, `irc`, `ircs`, `mailto`,\nand `xmpp`.\nFor images, the allowed protocols are `http` and `https`.\nSee [§ Security][security].\n\n###### `options.extensions`\n\nArray of syntax extensions ([`Array.<SyntaxExtension>`][syntax-extension],\ndefault: `[]`).\nSee [§ Extensions][extensions].\n\n###### `options.htmlExtensions`\n\nArray of HTML extensions ([`Array.<HtmlExtension>`][html-extension], default:\n`[]`).\nSee [§ Extensions][extensions].\n\n##### Returns\n\n`string` — Compiled HTML.\n\n### `stream(options?)`\n\nStreaming interface of micromark.\nCompiles markdown to HTML.\n`options` are the same as the buffering API above.\nNote that some of the work to parse markdown can be done streaming, but in the\nend buffering is required.\n\nmicromark does not handle errors for you, so you must handle errors on whatever\nstreams you pipe into it.\nAs markdown does not know errors, `micromark` itself does not emit errors.\n\n## Extensions\n\nmicromark supports extensions.\nThere are two types of extensions for micromark:\n[`SyntaxExtension`][syntax-extension],\nwhich change how markdown is parsed, and [`HtmlExtension`][html-extension],\nwhich change how it compiles.\nThey can be passed in [`options.extensions`][option-extensions] or\n[`options.htmlExtensions`][option-htmlextensions], respectively.\n\nAs a user of extensions, refer to each extension’s readme for more on how to use\nthem.\nAs a (potential) author of extensions, refer to\n[§ Extending markdown][extending-markdown] and\n[§ Creating a micromark extension][create-extension].\n\n### List of extensions\n\n*   [`micromark/micromark-extension-directive`][directives]\n    — support directives (generic extensions)\n*   [`micromark/micromark-extension-footnote`][footnotes]\n    — support footnotes\n*   [`micromark/micromark-extension-frontmatter`][frontmatter]\n    — support frontmatter (YAML, TOML, etc)\n*   [`micromark/micromark-extension-gfm`][gfm]\n    — support GFM (GitHub Flavored Markdown)\n*   [`micromark/micromark-extension-gfm-autolink-literal`](https://github.com/micromark/micromark-extension-gfm-autolink-literal)\n    — support GFM autolink literals\n*   [`micromark/micromark-extension-gfm-strikethrough`](https://github.com/micromark/micromark-extension-gfm-strikethrough)\n    — support GFM strikethrough\n*   [`micromark/micromark-extension-gfm-table`](https://github.com/micromark/micromark-extension-gfm-table)\n    — support GFM tables\n*   [`micromark/micromark-extension-gfm-tagfilter`](https://github.com/micromark/micromark-extension-gfm-tagfilter)\n    — support GFM tagfilter\n*   [`micromark/micromark-extension-gfm-task-list-item`](https://github.com/micromark/micromark-extension-gfm-task-list-item)\n    — support GFM tasklists\n*   [`micromark/micromark-extension-math`][math]\n    — support math\n*   [`micromark/micromark-extension-mdx`](https://github.com/micromark/micromark-extension-mdx)\n    — support MDX\n*   [`micromark/micromark-extension-mdxjs`][mdxjs]\n    — support MDX.js\n*   [`micromark/micromark-extension-mdx-expression`](https://github.com/micromark/micromark-extension-mdx-expression)\n    — support MDX (or MDX.js) expressions\n*   [`micromark/micromark-extension-mdx-jsx`](https://github.com/micromark/micromark-extension-mdx-jsx)\n    — support MDX (or MDX.js) JSX\n*   [`micromark/micromark-extension-mdx-md`](https://github.com/micromark/micromark-extension-mdx-md)\n    — support misc MDX changes\n*   [`micromark/micromark-extension-mdxjs-esm`](https://github.com/micromark/micromark-extension-mdxjs-esm)\n    — support MDX.js import/exports\n\n### `SyntaxExtension`\n\nA syntax extension is an object whose fields are typically the names of hooks,\nreferring to where constructs “hook” into.\nThe fields at such objects are character codes, mapping to constructs as values.\n\nThe built in [constructs][] are an example.\nSee it and [existing extensions][extensions] for inspiration.\n\n### `HtmlExtension`\n\nAn HTML extension is an object whose fields are typically `enter` or `exit`\n(reflecting whether a token is entered or exited).\nThe values at such objects are names of tokens mapping to handlers.\n\nSee [existing extensions][extensions] for inspiration.\n\n### Extending markdown\n\nmicromark lets you change markdown syntax, yes, but there are alternatives.\nThe alternatives are often better.\n\nOver the years, many micromark and remark users have asked about their unique\ngoals for markdown.\nSome exemplary goals are:\n\n1.  I want to add `rel=\"nofollow\"` to external links\n2.  I want to add links from headings to themselves\n3.  I want line breaks in paragraphs to become hard breaks\n4.  I want to support embedded music sheets\n5.  I want authors to add arbitrary attributes\n6.  I want authors to mark certain blocks with meaning, such as tip, warning,\n    etc\n7.  I want to combine markdown with JS(X)\n8.  I want to support our legacy flavor of markdown-like syntax\n\nThese can be solved in different ways and which solution is best is both\nsubjective and dependant on unique needs.\nOften, there is already a solution in the form of an existing remark or rehype\nplugin.\nRespectively, their solutions are:\n\n1.  [`remark-external-links`](https://github.com/remarkjs/remark-external-links)\n2.  [`rehype-autolink-headings`](https://github.com/rehypejs/rehype-autolink-headings)\n3.  [`remark-breaks`](https://github.com/remarkjs/remark-breaks)\n4.  custom plugin similar to\n    [`rehype-katex`](https://github.com/remarkjs/remark-math/tree/main/packages/rehype-katex)\n    but integrating [`abcjs`](https://www.abcjs.net)\n5.  either [`remark-directive`](https://github.com/remarkjs/remark-directive)\n    and a custom plugin or with\n    [`rehype-attr`](https://github.com/jaywcjlove/rehype-attr)\n6.  [`remark-directive`](https://github.com/remarkjs/remark-directive)\n    combined with a custom plugin\n7.  combining the existing micromark MDX extensions however you please, such as\n    done by [`mdx-js/mdx`](https://github.com/mdx-js/mdx) or\n    [`xdm`](https://github.com/wooorm/xdm)\n8.  Writing a micromark extension\n\nLooking at these from a higher level, they can be categorized:\n\n*   **Changing the output by transforming syntax trees**\n    (1 and 2)\n\n    This category is nice as the format remains plain markdown that authors are\n    already familiar with and which will work with existing tools and platforms.\n\n    Implementations will deal with the syntax tree\n    ([`mdast`][mdast]) and the ecosystems\n    **[remark][]** and **[rehype][]**.\n    There are many existing\n    [utilities for working with that tree][utilities].\n    Many [remark plugins][] and [rehype plugins][] also exist.\n*   **Using and abusing markdown to add new meaning**\n    (3, 4, potentially 5)\n\n    This category is similar to *Changing the output by transforming syntax\n    trees*, but adds a new meaning to certain things which already have\n    semantics in markdown.\n\n    Some examples in pseudo code:\n\n    ````markdown\n    *   **A list item with the first paragraph bold**\n\n        And then more content, is turned into `<dl>` / `<dt>` / `<dd>` elements\n\n    Or, the title attributes on links or images is [overloaded](/url 'rel:nofollow')\n    with a new meaning.\n\n    ```csv\n    fenced,code,can,include,data\n    which,is,turned,into,a,graph\n    ```\n\n    ```js data can=\"be\" passed=true\n    // after the code language name\n    ```\n\n    HTML, especially comments, could be used as **markers**<!--id=\"markers\"-->\n    ````\n*   **Arbitrary extension mechanism**\n    (potentially 5; 6)\n\n    This category is nice when content should contain embedded “components”.\n    Often this means it’s required for authors to have some programming\n    experience.\n    There are three good ways to solve arbitrary extensions.\n\n    **HTML**: Markdown already has an arbitrary extension syntax.\n    It works in most places and authors are already familiar with the syntax,\n    but it’s reasonably hard to implement securely.\n    Certain platforms will remove HTML completely, others sanitize it to varying\n    degrees.\n    HTML also supports custom elements.\n    These could be used and enhanced by client side JavaScript or enhanced when\n    transforming the syntax tree.\n\n    **Generic directives**: although\n    [a proposal][directive-proposal]\n    and not supported on most platforms, directives do work with many tools\n    already.\n    They’re not the easiest to author compared to, say, a heading, but sometimes\n    that’s okay.\n    They do have potential: they nicely solve the need for an infinite number of\n    potential extensions to markdown in a single markdown-esque way.\n\n    **MDX** also adds support for components by swapping HTML out for JS(X).\n    JSX is an extension to JavaScript, so MDX is something along the lines of\n    literate programming.\n    This does require knowledge of React (or Vue) and JavaScript, excluding some\n    authors.\n*   **Extending markdown syntax**\n    (7 and 8)\n\n    Extend the syntax of markdown means:\n\n    *   Authors won’t be familiar with the syntax\n    *   Content won’t work in other places (such as on GitHub)\n    *   Defeating the purpose of markdown: being simple to author and looking\n        like what it means\n\n    …and it’s hard to do as it requires some in-depth knowledge of JavaScript\n    and parsing.\n    But it’s possible and in certain cases very powerful.\n\n### Creating a micromark extension\n\nThis section shows how to create an extension for micromark that parses\n“variables” (a way to render some data) and one to turn a default construct off.\n\n> Stuck?\n> See [`support.md`][support].\n\n#### Prerequisites\n\n*   You should possess an intermediate to high understanding of JavaScript:\n    it’s going to get a bit complex\n*   Read the readme of [unified][] (until you hit the API section) to better\n    understand where micromark fits\n*   Read the [§ Architecture][architecture] section to understand how micromark\n    works\n*   Read the [§ Extending markdown][extending-markdown] section to understand\n    whether it’s a good idea to extend the syntax of markdown\n\n#### Extension basics\n\nmicromark supports two types of extensions.\nSyntax extensions change how markdown is parsed.\nHTML extensions change how it compiles.\n\nHTML extensions are not always needed, as micromark is often used through\n[`mdast-util-from-markdown`][from-markdown] to parse to a markdown syntax tree\nSo instead of an HTML extension a `from-markdown` utility is needed.\nThen, a [`mdast-util-to-markdown`][to-markdown] utility, which is responsible\nfor serializing syntax trees to markdown, is also needed.\n\nWhen developing something for internal use only, you can pick and choose which\nparts you need.\nWhen open sourcing your extensions, it should probably contain four parts:\nsyntax extension, HTML extension, `from-markdown` utility, and a `to-markdown`\nutility.\n\nOn to our first case!\n\n#### Case: variables\n\nLet’s first outline what we want to make: render some data, similar to how\n[Liquid](https://github.com/Shopify/liquid/wiki/Liquid-for-Designers) and the\nlike work, in our markdown.\nIt could look like this:\n\n```markdown\nHello, {planet}!\n```\n\nTurned into:\n\n```html\n<p>Hello, Venus!</p>\n```\n\nAn opening curly brace, followed by one or more characters, and then a closing\nbrace.\nWe’ll then look up `planet` in some object and replace the variable with its\ncorresponding value, to get something like `Venus` out.\n\nIt looks simple enough, but with markdown there are often a couple more things\nto think about.\nFor this case, I can see the following:\n\n*   Is there a “block” version too?\n*   Are spaces allowed?\n    Line endings?\n    Should initial and final white space be ignored?\n*   Balanced nested braces?\n    Superfluous ones such as `{{planet}}` or meaningful ones such as\n    `{a {pla} net}`?\n*   Character escapes (`{pla\\}net}`) and character references\n    (`{pla&#x7d;net}`)?\n\nTo keep things as simple as possible, let’s not support a block syntax, see\nspaces as special, support line endings, or support nested braces.\nBut to learn interesting things, we *will* support character escapes and\n\\-references.\n\nNote that this particular case is already solved quite nicely by\n[`micromark-extension-mdx-expression`][mdx-expression].\nIt’s a bit more powerful and does more things, but it can be used to solve this\ncase and otherwise serve as inspiration.\n\n##### Setup\n\nCreate a new folder, enter it, and set up a new package:\n\n```sh\nmkdir example\ncd example\nnpm init -y\n```\n\nIn this example we’ll use ESM, so add `type: 'module'` to `package.json`:\n\n```diff\n@@ -2,6 +2,7 @@\n   \"name\": \"example\",\n   \"version\": \"1.0.0\",\n   \"description\": \"\",\n+  \"type\": \"module\",\n   \"main\": \"index.js\",\n   \"scripts\": {\n     \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n```\n\nAdd a markdown file, `example.md`, with the following text:\n\n```markdown\nHello, {planet}!\n\n{pla\\}net} and {pla&#x7d;net}.\n```\n\nTo check if our extension works, add an `example.js` module, with the following\ncode:\n\n```js\nimport {promises as fs} from 'node:fs'\nimport {micromark} from 'micromark'\nimport {variables} from './index.js'\n\nmain()\n\nasync function main() {\n  const buf = await fs.readFile('example.md')\n  const out = micromark(buf, {extensions: [variables]})\n  console.log(out)\n}\n```\n\nWhile working on the extension, run `node example` to see whether things work.\nFeel free to add more examples of the variables syntax in `example.md` if\nneeded.\n\nOur extension doesn’t work yet, for one because `micromark` is not installed:\n\n```sh\nnpm install micromark --save-dev\n```\n\n…and we need to write our extension.\nLet’s do that in `index.js`:\n\n```js\nexport const variables = {}\n```\n\nAlthough our extension doesn’t do anything, running `node example` now somewhat\nworks!\n\n##### Syntax extension\n\nMuch in micromark is based on character codes (see [§ Preprocess][preprocess]).\nFor this extension, the relevant codes are:\n\n*   `-5`\n    — M-0005 CARRIAGE RETURN (CR)\n*   `-4`\n    — M-0004 LINE FEED (LF)\n*   `-3`\n    — M-0003 CARRIAGE RETURN LINE FEED (CRLF)\n*   `null`\n    — EOF (end of the stream)\n*   `92`\n    — U+005C BACKSLASH (`\\`)\n*   `123`\n    — U+007B LEFT CURLY BRACE (`{`)\n*   `125`\n    — U+007D RIGHT CURLY BRACE (`}`)\n\nAlso relevant are the content types (see [§ Content types][content-types]).\nThis extension is a *text* construct, as it’s parsed alongsides links and such.\nThe content inside it (between the braces) is *string*, to support character\nescapes and -references.\n\nLet’s write our extension.\nAdd the following code to `index.js`:\n\n```js\nconst variableConstruct = {name: 'variable', tokenize: variableTokenize}\n\nexport const variables = {text: {123: variableConstruct}}\n\nfunction variableTokenize(effects, ok, nok) {\n  return start\n\n  function start(code) {\n    console.log('start:', effects, code);\n    return nok(code)\n  }\n}\n```\n\nThe above code exports an extension with the identifier `variables`.\nThe extension defines a *text* construct for the character code `123`.\nThe construct has a `name`, so that it can be turned off (optional, see next\ncase), and it has a `tokenize` function that sets up a state machine, which\nreceives `effects` and the `ok` and `nok` states.\n`ok` can be used when successful, `nok` when not, and so constructs are a bit\nsimilar to how promises can *resolve* or *reject*.\n`tokenize` returns the initial state, `start`, which itself receives the current\ncharacter code, prints some debugging information, and then returns a call\nto `nok`.\n\nEnsure that things work by running `node example` and see what it prints.\n\nNow we need to define our states and figure out how variables work.\nSome people prefer sketching a diagram of the flow.\nI often prefer writing it down in pseudo-code prose.\nI’ve also found that test driven development works well, where I write unit\ntests for how it should work, then write the state machine, and finally use a\ncode coverage tool to ensure I’ve thought of everything.\n\nIn prose, what we have to code looks like this:\n\n*   **start**:\n    Receive `123` as `code`, enter a token for the whole (let’s call it\n    `variable`), enter a token for the marker (`variableMarker`), consume\n    `code`, exit the marker token, enter a token for the contents\n    (`variableString`), switch to *begin*\n*   **begin**:\n    If `code` is `125`, reconsume in *nok*.\n    Else, reconsume in *inside*\n*   **inside**:\n    If `code` is `-5`, `-4`, `-3`, or `null`, reconsume in `nok`.\n    Else, if `code` is `125`, exit the string token, enter a `variableMarker`,\n    consume `code`, exit the marker token, exit the variable token, and switch\n    to *ok*.\n    Else, consume, and remain in *inside*.\n\nThat should be it!\nReplace `variableTokenize` with the following to include the needed states:\n\n```js\nfunction variableTokenize(effects, ok, nok) {\n  return start\n\n  function start(code) {\n    effects.enter('variable')\n    effects.enter('variableMarker')\n    effects.consume(code)\n    effects.exit('variableMarker')\n    effects.enter('variableString')\n    return begin\n  }\n\n  function begin(code) {\n    return code === 125 ? nok(code) : inside(code)\n  }\n\n  function inside(code) {\n    if (code === -5 || code === -4 || code === -3 || code === null) {\n      return nok(code)\n    }\n\n    if (code === 125) {\n      effects.exit('variableString')\n      effects.enter('variableMarker')\n      effects.consume(code)\n      effects.exit('variableMarker')\n      effects.exit('variable')\n      return ok\n    }\n\n    effects.consume(code)\n    return inside\n  }\n}\n```\n\nRun `node example` again and see what it prints!\nThe HTML compiler ignores things it doesn’t know, so variables are now removed.\n\nWe have our first syntax extension, and it sort of works, but we don’t handle\ncharacter escapes and -references yet.\nWe need to do two things to make that work:\na) skip over `\\\\` and `\\}` in our algorithm,\nb) tell micromark to parse them.\n\nChange the code in `index.js` to support escapes like so:\n\n```diff\n@@ -23,6 +23,11 @@ function variableTokenize(effects, ok, nok) {\n       return nok(code)\n     }\n\n+    if (code === 92) {\n+      effects.consume(code)\n+      return insideEscape\n+    }\n+\n     if (code === 125) {\n       effects.exit('variableString')\n       effects.enter('variableMarker')\n@@ -35,4 +40,13 @@ function variableTokenize(effects, ok, nok) {\n     effects.consume(code)\n     return inside\n   }\n+\n+  function insideEscape(code) {\n+    if (code === 92 || code === 125) {\n+      effects.consume(code)\n+      return inside\n+    }\n+\n+    return inside(code)\n+  }\n }\n```\n\nFinally add support for character references and character escapes between\nbraces by adding a special token that defines a content type:\n\n```diff\n@@ -11,6 +11,7 @@ function variableTokenize(effects, ok, nok) {\n     effects.consume(code)\n     effects.exit('variableMarker')\n     effects.enter('variableString')\n+    effects.enter('chunkString', {contentType: 'string'})\n     return begin\n   }\n\n@@ -29,6 +30,7 @@ function variableTokenize(effects, ok, nok) {\n     }\n\n     if (code === 125) {\n+      effects.exit('chunkString')\n       effects.exit('variableString')\n       effects.enter('variableMarker')\n       effects.consume(code)\n```\n\nTokens with a `contentType` will be replaced by *postprocess* (see\n[§ Postprocess][postprocess]) by the tokens belonging to that content type.\n\n##### HTML extension\n\nUp next is an HTML extension to replace variables with data.\nChange `example.js` to use one like so:\n\n```diff\n@@ -1,11 +1,12 @@\n import {promises as fs} from 'node:fs'\n import {micromark} from 'micromark'\n-import {variables} from './index.js'\n+import {variables, variablesHtml} from './index.js'\n\n main()\n\n async function main() {\n   const buf = await fs.readFile('example.md')\n-  const out = micromark(buf, {extensions: [variables]})\n+  const html = variablesHtml({planet: '1', 'pla}net': '2'})\n+  const out = micromark(buf, {extensions: [variables], htmlExtensions: [html]})\n   console.log(out)\n }\n```\n\nAnd add the HTML extension, `variablesHtml`, to `index.js` like so:\n\n```diff\n@@ -52,3 +52,19 @@ function variableTokenize(effects, ok, nok) {\n     return inside(code)\n   }\n }\n+\n+export function variablesHtml(data = {}) {\n+  return {\n+    enter: {variableString: enterVariableString},\n+    exit: {variableString: exitVariableString},\n+  }\n+\n+  function enterVariableString() {\n+    this.buffer()\n+  }\n+\n+  function exitVariableString() {\n+    var id = this.resume()\n+    if (id in data) {\n+      this.raw(this.encode(data[id]))\n+    }\n+  }\n+}\n```\n\n`variablesHtml` is a function that receives an object mapping “variables” to\nstrings and returns an HTML extension.\nThe extension hooks two functions to `variableString`, one when it starts,\nthe other when it ends.\nWe don’t need to do anything to handle the other tokens as they’re already\nignored by default.\n`enterVariableString` calls `buffer`, which is a function that “stashes” what\nwould otherwise be emitted.\n`exitVariableString` calls `resume`, which is the inverse of `buffer` and\nreturns the stashed value.\nIf the variable is defined, we ensure it’s made safe (with `this.encode`) and\nfinally output that (with `this.raw`).\n\n##### Further exercises\n\nIt works!\nWe’re done!\nOf course, it can be better, such as with the following potential features:\n\n*   Add support for empty variables\n*   Add support for spaces between markers and string\n*   Add support for line endings in variables\n*   Add support for nested braces\n*   Add support for blocks\n*   Add warnings on undefined variables\n*   Use `micromark-build`, and use `assert`, `debug`, and\n    `micromark-util-symbol` (see [§ Size & debug][size-debug])\n*   Add [`mdast-util-from-markdown`][from-markdown] and\n    [`mdast-util-to-markdown`][to-markdown] utilities to parse and serialize the\n    AST\n\n#### Case: turn off constructs\n\nSometimes it’s needed to turn a default construct off.\nThat’s possible through a syntax extension.\nNote that not everything can be turned off (such as paragraphs) and even if it’s\npossible to turn something off, it could break micromark (such as character\nescapes).\n\nTo disable constructs, refer to them by name in an array at the `disable.null`\nfield of an extension:\n\n```js\nimport {micromark} from 'micromark'\n\nconst extension = {disable: {null: ['codeIndented']}}\n\nconsole.log(micromark('\\ta', {extensions: [extension]}))\n```\n\nYields:\n\n```html\n<p>a</p>\n```\n\n## Architecture\n\nmicromark is maintained as a monorepo.\nMany of its internals, which are used in `micromark` (core) but also useful for\ndevelopers of extensions or integrations, are available as separate modules.\nEach module maintained here is available in [`packages/`][packages].\n\n### Overview\n\nThe naming scheme in [`packages/`][packages] is as follows:\n\n*   `micromark-build`\n    — Small CLI to build dev code into production code\n*   `micromark-core-commonmark`\n    — CommonMark constructs used in micromark\n*   `micromark-factory-*`\n    — Reusable subroutines used to parse parts of constructs\n*   `micromark-util-*`\n    — Reusable helpers often needed when parsing markdown\n*   `micromark`\n    — Core module\n\nmicromark has two interfaces: buffering (maintained in\n[`micromark/dev/index.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/index.js))\nand streaming (maintained in\n[`micromark/dev/stream.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/stream.js)).\nThe first takes all input at once whereas the last uses a Node.js stream to take\ninput separately.\nThey thinly wrap how data flows through micromark:\n\n```txt\n                                            micromark\n+-----------------------------------------------------------------------------------------------+\n|            +------------+         +-------+         +-------------+         +---------+       |\n| -markdown->+ preprocess +-chunks->+ parse +-events->+ postprocess +-events->+ compile +-html- |\n|            +------------+         +-------+         +-------------+         +---------+       |\n+-----------------------------------------------------------------------------------------------+\n```\n\n### Preprocess\n\nThe **preprocessor**\n([`micromark/dev/lib/preprocess.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/lib/preprocess.js))\ntakes markdown and turns it into chunks.\n\nA **chunk** is either a character code or a slice of a buffer in the form of a\nstring.\nChunks are used because strings are more efficient storage than character codes,\nbut limited in what they can represent.\nFor example, the input `ab\\ncd` is represented as `['ab', -4, 'cd']` in chunks.\n\nA character **code** is often the same as what `String#charCodeAt()` yields but\nmicromark adds meaning to certain other values.\n\nIn micromark, the actual character U+0009 CHARACTER TABULATION (HT) is replaced\nby one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL SPACE (VS)\ncharacters, depending on the column at which the tab occurred.\nFor example, the input `\\ta` is represented as `[-2, -1, -1, -1, 97]` and `a\\tb`\nas `[97, -2, -1, -1, 98]` in character codes.\n\nThe characters U+000A LINE FEED (LF) and U+000D CARRIAGE RETURN (CR) are\nreplaced by virtual characters depending on whether they occur together: M-0003\nCARRIAGE RETURN LINE FEED (CRLF), M-0004 LINE FEED (LF), and M-0005 CARRIAGE\nRETURN (CR).\nFor example, the input `a\\r\\nb\\nc\\rd` is represented as\n`[97, -5, 98, -4, 99, -3, 100]` in character codes.\n\nThe `0` (U+0000 NUL) character code is replaced by U+FFFD REPLACEMENT CHARACTER\n(`�`).\n\nThe `null` code represents the end of the input stream (called *eof* for end of\nfile).\n\n### Parse\n\nThe **parser**\n([`micromark/dev/lib/parse.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/lib/parse.js))\ntakes chunks and turns them into events.\n\nAn **event** is the start or end of a token amongst other events.\nTokens can “contain” other tokens, even though they are stored in a flat list,\nby entering before and exiting after them.\n\nA **token** is a span of one or more codes.\nTokens are most of what micromark produces: the built in HTML compiler or other\ntools can turn them into different things.\nTokens are essentially names attached to a slice, such as `lineEndingBlank` for\ncertain line endings, or `codeFenced` for a whole fenced code.\n\nSometimes, more info is attached to tokens, such as `_open` and `_close` by\n`attention` (strong, emphasis) to signal whether the sequence can open or close\nan attention run.\nThese fields have to do with how the parser works, which is complex and not\nalways pretty.\n\nCertain fields (`previous`, `next`, and `contentType`) are used in many cases:\nlinked tokens for subcontent.\nLinked tokens are used because outer constructs are parsed first.\nTake for example:\n\n```markdown\n- *a\n  b*.\n```\n\n1.  The list marker and the space after it is parsed first\n2.  The rest of the line is a `chunkFlow` token\n3.  The two spaces on the second line are a `linePrefix` of the list\n4.  The rest of the line is another `chunkFlow` token\n\nThe two `chunkFlow` tokens are linked together and the chunks they span are\npassed through the flow tokenizer.\nThere the chunks are seen as `chunkContent` and passed through the content\ntokenizer.\nThere the chunks are seen as a paragraph and seen as `chunkText` and passed\nthrough the text tokenizer.\nFinally, the attention (emphasis) and data (“raw” characters) is parsed there,\nand we’re done!\n\n#### Content types\n\nThe parser starts out with a document tokenizer.\n*Document* is the top-most content type, which includes containers such as block\nquotes and lists.\nContainers in markdown come from the margin and include more constructs\non the lines that define them.\n\n*Flow* represents the sections (block constructs such as ATX and setext\nheadings, HTML, indented and fenced code, thematic breaks), which like\n*document* are also parsed per line.\nAn example is HTML, which has a certain starting condition (such as `<script>`\non its own line), then continues for a while, until an end condition is found\n(such as `</style>`).\nIf that line with an end condition is never found, that flow goes until the end.\n\n*Content* is zero or more definitions, and then zero or one paragraph.\nIt’s a weird one, and needed to make certain edge cases around definitions spec\ncompliant.\nDefinitions are unlike other things in markdown, in that they behave like *text*\nin that they can contain arbitrary line endings, but *have* to end at a line\nending.\nIf they end in something else, the whole definition instead is seen as a\nparagraph.\n\nThe content in markdown first needs to be parsed up to this level to figure out\nwhich things are defined, for the whole document, before continuing on with\n*text*, as whether a link or image reference forms or not depends on whether\nit’s defined.\nThis unfortunately prevents a true streaming markdown parser.\n\n*Text* contains phrasing content (rich inline text: autolinks, character escapes\nand -references, code, hard breaks, HTML, images, links, emphasis, strong).\n\n*String* is a limited *text*-like content type which only allows character\nreferences and character escapes.\nIt exists in things such as identifiers (media references, definitions),\ntitles, or URLs and such.\n\n#### Constructs\n\nConstructs are the things that make up markdown.\nSome examples are lists, thematic breaks, or character references.\n\nNote that, as a general rule of thumb, markdown is *really weird*.\nIt’s essentially made up of edge cases rather than logical rules.\nWhen browsing the built in constructs, or venturing to build your own, you’ll\nfind confusing new things and run into complex custom hooks.\n\nOne more reasonable construct is the thematic break\n([see code](https://github.com/micromark/micromark/blob/main/packages/micromark-core-commonmark/dev/lib/thematic-break.js)).\nIt’s an object that defines a `name` and a `tokenize` function.\nMost of what constructs do is defined in their required `tokenize` function,\nwhich sets up a state machine to handle character codes streaming in.\n\n### Postprocess\n\nThe **postprocessor**\n([`micromark/dev/lib/postprocess.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/lib/postprocess.js))\nis a small step that takes events, ensures all their\nnested content is parsed, and returns the modified events.\n\n### Compile\n\nThe **compiler**\n([`micromark/dev/lib/compile.js`](https://github.com/micromark/micromark/blob/main/packages/micromark/dev/lib/compile.js))\ntakes events and turns them into HTML.\nWhile micromark was created mostly to advance markdown parsing irrespective of\ncompiling to HTML, the common case of doing so is built in.\nA built in HTML compiler is useful because it allows us to check for compliancy\nto CommonMark, the de facto norm of markdown, specified in roughly 650\ninput/output cases.\nThe parsing parts can still be used separately to build ASTs, CSTs, or many\nother output formats.\n\nThe compiler has an interface that accepts lists of events instead of the whole\nat once, but because markdown can’t truly stream, events are buffered before\ncompiling and outputting the final result.\n\n## Examples\n\n### GitHub flavored markdown (GFM)\n\nTo support GFM (autolink literals, strikethrough, tables, and tasklists) use\n[`micromark-extension-gfm`][gfm].\nSay we have a file like this:\n\n```markdown\n# GFM\n\n## Autolink literals\n\nwww.example.com, https://example.com, and contact@example.com.\n\n## Strikethrough\n\n~one~ or ~~two~~ tildes.\n\n## Table\n\n| a | b  |  c |  d  |\n| - | :- | -: | :-: |\n\n## Tasklist\n\n* [ ] to do\n* [x] done\n```\n\nThen do something like this:\n\n```js\nimport fs from 'node:fs'\nimport {micromark} from 'micromark'\nimport {gfm, gfmHtml} from 'micromark-extension-gfm'\n\nconst doc = fs.readFileSync('example.md')\n\nconsole.log(micromark(doc, {extensions: [gfm()], htmlExtensions: [gfmHtml]}))\n```\n\n<details>\n<summary>Show equivalent HTML</summary>\n\n```html\n<h1>GFM</h1>\n<h2>Autolink literals</h2>\n<p><a href=\"http://www.example.com\">www.example.com</a>, <a href=\"https://example.com\">https://example.com</a>, and <a href=\"mailto:contact@example.com\">contact@example.com</a>.</p>\n<h2>Strikethrough</h2>\n<p><del>one</del> or <del>two</del> tildes.</p>\n<h2>Table</h2>\n<table>\n<thead>\n<tr>\n<th>a</th>\n<th align=\"left\">b</th>\n<th align=\"right\">c</th>\n<th align=\"center\">d</th>\n</tr>\n</thead>\n</table>\n<h2>Tasklist</h2>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> to do</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> done</li>\n</ul>\n```\n\n</details>\n\n### Math\n\nTo support math use [`micromark-extension-math`][math].\nSay we have a file like this:\n\n```markdown\nLift($L$) can be determined by Lift Coefficient ($C_L$) like the following equation.\n\n$$\nL = \\frac{1}{2} \\rho v^2 S C_L\n$$\n```\n\nThen do something like this:\n\n```js\nimport fs from 'node:fs'\nimport {micromark} from 'micromark'\nimport {math, mathHtml} from 'micromark-extension-math'\n\nconst doc = fs.readFileSync('example.md')\n\nconsole.log(micromark(doc, {extensions: [math], htmlExtensions: [mathHtml()]}))\n```\n\n<details>\n<summary>Show equivalent HTML</summary>\n\n```html\n<p>Lift(<span class=\"math math-inline\"><span class=\"katex\">…</span></span>) can be determined by Lift Coefficient (<span class=\"math math-inline\"><span class=\"katex\">…</span></span>) like the following equation.</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\">…</span></span></div>\n```\n\n</details>\n\n### Footnotes\n\nTo support footnotes use [`micromark-extension-footnote`][footnotes].\nSay we have a file like this:\n\n```markdown\nHere is a footnote call,[^1] and another.[^longnote]\n\n[^1]: Here is the footnote.\n\n[^longnote]: Here’s one with multiple blocks.\n\n    Subsequent paragraphs are indented to show that they\nbelong to the previous footnote.\n\n        { some.code }\n\n    The whole paragraph can be indented, or just the first\n    line.  In this way, multi-paragraph footnotes work like\n    multi-paragraph list items.\n\nThis paragraph won’t be part of the note, because it\nisn’t indented.\n\nHere is an inline note.^[Inlines notes are easier to write, since\nyou don’t have to pick an identifier and move down to type the\nnote.]\n```\n\nThen do something like this:\n\n```js\nimport fs from 'node:fs'\nimport {micromark} from 'micromark'\nimport {footnote, footnoteHtml} from 'micromark-extension-footnote'\n\nconst doc = fs.readFileSync('example.md')\n\nconsole.log(\n  micromark(doc, {extensions: [footnote], htmlExtensions: [footnoteHtml()]})\n)\n```\n\n<details>\n<summary>Show equivalent HTML</summary>\n\n```html\n<p>Here is a footnote call,<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\"><sup>1</sup></a> and another.<a href=\"#fn2\" class=\"footnote-ref\" id=\"fnref2\"><sup>2</sup></a></p>\n<p>This paragraph won’t be part of the note, because it\nisn’t indented.</p>\n<p>Here is an inline note.<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\"><sup>1</sup></a></p>\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn1\">\n<p>Here is the footnote.<a href=\"#fnref1\" class=\"footnote-back\">↩︎</a></p>\n</li>\n<li id=\"fn2\">\n<p>Here’s one with multiple blocks.</p>\n<p>Subsequent paragraphs are indented to show that they\nbelong to the previous footnote.</p>\n<pre><code>{ some.code }\n</code></pre>\n<p>The whole paragraph can be indented, or just the first\nline.  In this way, multi-paragraph footnotes work like\nmulti-paragraph list items.<a href=\"#fnref2\" class=\"footnote-back\">↩︎</a></p>\n</li>\n<li id=\"fn3\">\n<p>Inlines notes are easier to write, since\nyou don’t have to pick an identifier and move down to type the\nnote.<a href=\"#fnref3\" class=\"footnote-back\">↩︎</a></p>\n</li>\n</ol>\n</div>\n```\n\n</details>\n\n### Syntax tree\n\nA higher level project, [`mdast-util-from-markdown`][from-markdown], can give\nyou an AST.\n\n```js\nimport fromMarkdown from 'mdast-util-from-markdown' // This wraps micromark.\n\nconst result = fromMarkdown('## Hello, *world*!')\n\nconsole.log(result.children[0])\n```\n\nYields:\n\n```js\n{\n  type: 'heading',\n  depth: 2,\n  children: [\n    {type: 'text', value: 'Hello, ', position: [Object]},\n    {type: 'emphasis', children: [Array], position: [Object]},\n    {type: 'text', value: '!', position: [Object]}\n  ],\n  position: {\n    start: {line: 1, column: 1, offset: 0},\n    end: {line: 1, column: 19, offset: 18}\n  }\n}\n```\n\nAnother level up is [**remark**][remark], which provides a nice interface and\nhundreds of plugins.\n\n## Markdown\n\n### CommonMark\n\nThe first definition of “Markdown” gave several examples of how it worked,\nshowing input Markdown and output HTML, and came with a reference implementation\n(`Markdown.pl`).\nWhen new implementations followed, they mostly followed the first definition,\nbut deviated from the first implementation, and added extensions, thus making\nthe format a family of formats.\n\nSome years later, an attempt was made to standardize the differences between\nimplementations, by specifying how several edge cases should be handled, through\nmore input and output examples.\nThis is known as [CommonMark][commonmark-spec], and many implementations now\nwork towards some degree of CommonMark compliancy.\nStill, CommonMark describes what the output in HTML should be given some\ninput, which leaves many edge cases up for debate, and does not answer what\nshould happen for other output formats.\n\nmicromark passes all tests from CommonMark and has many more tests to match the\nCommonMark reference parsers.\nFinally, it comes with [CMSM][], which describes how to parse markup, instead\nof documenting input and output examples.\n\n### Grammar\n\nThe syntax of markdown can be described in Backus–Naur form (BNF) as:\n\n```bnf\nmarkdown = .*\n```\n\nNo, that’s [not a typo](http://trevorjim.com/a-specification-for-markdown/):\nmarkdown has no syntax errors; anything thrown at it renders *something*.\n\n## Project\n\n### Comparison\n\nThere are many other markdown parsers out there and maybe they’re better suited\nto your use case!\nHere is a short comparison of a couple in JavaScript.\nNote that this list is made by the folks who make `micromark` and `remark`, so\nthere is some bias.\n\n**Note**: these are, in fact, not really comparable: micromark (and remark)\nfocus on completely different things than other markdown parsers do.\nSure, you can generate HTML from markdown with them, but micromark (and remark)\nare created for (abstract or concrete) syntax trees—to inspect, transform, and\ngenerate content, so that you can make things like [MDX][], [Prettier][], or\n[Gatsby][].\n\n###### micromark\n\nmicromark can be used in two different ways.\nIt can either be used, optionally with existing extensions, to get HTML easily.\nOr, it can give tremendous power, such as access to all tokens with positional\ninfo, at the cost of being hard to get into.\nIt’s super small, pretty fast, and has 100% CommonMark compliance.\nIt has syntax extensions, such as supporting 100% GFM compliance (with\n`micromark-extension-gfm`), but they’re rather complex to write.\nIt’s the newest parser on the block, which means it’s fresh and well suited for\ncontemporary markdown needs, but it’s also battle-tested, and already the 3rd\nmost popular markdown parser in JavaScript.\n\nIf you’re looking for fine grained control, use micromark.\nIf you just want HTML from markdown, use micromark.\n\n###### remark\n\n[remark][] is the most popular markdown parser.\nIt’s built on top of `micromark` and boasts syntax trees.\nFor an analogy, it’s like if Babel, ESLint, and more, were one project.\nIt supports the syntax extensions that micromark has (so it’s 100% CM compliant\nand can be 100% GFM compliant), but most of the work is done in plugins that\ntransform or inspect the tree, and there’s *tons* of them.\nTransforming the tree is relatively easy: it’s a JSON object that can be\nmanipulated directly.\nremark is stable, widely used, and extremely powerful for handling complex data.\n\nYou probably should use [remark][].\n\n###### marked\n\n[marked][] is the oldest markdown parser on the block.\nIt’s been around for ages, is battle tested, small, popular, and has a bunch of\nextensions, but doesn’t match CommonMark or GFM, and is unsafe by default.\n\nIf you have markdown you trust and want to turn it into HTML without a fuss, and\ndon’t care about perfect compatibility with CommonMark or GFM, but do appreciate\na small bundle size and stability, use [marked][].\n\n###### markdown-it\n\n[markdown-it][] is a good, stable, and essentially CommonMark compliant markdown\nparser, with (optional) support for some GFM features as well.\nIt’s used a lot as a direct dependency in packages, but is rather big.\nIt shines at syntax extensions, where you want to support not just markdown, but\n*your* (company’s) version of markdown.\n\nIf you need a couple of custom syntax extensions to your otherwise\nCommonMark-compliant markdown, and want to get HTML out, use [markdown-it][].\n\n###### Others\n\nThere are lots of other markdown parsers!\nSome say they’re small, or fast, or that they’re CommonMark compliant—but\nthat’s not always true.\nThis list is not supposed to be exhaustive (but it’s the most relevant ones).\nThis list of markdown parsers is a snapshot in time of why (not) to use\n(alternatives to) `micromark`: they’re all good choices, depending on what your\ngoals are.\n\n### Test\n\nmicromark is tested with the \\~650 CommonMark tests and more than 1.2k extra\ntests confirmed with CM reference parsers.\nThese tests reach all branches in the code, which means that this project has\n100% code coverage.\nFinally, we use fuzz testing to ensure micromark is stable, reliable, and\nsecure.\n\nTo build, format, and test the codebase, use `$ npm test` after clone and\ninstall.\nThe `$ npm run test-api` and `$ npm run test-coverage` scripts check either the\nunit tests, or both them and their coverage, respectively.\n\nThe `$ npm run test-fuzz` script does fuzz testing for 15 minutes.\nThe timeout is provided by GNU coreutils **timeout(1)**, which might not be\navailable on your system.\nEither install `timeout` or remove that part temporarily from the script and\nmanually exit the program after a while.\n\n### Size & debug\n\nmicromark is really small.\nA ton of time went into making sure it minifies well, by the way code is written\nbut also through custom build scripts to pre-evaluate certain expressions.\nFurthermore, care went into making it compress well with gzip and brotli.\n\nNormally, you’ll use the pre-evaluated version of micromark.\nWhile developing, debugging, or testing your code, you *should* switch to use\ncode instrumented with assertions and debug messages:\n\n```sh\nnode --conditions development module.js\n```\n\nTo see debug messages, use a `DEBUG` env variable set to `micromark`:\n\n```sh\nDEBUG=\"*\" node --conditions development module.js\n```\n\n### Version\n\nmicromark adheres to [semver](https://semver.org) since 3.0.0.\n\n### Security\n\nThe typical security aspect discussed for markdown is [cross-site scripting\n(XSS)][xss] attacks.\nMarkdown itself is safe if it does not include embedded HTML or dangerous\nprotocols in links/images (such as `javascript:` or `data:`).\nmicromark makes any markdown safe by default, even if HTML is embedded or\ndangerous protocols are used, as it encodes or drops them.\nTurning on the `allowDangerousHtml` or `allowDangerousProtocol` options for\nuser-provided markdown opens you up to XSS attacks.\n\nAnother security aspect is DDoS attacks.\nFor example, an attacker could throw a 100mb file at micromark, in which case\nthe JavaScript engine will run out of memory and crash.\nIt is also possible to crash micromark with smaller payloads, notably when\nthousands of links, images, emphasis, or strong are opened but not closed.\nIt is wise to cap the accepted size of input (500kb can hold a big book) and to\nprocess content in a different thread or worker so that it can be stopped when\nneeded.\n\nUsing extensions might also be unsafe, refer to their documentation for more\ninformation.\n\nFor more information on markdown sanitation, see\n[`improper-markup-sanitization.md`][improper] by [**@chalker**][chalker].\n\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n### Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n### Sponsor\n\nSupport this effort and give back by sponsoring on [OpenCollective][]!\n\n<table>\n<tr valign=\"middle\">\n<td width=\"100%\" align=\"center\" colspan=\"10\">\n  <br>\n  <a href=\"https://www.salesforce.com\">Salesforce</a> 🏅<br><br>\n  <a href=\"https://www.salesforce.com\"><img src=\"https://images.opencollective.com/salesforce/ca8f997/logo/512.png\" width=\"256\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://www.gatsbyjs.org\">Gatsby</a> 🥇<br><br>\n  <a href=\"https://www.gatsbyjs.org\"><img src=\"https://avatars1.githubusercontent.com/u/12551863?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://vercel.com\">Vercel</a> 🥇<br><br>\n  <a href=\"https://vercel.com\"><img src=\"https://avatars1.githubusercontent.com/u/14985020?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" colspan=\"2\">\n  <a href=\"https://www.netlify.com\">Netlify</a><br><br>\n  <!--OC has a sharper image-->\n  <a href=\"https://www.netlify.com\"><img src=\"https://images.opencollective.com/netlify/4087de2/logo/256.png\" width=\"128\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://www.holloway.com\">Holloway</a><br><br>\n  <a href=\"https://www.holloway.com\"><img src=\"https://avatars1.githubusercontent.com/u/35904294?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://themeisle.com\">ThemeIsle</a><br><br>\n  <a href=\"https://themeisle.com\"><img src=\"https://avatars1.githubusercontent.com/u/58979018?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://boosthub.io\">Boost Hub</a><br><br>\n  <a href=\"https://boosthub.io\"><img src=\"https://images.opencollective.com/boosthub/6318083/logo/128.png\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://expo.io\">Expo</a><br><br>\n  <a href=\"https://expo.io\"><img src=\"https://avatars1.githubusercontent.com/u/12504344?s=128&v=4\" width=\"64\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n<td width=\"100%\" align=\"center\" colspan=\"10\">\n  <br>\n  <a href=\"https://opencollective.com/unified\"><strong>You?</strong></a>\n  <br><br>\n</td>\n</tr>\n</table>\n\n### Origin story\n\nOver the summer of 2018, micromark was planned, and the idea shared in August\nwith a couple of friends and potential sponsors.\nThe problem I (**[@wooorm][]**) had was that issues were piling up in remark and\nother repos, but my day job (teaching) was fun, fulfilling, and deserved time\ntoo.\nIt was getting hard to combine the two.\nThe thought was to feed two birds with one scone: fix the issues in remark with\na new markdown parser (codename marydown) while being financially supported by\nsponsors building fancy stuff on top, such as Gatsby, Contentful, and Vercel\n(ZEIT at the time).\n**[@johno][]** was making MDX on top of remark at the time (important historical\nnote: several other folks were working on JSX + markdown too).\nWe bundled our strengths: MDX was getting some traction and we thought together\nwe could perhaps make something sustainable.\n\nIn November 2018, we launched with the idea for micromark to solve all existing\nbugs, sustaining the existing hundreds of projects, and furthering the exciting\nhigh-level project MDX.\nWe pushed a single name: unified (which back then was a small but essential\npart of the chain).\nGatsby and Vercel were immediate sponsors.\nWe didn’t know whether it would work, and it worked.\nBut now you have a new problem: you are getting some financial support (much\nmore than other open source projects) but it’s not enough money for rent, and\ntoo much money to print stickers with.\nYou still have your job and issues are still piling up.\n\nAt the start of summer 2019, after a couple months of saving up donations, I\nquit my job and worked on unified through fall.\nThat got the number of open issues down significantly and set up a strong\ngovernance and maintenance system for the collective.\nBut when the time came to work on micromark, the money was gone again, so I\ncontracted through winter 2019, and in spring 2020 I could do about half open\nsource, half contracting.\nOne of the contracting gigs was to write a new MDX parser, for which I also\ndocumented how to do that with a state machine [in prose][mdx-cmsm].\nThat gave me the insight into how the same could be done for markdown: I drafted\n[CMSM][], which was some of the core ideas for micromark, but in prose.\n\nIn May 2020, Salesforce reached out: they saw the bugs in remark, how micromark\ncould help, and the initial work on CMSM.\nAnd they had thousands of Markdown files.\nIn a for open source uncharacteristic move, they decided to fund my work on\nmicromark.\nA large part of what maintaining open source means, is putting out fires,\ntriaging issues, and making sure users and sponsors are happy, so it was\namazing to get several months to just focus and make something new.\nI remember feeling that this project would probably be the hardest thing I’d\nwork on: yeah, parsers are pretty difficult, but markdown is on another level.\nMarkdown is such a giant stack of edge cases on edge cases on even more\nweirdness, what a mess.\nOn August 20, 2020, I released [2.0.0][200], the first working version of\nmicromark.\nAnd it’s hard to describe how that moment felt.\nIt was great.\n\n### License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark.svg\n\n[downloads]: https://www.npmjs.com/package/micromark\n\n[bundle-size-badge]: https://img.shields.io/bundlephobia/minzip/micromark.svg\n\n[bundle-size]: https://bundlephobia.com/result?p=micromark\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\n[securitymd]: https://github.com/micromark/.github/blob/HEAD/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/micromark/.github/blob/HEAD/code-of-conduct.md\n\n[cheat]: https://commonmark.org/help/\n\n[twitter]: https://twitter.com/unifiedjs\n\n[remark]: https://github.com/remarkjs/remark\n\n[rehype]: https://github.com/rehypejs/rehype\n\n[site]: https://unifiedjs.com\n\n[contribute]: #contribute\n\n[encoding]: https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings\n\n[buffer]: https://nodejs.org/api/buffer.html\n\n[commonmark-spec]: https://commonmark.org\n\n[popular]: https://www.npmtrends.com/remark-parse-vs-marked-vs-markdown-it\n\n[remark-parse]: https://unifiedjs.com/explore/package/remark-parse/\n\n[improper]: https://github.com/ChALkeR/notes/blob/master/Improper-markup-sanitization.md\n\n[chalker]: https://github.com/ChALkeR\n\n[cmsm]: https://github.com/micromark/common-markup-state-machine\n\n[mdx-cmsm]: https://github.com/micromark/mdx-state-machine\n\n[from-markdown]: https://github.com/syntax-tree/mdast-util-from-markdown\n\n[to-markdown]: https://github.com/syntax-tree/mdast-util-to-markdown\n\n[directives]: https://github.com/micromark/micromark-extension-directive\n\n[footnotes]: https://github.com/micromark/micromark-extension-footnote\n\n[frontmatter]: https://github.com/micromark/micromark-extension-frontmatter\n\n[gfm]: https://github.com/micromark/micromark-extension-gfm\n\n[math]: https://github.com/micromark/micromark-extension-math\n\n[mdxjs]: https://github.com/micromark/micromark-extension-mdxjs\n\n[constructs]: /packages/micromark/dev/lib/constructs.js\n\n[comparison]: #comparison\n\n[extensions]: #list-of-extensions\n\n[syntax-extension]: #syntaxextension\n\n[html-extension]: #htmlextension\n\n[option-extensions]: #optionsextensions\n\n[option-htmlextensions]: #optionshtmlextensions\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[utilities]: https://github.com/syntax-tree/mdast#list-of-utilities\n\n[unified]: https://github.com/unifiedjs/unified\n\n[remark plugins]: https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins\n\n[rehype plugins]: https://github.com/rehypejs/rehype/blob/main/doc/plugins.md#list-of-plugins\n\n[directive-proposal]: https://talk.commonmark.org/t/generic-directives-plugins-syntax/444\n\n[architecture]: #architecture\n\n[extending-markdown]: #extending-markdown\n\n[create-extension]: #creating-a-micromark-extension\n\n[mdx-expression]: https://github.com/micromark/micromark-extension-mdx-expression\n\n[preprocess]: #preprocess\n\n[content-types]: https://github.com/micromark/micromark#content-types\n\n[postprocess]: https://github.com/micromark/micromark#postprocess\n\n[size-debug]: https://github.com/micromark/micromark#size--debug\n\n[packages]: https://github.com/micromark/micromark/tree/main/packages\n\n[marked]: https://github.com/markedjs/marked\n\n[markdown-it]: https://github.com/markdown-it/markdown-it\n\n[mdx]: https://github.com/mdx-js/mdx\n\n[prettier]: https://github.com/prettier/prettier\n\n[gatsby]: https://github.com/gatsbyjs/gatsby\n\n[commonmark]: #commonmark\n\n[size]: #size--debug\n\n[test]: #test\n\n[security]: #security\n\n[sponsor]: #sponsor\n\n[@wooorm]: https://github.com/wooorm\n\n[@johno]: https://github.com/johno\n\n[200]: https://github.com/micromark/micromark/releases/tag/2.0.0\n","readmeFilename":"readme.md","homepage":"https://github.com/micromark/micromark/tree/main#readme","_id":"micromark@3.0.0-beta.1","_nodeVersion":"16.2.0","_npmVersion":"7.18.1","dist":{"integrity":"sha512-8xZZ7knJxIGWgdC89/5lkQq3KNRpZNHWd8tbujWTQCm/mrRJ3qNlWC3nvZ4D7YpnDmxLBhdwuacL8flOhX0+Aw==","shasum":"94e45ecc94137f7b86b9cd31a7f8ba7e134a3617","tarball":"https://registry.npmjs.org/micromark/-/micromark-3.0.0-beta.1.tgz","fileCount":49,"unpackedSize":169081,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgzzC0CRA9TVsSAnZWagAA5vUP/iHtwu8MpSpODg6JjjSL\npurgz+Khru79LTHaoTnSj6RjRHZ/I415l5A1B2dSY4FcJQNwfy6IkLZHcAdf\nZdA3VC346lUYPUc8LbfJU3r3ygEJLma0o/dIXzYZ9eNTT+pbTyH9HwBq02XK\nPtsnfo5+i8JwUFRtyDj3VA4GeCGa+hbtTyXb89Gdp51lYna+RuPgut40FXJY\npwG4frsucPY6DdhFuF3pP8bx0bMgupw9H5NLOS8SbKoZbCvXwnPmvyzRrfwD\nQ/DWCq/+eV9X2VvzZ2ibel+zZmmaXx6fGlP0q3uoXlLq5yDtV79zQ3iqrMwY\n0kXjL+UUu7fvT9AKHibT5C7EiqgVoStybwpYx3o5drwz5G7bp1ZHB6it9VHZ\nO85Lp8iwSIDtcxV+hmMkHIYTOPBkP2Aco0R3acQY3hvnFrzrE3KP5FhhsnpD\nruzJV4lI95/oOyyxRy5GXC1QhqegGqqPC3vqLMk1HHRqh6QzesgLPxlqFyfB\nc52c3a0Qtk/SFtCMbDDcPFYjfZpO5xcRUVhwkhogGHjsoSVV5W4Pa1XJjyi2\ngID4TWdMF9KKArAkC43BLJS6o1yHlwe0fmSplTGgAFbRXpv3hOUy5E84BhvX\n5/4SGyvzYraG6TFpWN/SpjRcedQeD5qOmjSq8x7pKfEJCPnQ3udJjZCMKkWM\nQfnM\r\n=TGLg\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDTTbt7Meqk03d0XJI6YPoPm8jv+NC5t9wJx8ju48cseQIhAOHVRDPbbxBbsvE4ApJX6Ez67Pn0ZvMCTMmIHoO50u6w"}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_3.0.0-beta.1_1624191156052_0.9366489281762773"},"_hasShrinkwrap":false},"3.0.0":{"name":"micromark","version":"3.0.0","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git#main"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"sideEffects":false,"type":"module","main":"index.js","types":"dev/index.d.ts","exports":{".":{"development":"./dev/index.js","default":"./index.js"},"./stream":{"development":"./dev/stream.js","default":"./stream.js"},"./stream.js":{"development":"./dev/stream.js","default":"./stream.js"},"./lib/compile":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/compile.js":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/parse":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/parse.js":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/postprocess":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/postprocess.js":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/preprocess":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"},"./lib/preprocess.js":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"}},"dependencies":{"@types/debug":"^4.0.0","debug":"^4.0.0","micromark-core-commonmark":"^1.0.0","micromark-factory-space":"^1.0.0","micromark-util-character":"^1.0.0","micromark-util-chunked":"^1.0.0","micromark-util-combine-extensions":"^1.0.0","micromark-util-decode-numeric-character-reference":"^1.0.0","micromark-util-encode":"^1.0.0","micromark-util-normalize-identifier":"^1.0.0","micromark-util-resolve-all":"^1.0.0","micromark-util-sanitize-uri":"^1.0.0","micromark-util-subtokenize":"^1.0.0","micromark-util-symbol":"^1.0.0","micromark-util-types":"^1.0.0","parse-entities":"^3.0.0"},"scripts":{"build":"rimraf \"*.d.ts\" \"{dev/,lib/}**/*.d.ts\" && tsc && micromark-build && type-coverage"},"xo":false,"typeCoverage":{"atLeast":100,"detail":true,"strict":true,"ignoreCatch":true},"homepage":"https://github.com/micromark/micromark/tree/main#readme","_id":"micromark@3.0.0","_nodeVersion":"16.2.0","_npmVersion":"7.18.1","dist":{"integrity":"sha512-8Cr7b64q0va2LFrSFT9T2k1LlsW2iqfEsoZFYWZP3y+K8wYy8nL0LyhB/1jiLadtDjTz3qSP9AF5hS+W594qoA==","shasum":"baaf7ee1755a80127a8cefdf8a89a8260a896e6a","tarball":"https://registry.npmjs.org/micromark/-/micromark-3.0.0.tgz","fileCount":47,"unpackedSize":160804,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg0jP4CRA9TVsSAnZWagAA7bsP/1uwj20nDsNKmIYC20Ps\nRIgNOACxOm1hY6IN7Xmq2ayU8gd0Acyzqe+jjXHXUF5CEVJlXXEaulx2BpuQ\ne333bIDcgfmZFMJS3E4Rcg+A2/QfKtsYufWZ1vsy1pnvyCkWU/Cn0EOpBPzs\nmBFGnTDi82GaUOf7Bx+Op7CNOEjsYuGk09sedznu6/lp0QFLuYyCa4CI1i3F\nU/CG4oXOPm9OpUn6LIC9ANX7ZWv2FQQyE3X2frPNP6+8Dm2Nz2ReO8bU9zal\nU6vpA9+x0XNFl2KrMofe4ujRMXWdpl395s6QrekEuQT/BwHcR2i9NeFN8t7d\ndm9qrZEFcH+L0VkxFmUF38UR7Pgxg6lP8IZU6SYCE1J/wTQIY3C/ETKXBAoK\nhfspDi2zY3lpwabalUvEur2W2PYMAQOxaYvslSGj/8Vnz9ZVLVisJBGWj3RJ\ngIc3ft2f5cSGHxMyKuOa4DyWNdNqVA9lrfsR2p2a2rMPWeHdfbb1nSMutXd9\nOGXy3g3gh7stUkCJhMrYymhbX7RhvtvPISJ2WnUfkHckkh5XzWYIgJ4N8vK0\nAE8uUbgqUPn1roaBgYyZigN+iRaurF0xF7FbtlRMusn6ScWaQqmxEhzEraTS\naJVIK/d0/QH/2EZHTxrnF6MAvfi2DOhO3lCsFp5RLrPJCT6QsUkYBsbjhOFN\nvhpI\r\n=0v0p\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDmFI/d3P1bu57ThOgOFKw17uG4ssFsrCxl+Y5Cndl+4AiBe2tX3IIN9jNkxwauLeYDPVWjcZLZHMSNvWj/1qQARvQ=="}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_3.0.0_1624388599310_0.8189620142329992"},"_hasShrinkwrap":false},"3.0.1":{"name":"micromark","version":"3.0.1","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git#main"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"sideEffects":false,"type":"module","main":"index.js","types":"dev/index.d.ts","exports":{".":{"development":"./dev/index.js","default":"./index.js"},"./stream":{"development":"./dev/stream.js","default":"./stream.js"},"./stream.js":{"development":"./dev/stream.js","default":"./stream.js"},"./lib/compile":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/compile.js":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/parse":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/parse.js":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/postprocess":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/postprocess.js":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/preprocess":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"},"./lib/preprocess.js":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"}},"dependencies":{"@types/debug":"^4.0.0","debug":"^4.0.0","micromark-core-commonmark":"^1.0.0","micromark-factory-space":"^1.0.0","micromark-util-character":"^1.0.0","micromark-util-chunked":"^1.0.0","micromark-util-combine-extensions":"^1.0.0","micromark-util-decode-numeric-character-reference":"^1.0.0","micromark-util-encode":"^1.0.0","micromark-util-normalize-identifier":"^1.0.0","micromark-util-resolve-all":"^1.0.0","micromark-util-sanitize-uri":"^1.0.0","micromark-util-subtokenize":"^1.0.0","micromark-util-symbol":"^1.0.0","micromark-util-types":"^1.0.0","parse-entities":"^3.0.0"},"scripts":{"build":"rimraf \"*.d.ts\" \"{dev/,lib/}**/*.d.ts\" && tsc && micromark-build && type-coverage"},"xo":false,"typeCoverage":{"atLeast":100,"detail":true,"strict":true,"ignoreCatch":true},"homepage":"https://github.com/micromark/micromark/tree/main#readme","_id":"micromark@3.0.1","_nodeVersion":"16.2.0","_npmVersion":"7.18.1","dist":{"integrity":"sha512-DqC0I0V6D3wy/XmJTK1Tn+JPlMk7phhtDQ7ZJIZgAzHTyeVXMDdOaHQ2WQ7i5z3Bh4JK66nLBmjtgMrWwe8eMw==","shasum":"eb45f4608e82b075715e3f7756c38bfc8cc95785","tarball":"https://registry.npmjs.org/micromark/-/micromark-3.0.1.tgz","fileCount":48,"unpackedSize":220394,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg8X80CRA9TVsSAnZWagAAyqoQAJtS5+IdfN8vRyQwvTHz\nEPMeBrXBwFe/im9+aXv76DvP6XzehkbG8cK7I9kWVtqHIDDH2wmBAHMnU+A7\nMu2+sHYrTioQ2Gdy2vCDp4QxQKWBT80L7YNJNVo6gW84Wgm2jVjd3r2n3W9y\nukGybR9djXG4HT3nWg4AGT17b4RXY/c211OibbVKeEiBbK9f1JCUppLuKfcD\nEs0rYjbmL/BJ49+a8K2Cj6zqsKLBAWA6f8w1WXDqsMN6QFWSQhsmoAK9TuMC\n/Xo1UYNg+ObGDRqIgaEEOuXGnoalwx/RZtQ6fRyHbJs/bfAtq772EvJ6G2aP\n6r9wWLBBfqtaFrWGbltigXNZWhZOhcDyACRZcHLHC1xQiXfWmg/orVw/uFBe\npzHwjEWrlFUrmUsro3zWEkGcFgi1MAIDfHHL0eOvgant5g26MWQxfIcFjwvb\na9XpWID03NFS/B2KpJB2UDWtZN6fU0BqugNXPOUEp0NjjS3s8PE3KTnZGhRH\nsxB8k8x46ArWdl0J/sDAg6yvXzPu5vv3FB/m/AN52rgrOYvMbz6LTpwni84T\nf5mg6YUkZjjRaQSCW0y+XPBd4Ep69J9cpXlXz6Z7PvM9eSrDY0A8q/lYpq2X\nWzoeKFcypBsYkA/bQTmrgMGMQKaFNr2ALYigMqWAYJUX8Yo0x+/+1JhZ+0mg\no1AH\r\n=QU4+\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGR+mpVszHRpNiaywyQI/o+kGIM1yErDzR5KE4iiz7LqAiA2tyT/e1ssw3OuqNTO70oJ0lzPdB7r8kdpxlkzFN8WKg=="}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_3.0.1_1626439476472_0.8207399259262154"},"_hasShrinkwrap":false},"3.0.2":{"name":"micromark","version":"3.0.2","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git#main"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"sideEffects":false,"type":"module","main":"index.js","types":"dev/index.d.ts","exports":{".":{"development":"./dev/index.js","default":"./index.js"},"./stream":{"development":"./dev/stream.js","default":"./stream.js"},"./stream.js":{"development":"./dev/stream.js","default":"./stream.js"},"./lib/compile":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/compile.js":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/parse":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/parse.js":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/postprocess":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/postprocess.js":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/preprocess":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"},"./lib/preprocess.js":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"}},"dependencies":{"@types/debug":"^4.0.0","debug":"^4.0.0","micromark-core-commonmark":"^1.0.0","micromark-factory-space":"^1.0.0","micromark-util-character":"^1.0.0","micromark-util-chunked":"^1.0.0","micromark-util-combine-extensions":"^1.0.0","micromark-util-decode-numeric-character-reference":"^1.0.0","micromark-util-encode":"^1.0.0","micromark-util-normalize-identifier":"^1.0.0","micromark-util-resolve-all":"^1.0.0","micromark-util-sanitize-uri":"^1.0.0","micromark-util-subtokenize":"^1.0.0","micromark-util-symbol":"^1.0.0","micromark-util-types":"^1.0.0","parse-entities":"^3.0.0"},"scripts":{"build":"rimraf \"*.d.ts\" \"{dev/,lib/}**/*.d.ts\" && tsc && micromark-build && type-coverage"},"xo":false,"typeCoverage":{"atLeast":100,"detail":true,"strict":true,"ignoreCatch":true},"homepage":"https://github.com/micromark/micromark/tree/main#readme","_id":"micromark@3.0.2","_nodeVersion":"16.2.0","_npmVersion":"7.18.1","dist":{"integrity":"sha512-HODS6IsWvLFKfCl39MCzIVEWZZDNpvlmMtNxXDgikxY4KRRAaQayo3W479yDuaIKS23N3Ek/qvOMU8aFi4mMyQ==","shasum":"9c9509a5a7f36fbfdb269a59ff7829807f44f188","tarball":"https://registry.npmjs.org/micromark/-/micromark-3.0.2.tgz","fileCount":48,"unpackedSize":220800,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg/Eh3CRA9TVsSAnZWagAAyJwQAJrT9Xw471dD2opLfgPp\net+XO0JKx5f4lmiLNaa2zn0erJOLzIwVCYZmsUYkYlIqpCKFEGuw3fQ4iFJU\nWzYxU0Ts1l1IJ9NCI2HgRsqW3BexaGX7vCHQbQVGseR4kGteqdb5GM+FQzXg\nVQYqVJ4CHe+k/rl8PBqiSvCtPXZYC7YGkNh5TG8QJWiN/BpcMG6jpv3fx0Q6\nmGW5gV2xI3hFNokO+hJafCVfyZAL9O6lszMJ3PvQmZZK9gUWzxBvWgYYkc/1\neh7PL0O3B+PYOv3Vbk3KqsMbp5K6fKayw7slOwPWd3uasZssJWbRfuKbCfE5\nRHxk/tZpWZLPRimBT7al0jBQCtV+ApSAt2sfLOTp2ttgmMq5p2LaTVjmwtP4\n/kmAQ0WN3iCW61hpp8GpXwLgYuokoqvDLqnSZyKmAnuchtqp4rZkVee9q6fo\nSAXf7kPdcvKqnjGH3GMe5mujXnb85maD4cU1XAybsK4Pg8ETB/z58D/1clPr\non4pUjTK9xkRo/vm3h/1opt9DbBGlTDhmw/qcwo7KZoNPk6rcbl2ljmt1EWD\nSqABlhulBSFcC22Wwm7RrMV+MTcpomfRtn4cwDmJ9rBbRqDIc1m6AIJwqMtc\nu+UH826f7bGi4T3wUsXDJrZv+SUqaJGbmPCjsKjxTeFntvfZjQADVuOH9Qh2\nY8Er\r\n=diDY\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCzVjxdG8kcjYaIF8mPrMHRBhG+lfmrytaxqfVXDHMlkAIgBz0gztJvXpeuKmXTd35BHgVFiB7Qx3t2dcHt8iGl/g4="}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_3.0.2_1627146359230_0.0991821835476141"},"_hasShrinkwrap":false},"3.0.3":{"name":"micromark","version":"3.0.3","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git#main"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"sideEffects":false,"type":"module","main":"index.js","types":"dev/index.d.ts","exports":{".":{"development":"./dev/index.js","default":"./index.js"},"./stream":{"development":"./dev/stream.js","default":"./stream.js"},"./stream.js":{"development":"./dev/stream.js","default":"./stream.js"},"./lib/compile":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/compile.js":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/parse":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/parse.js":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/postprocess":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/postprocess.js":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/preprocess":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"},"./lib/preprocess.js":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"}},"dependencies":{"@types/debug":"^4.0.0","debug":"^4.0.0","micromark-core-commonmark":"^1.0.0","micromark-factory-space":"^1.0.0","micromark-util-character":"^1.0.0","micromark-util-chunked":"^1.0.0","micromark-util-combine-extensions":"^1.0.0","micromark-util-decode-numeric-character-reference":"^1.0.0","micromark-util-encode":"^1.0.0","micromark-util-normalize-identifier":"^1.0.0","micromark-util-resolve-all":"^1.0.0","micromark-util-sanitize-uri":"^1.0.0","micromark-util-subtokenize":"^1.0.0","micromark-util-symbol":"^1.0.0","micromark-util-types":"^1.0.0","parse-entities":"^3.0.0"},"scripts":{"build":"rimraf \"*.d.ts\" \"{dev/,lib/}**/*.d.ts\" && tsc && micromark-build && type-coverage"},"xo":false,"typeCoverage":{"atLeast":100,"detail":true,"strict":true,"ignoreCatch":true},"homepage":"https://github.com/micromark/micromark/tree/main#readme","_id":"micromark@3.0.3","_nodeVersion":"16.6.1","_npmVersion":"7.20.3","dist":{"integrity":"sha512-fWuHx+JKV4zA8WfCFor2DWP9XmsZkIiyWRGofr7P7IGfpRIlb7/C5wwusGsNyr1D8HI5arghZDG1Ikc0FBwS5Q==","shasum":"4c9f76fce8ba68eddf8730bb4fee2041d699d5b7","tarball":"https://registry.npmjs.org/micromark/-/micromark-3.0.3.tgz","fileCount":50,"unpackedSize":225841,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhCYWsCRA9TVsSAnZWagAAKLgQAJYu52LXWShagbLTNeSd\nLjEPFv7cz2850OaOUgwg6bMYPFULsr8TzrqZ6xdeSOyTxVffuJ7kutBGIoAj\nKRVFe0SeqdEc6UWirV2I6Dgpmoi5Aw9EmZpzCcJHrighh4fmeGyEE+GtJSlg\nqPh/t3c0yFxORS8pbv2isoZOVUSOe25wcxfSFULKdiKfP5zER0g/ztwEq5hk\nJAWkynrjE8UFM7tI+8ZttqfPPdCEqMg3u17sPHeT2APE8kSFZSo6B6LhSlaW\nR7NqYyxZgJj4ewTeEKzoEmn63AeVD6be/1xL03RROmuVcljRcCNrWHzyBa92\n2RTERqYHEdycBvm/pdX1hlLrZXte9aefSGeJwGoPmOJ479ztKMNL+e+BK79n\nKFLojnvr7s+CNRizJLyRhSkaKXJ8wi8OICvfVBdzixMRYV23wgJbJ/3eMTqn\n8fHOe1lbzvNEk0T6bFNAvdn77Z476+yTg57eQusxAjrFAki9yydTDAmUlMic\nSuMTcbMS4iscrBbh4GUU740KdyMEZmJGLSe3GkD3+yvhrJHiyHI/nWm7V9i/\nSd0zFdUW1gD6wCBbtMR7QVaw/XDL09D6P/+Czxm1NhrT/jyi1o7KePsjirsz\nafYSCJzhssaB23nYf6pflqPULDcHd7hY/67TCn/bPMcYHALGfsvzv7mOTY8t\nr62h\r\n=C9jK\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDCNKWt/q0mZUJuyeaIARcd7GFRMIURgtf7jRFhdjzXMAIhALYKKOxItbLySI7GvJCtyc4Is2nf7XuqsCOlWni+LXDZ"}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_3.0.3_1628013995975_0.8571185155931975"},"_hasShrinkwrap":false},"3.0.4":{"name":"micromark","version":"3.0.4","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git#main"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"sideEffects":false,"type":"module","main":"index.js","types":"dev/index.d.ts","exports":{".":{"development":"./dev/index.js","default":"./index.js"},"./stream":{"development":"./dev/stream.js","default":"./stream.js"},"./stream.js":{"development":"./dev/stream.js","default":"./stream.js"},"./lib/compile":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/compile.js":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/parse":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/parse.js":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/postprocess":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/postprocess.js":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/preprocess":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"},"./lib/preprocess.js":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"}},"dependencies":{"@types/debug":"^4.0.0","debug":"^4.0.0","micromark-core-commonmark":"^1.0.0","micromark-factory-space":"^1.0.0","micromark-util-character":"^1.0.0","micromark-util-chunked":"^1.0.0","micromark-util-combine-extensions":"^1.0.0","micromark-util-decode-numeric-character-reference":"^1.0.0","micromark-util-encode":"^1.0.0","micromark-util-normalize-identifier":"^1.0.0","micromark-util-resolve-all":"^1.0.0","micromark-util-sanitize-uri":"^1.0.0","micromark-util-subtokenize":"^1.0.0","micromark-util-symbol":"^1.0.0","micromark-util-types":"^1.0.0","parse-entities":"^3.0.0"},"scripts":{"build":"rimraf \"*.d.ts\" \"{dev/,lib/}**/*.d.ts\" && tsc && micromark-build && type-coverage"},"xo":false,"typeCoverage":{"atLeast":100,"detail":true,"strict":true,"ignoreCatch":true},"homepage":"https://github.com/micromark/micromark/tree/main#readme","_id":"micromark@3.0.4","_nodeVersion":"16.6.1","_npmVersion":"7.20.6","dist":{"integrity":"sha512-H8RU40LHR/E9/pZ4x/GkBw7JU5JbXus8YezNeROKpj2fKKNg5V4ItFEAPC6dX31kHtjVyjegsxQd/FX/eb3Mmg==","shasum":"dd470b4328b128c1bbd01073f5e3da95d2b03a44","tarball":"https://registry.npmjs.org/micromark/-/micromark-3.0.4.tgz","fileCount":50,"unpackedSize":228913,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhH4FXCRA9TVsSAnZWagAAByQP/iyin5YVzHD49u44Erya\nhnDEVLQiD/wgUrNIl3W21l+OB9j8EhIGJvch3zerPBZVZWwHtobA5ixW4Ma2\nG90nhSk2e4pj3Nv7HQrbiDZL+xIWgg6FTvO9DFoTA8ENn1SORnx6k+NiGgnF\nDqLt0AhukxUDjvse4N5WFktZCxvWY98eO7+uRfW6bXoF4IjBxpMJnhzga2le\ntO08prxywfLzyrabEu4LJo8H/2aw5U1LRGxYOFtMURAi8QW/D2UgnXlC7abr\nrhhGld2d4aBjiF9+4tzGR5WR72JVzyUhrQVE1++pnSe9+4HiDY7K9i+jm/el\nZSgHOCLDVVuGpYeUa0fKfw+NHptjGRx4ReOEvzQrMEln//Lm8jJm7QR6LUGK\nhfA0O/VI5c2FeJucUqA5AVfqEyy9TtaeSdJTtkpE4ge3vbTm0OkQDGQcEoW6\nYIBEPxhNNmEWpGJ7Xb1ZCcaVe5+AMRZHtHuS5D9VFaiItjzAEWePfVoU3nxk\nGH840s/gV+hoEwIYP9pCYWU59BLVl/L5YvntFdjsFZe5uSlIVAC7ZdIawjrV\nWV8AwYM1OhSBICBh+8ty5tx6xOL1b98rxTJOBanSOk4zHqMmNxD/FBbwvfNQ\n8tQb1Ccdjemh93XOi64OEcryKKVgB0QUeB4gRYbIMjK37yZTzmlJP9TmDEfC\nQbq+\r\n=DUUQ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDD0wd5r5rrtgw2txrN/pwfU4KNRNhimPnBI5o+CjRqZAIhANHY79DKnoh/oEXJa04NGpexTzC8r1XmfpqMGCr94j0F"}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_3.0.4_1629454679743_0.13353785471221546"},"_hasShrinkwrap":false},"3.0.5":{"name":"micromark","version":"3.0.5","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git#main"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"sideEffects":false,"type":"module","main":"index.js","types":"dev/index.d.ts","exports":{".":{"development":"./dev/index.js","default":"./index.js"},"./stream":{"development":"./dev/stream.js","default":"./stream.js"},"./stream.js":{"development":"./dev/stream.js","default":"./stream.js"},"./lib/compile":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/compile.js":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/parse":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/parse.js":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/postprocess":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/postprocess.js":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/preprocess":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"},"./lib/preprocess.js":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"}},"dependencies":{"@types/debug":"^4.0.0","debug":"^4.0.0","micromark-core-commonmark":"^1.0.1","micromark-factory-space":"^1.0.0","micromark-util-character":"^1.0.0","micromark-util-chunked":"^1.0.0","micromark-util-combine-extensions":"^1.0.0","micromark-util-decode-numeric-character-reference":"^1.0.0","micromark-util-encode":"^1.0.0","micromark-util-normalize-identifier":"^1.0.0","micromark-util-resolve-all":"^1.0.0","micromark-util-sanitize-uri":"^1.0.0","micromark-util-subtokenize":"^1.0.0","micromark-util-symbol":"^1.0.0","micromark-util-types":"^1.0.1","parse-entities":"^3.0.0"},"scripts":{"build":"rimraf \"*.d.ts\" \"{dev/,lib/}**/*.d.ts\" && tsc && micromark-build && type-coverage"},"xo":false,"typeCoverage":{"atLeast":100,"detail":true,"strict":true,"ignoreCatch":true},"homepage":"https://github.com/micromark/micromark/tree/main#readme","_id":"micromark@3.0.5","_nodeVersion":"16.6.1","_npmVersion":"7.20.6","dist":{"integrity":"sha512-QfjERBnPw0G9mxhOCkkbRP0n8SX8lIBLrEKeEVceviUukqVMv3hWE4AgNTOK/W6GWqtPvvIHg2Apl3j1Dxm6aQ==","shasum":"d24792c8a06f201d5608c106dbfadef34c299684","tarball":"https://registry.npmjs.org/micromark/-/micromark-3.0.5.tgz","fileCount":50,"unpackedSize":229345,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhINxJCRA9TVsSAnZWagAA6PMQAIOoy6tnNvq5JarnPVAb\nPOaOwBhd41QzEjpOScsoQOmF5cP93Uze+Ulp9Q+fsoTuqgMx9V/QRNTM99Qo\nujppYbW0IMxR21LexvSoTW3MpC8uJ0/FrY12Ip96Xzdee+bj3yDjZeGeodTg\nBYKfkDwqPcqR7xgyKFA4pqyI//28uYOMK/qR7sK7juKtThZIqQJUetOTWvxb\nbgQDXBzoDUovF/X5gEgUIP6N2CJEoPa5OZ+kXkCbpjTS+HeqJY452ZfpgXAX\nOTOxoOsOB5/c4fOAoCmm1edfXeIZuxyerTr3jvil5wceHT+0xOQiumY6g3Ej\nF7wQOtq9rL17jhf/R41iit7mrV6DlFJWqwFkRsjL0Y8/s7WHHMFl7J9u6MJQ\n2FJvx2gCBebQh4k04zT+6DuLX6NRhUONBcy0GYFukfFLSautr305lx+fr0KP\nkYj07ZDmnWaVZHOxa6LqZvkf3mgbRN8IeAcn+OUo5KdpsD9NipUAZ+4P2O+Z\n7zG5vgVUo2GeIrEFiUILqVclP8JsU4+HPtqsEPzRa19KMvQv3EPHfhKQ/jzn\nDPENdPfJGAtN7io7AwZ66cJgvZ90FzwMcWZZhS41y26HklHKbivPft6Rhc7z\n/VpDQZ28yTiQ79Gx2PX7W0g1Bqd6CxfZ+9YtFCrjy+4RmfDdmPQQn1dOiRPx\nrcPu\r\n=wouh\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD0h/U22TIOe8FY8JKlKCF7gSCXnVqnh6Uxh3bZJKI5dgIhAJgjBE1atB8PYymcfBu3QoDWGRbsqMii0u/US8BPBIj1"}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_3.0.5_1629543497326_0.24110435170696132"},"_hasShrinkwrap":false},"3.0.6":{"name":"micromark","version":"3.0.6","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git#main"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"sideEffects":false,"type":"module","main":"index.js","types":"dev/index.d.ts","exports":{".":{"development":"./dev/index.js","default":"./index.js"},"./stream":{"development":"./dev/stream.js","default":"./stream.js"},"./stream.js":{"development":"./dev/stream.js","default":"./stream.js"},"./lib/compile":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/compile.js":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/parse":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/parse.js":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/postprocess":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/postprocess.js":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/preprocess":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"},"./lib/preprocess.js":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"}},"dependencies":{"@types/debug":"^4.0.0","debug":"^4.0.0","micromark-core-commonmark":"^1.0.1","micromark-factory-space":"^1.0.0","micromark-util-character":"^1.0.0","micromark-util-chunked":"^1.0.0","micromark-util-combine-extensions":"^1.0.0","micromark-util-decode-numeric-character-reference":"^1.0.0","micromark-util-encode":"^1.0.0","micromark-util-normalize-identifier":"^1.0.0","micromark-util-resolve-all":"^1.0.0","micromark-util-sanitize-uri":"^1.0.0","micromark-util-subtokenize":"^1.0.0","micromark-util-symbol":"^1.0.0","micromark-util-types":"^1.0.1","parse-entities":"^3.0.0"},"scripts":{"build":"rimraf \"*.d.ts\" \"{dev/,lib/}**/*.d.ts\" && tsc && micromark-build && type-coverage"},"xo":false,"typeCoverage":{"atLeast":100,"detail":true,"strict":true,"ignoreCatch":true},"gitHead":"a03a08ce677b91a2960be2f4fcaacd64b3b8ec18","homepage":"https://github.com/micromark/micromark/tree/main#readme","_id":"micromark@3.0.6","_nodeVersion":"16.9.0","_npmVersion":"7.23.0","dist":{"integrity":"sha512-yzyfAHhglgEDprJnsvoQVPSXy5OnQfgyatGTxh0XVpismB5+aECnsHY2I1oxsySf6t/2FeamjOLoxun47nVhvw==","shasum":"ee82ac16337a819b6988e2ff52fa1c0016ac51ad","tarball":"https://registry.npmjs.org/micromark/-/micromark-3.0.6.tgz","fileCount":50,"unpackedSize":227881,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD7l7Ykx+6K5uLRJhV78SPQGuZybt2HspgvhHcO9SzjDgIgLCbV6pjsjJJq2XtPNiP0iZb7GfLbuz58JHJ9lsgMxDs="}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_3.0.6_1633179994761_0.5862655807603001"},"_hasShrinkwrap":false},"3.0.7":{"name":"micromark","version":"3.0.7","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git#main"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"sideEffects":false,"type":"module","main":"index.js","types":"dev/index.d.ts","exports":{".":{"development":"./dev/index.js","default":"./index.js"},"./stream":{"development":"./dev/stream.js","default":"./stream.js"},"./stream.js":{"development":"./dev/stream.js","default":"./stream.js"},"./lib/compile":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/compile.js":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/parse":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/parse.js":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/postprocess":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/postprocess.js":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/preprocess":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"},"./lib/preprocess.js":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"}},"dependencies":{"@types/debug":"^4.0.0","debug":"^4.0.0","micromark-core-commonmark":"^1.0.1","micromark-factory-space":"^1.0.0","micromark-util-character":"^1.0.0","micromark-util-chunked":"^1.0.0","micromark-util-combine-extensions":"^1.0.0","micromark-util-decode-numeric-character-reference":"^1.0.0","micromark-util-encode":"^1.0.0","micromark-util-normalize-identifier":"^1.0.0","micromark-util-resolve-all":"^1.0.0","micromark-util-sanitize-uri":"^1.0.0","micromark-util-subtokenize":"^1.0.0","micromark-util-symbol":"^1.0.0","micromark-util-types":"^1.0.1","parse-entities":"^3.0.0","uvu":"^0.5.0"},"scripts":{"build":"rimraf \"*.d.ts\" \"{dev/,lib/}**/*.d.ts\" && tsc && micromark-build && type-coverage"},"xo":false,"typeCoverage":{"atLeast":100,"detail":true,"strict":true,"ignoreCatch":true},"gitHead":"fa21fccd3cc53285380b5cae13dfe546483ecb6f","homepage":"https://github.com/micromark/micromark/tree/main#readme","_id":"micromark@3.0.7","_nodeVersion":"16.9.0","_npmVersion":"7.23.0","dist":{"integrity":"sha512-67ipZ2CzQVsDyH1kqNLh7dLwe5QMPJwjFBGppW7JCLByaSc6ZufV0ywPOxt13MIDAzzmj3wctDL6Ov5w0fOHXw==","shasum":"036dfc974ddf8e6e773b197839c5671d92d0928c","tarball":"https://registry.npmjs.org/micromark/-/micromark-3.0.7.tgz","fileCount":50,"unpackedSize":228360,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDgH9Fu+SbI2RMlf78jXuqbfNMY57MAMMtpLXASjTYSiAIhAOAOMl/+fJ3Eb9tEUK5F2MmfcFVoc3D5HJK/uKV8seU1"}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_3.0.7_1633765302514_0.07081307862517039"},"_hasShrinkwrap":false},"3.0.8":{"name":"micromark","version":"3.0.8","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git#main"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"sideEffects":false,"type":"module","main":"index.js","types":"dev/index.d.ts","exports":{".":{"development":"./dev/index.js","default":"./index.js"},"./stream":{"development":"./dev/stream.js","default":"./stream.js"},"./stream.js":{"development":"./dev/stream.js","default":"./stream.js"},"./lib/compile":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/compile.js":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/parse":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/parse.js":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/postprocess":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/postprocess.js":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/preprocess":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"},"./lib/preprocess.js":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"}},"dependencies":{"@types/debug":"^4.0.0","debug":"^4.0.0","micromark-core-commonmark":"^1.0.1","micromark-factory-space":"^1.0.0","micromark-util-character":"^1.0.0","micromark-util-chunked":"^1.0.0","micromark-util-combine-extensions":"^1.0.0","micromark-util-decode-numeric-character-reference":"^1.0.0","micromark-util-encode":"^1.0.0","micromark-util-normalize-identifier":"^1.0.0","micromark-util-resolve-all":"^1.0.0","micromark-util-sanitize-uri":"^1.0.0","micromark-util-subtokenize":"^1.0.0","micromark-util-symbol":"^1.0.0","micromark-util-types":"^1.0.1","parse-entities":"^3.0.0","uvu":"^0.5.0"},"scripts":{"build":"rimraf \"*.d.ts\" \"{dev/,lib/}**/*.d.ts\" && tsc && micromark-build && type-coverage"},"xo":false,"typeCoverage":{"atLeast":100,"detail":true,"strict":true,"ignoreCatch":true},"gitHead":"8a65789cdd29b1b3556dd110f3b633442f493799","homepage":"https://github.com/micromark/micromark/tree/main#readme","_id":"micromark@3.0.8","_nodeVersion":"17.0.1","_npmVersion":"8.1.0","dist":{"integrity":"sha512-RXc/UmMhTW++rxDNbw045w1E2WS4u7Ixd4g8cp7vmMi8U+m8Ua2SZniz8nrWlNHFUJZJk/lW3m0n19z2RCauxA==","shasum":"4c8b1312f496af3fd376e5fcd51f594c71d7ca45","tarball":"https://registry.npmjs.org/micromark/-/micromark-3.0.8.tgz","fileCount":50,"unpackedSize":228477,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhl87aCRA9TVsSAnZWagAAJNcP/3QXxFSTIdeq9ug5UtOl\nvqDCTPgDlQbtZP6Y9oc2nOD2web4VCoMA8CpETbK2iPSEvm0L4c8ANyaDCr6\nAo6OBnBfLKhV/cw2qrwakGfbuq9JmY065dclv7epvtXGnRNZ9G3LGxF4zs4h\nsqmWdRzIzNgnn2FNvNpuXKsYcBcjjHq3bn0Lp5lbcSqrz2Rw4s0xD0Lx3eka\npSasgkL8xtBlgzSdZpWBUKFSB0PteRCLP8nAm66uII+uMCzvYIMkGsow4WZB\nzGs43SBD0f2r8EGbCW282t3HgO4V/zWSyra4jDv3L/yr/9eS6i1HX4aAudzD\nwx+sTNtVSb5hVxzV3fD93uVJS6i24J6KwlGSL3NjtTGY1eH/vCGop0fD5K3m\nkEax5DD/5MC1nT+MMiWY/bVIMkNxz3R+q8nPSl80HaEaxCfZQcdQxYpnyOcc\n8l1/JqGUbSshPcL8t2NbfUX3h1LkZrqyq2aLfoUR8KfOAncTapzpCZxVTQQ7\nHt4N+uLhy3ArI6nn96GGBCoRwcwfhALhyIzfYWhF8umrpNJ9d3jhG/z7Ze7f\nM/OFjX9VshD8ROQJCP3+yfr1Rr/OU97pT5I0xb/coMuuSf92L5IHj4FPcVG/\naOao2SmvQSU3Nzkl+QMzTxsQzWUxTriEupg2+zd2YGq8woY6KhPjqiHhVt5u\niuff\r\n=H9GB\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDGvkQVkrEBQ75Hb9EuAGAW1bMubsvJIJwb04LAlI9+GwIgWb4K+E4fIszgUmV4OaUganqK3nl/oJ5KAy+lCkQWjNo="}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_3.0.8_1637338842321_0.9561132834915584"},"_hasShrinkwrap":false},"3.0.9":{"name":"micromark","version":"3.0.9","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git#main"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"sideEffects":false,"type":"module","main":"index.js","types":"dev/index.d.ts","exports":{".":{"development":"./dev/index.js","default":"./index.js"},"./stream":{"development":"./dev/stream.js","default":"./stream.js"},"./stream.js":{"development":"./dev/stream.js","default":"./stream.js"},"./lib/compile":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/compile.js":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/parse":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/parse.js":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/postprocess":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/postprocess.js":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/preprocess":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"},"./lib/preprocess.js":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"}},"dependencies":{"@types/debug":"^4.0.0","debug":"^4.0.0","micromark-core-commonmark":"^1.0.1","micromark-factory-space":"^1.0.0","micromark-util-character":"^1.0.0","micromark-util-chunked":"^1.0.0","micromark-util-combine-extensions":"^1.0.0","micromark-util-decode-numeric-character-reference":"^1.0.0","micromark-util-encode":"^1.0.0","micromark-util-normalize-identifier":"^1.0.0","micromark-util-resolve-all":"^1.0.0","micromark-util-sanitize-uri":"^1.0.0","micromark-util-subtokenize":"^1.0.0","micromark-util-symbol":"^1.0.0","micromark-util-types":"^1.0.1","decode-named-character-reference":"^1.0.0","uvu":"^0.5.0"},"scripts":{"build":"rimraf \"*.d.ts\" \"{dev/,lib/}**/*.d.ts\" && tsc && micromark-build && type-coverage"},"xo":false,"typeCoverage":{"atLeast":100,"detail":true,"strict":true,"ignoreCatch":true},"gitHead":"7d6be72f757645047322ff38246d5d599a1f2352","homepage":"https://github.com/micromark/micromark/tree/main#readme","_id":"micromark@3.0.9","_nodeVersion":"17.0.1","_npmVersion":"8.1.0","dist":{"integrity":"sha512-aWPjuXAqiFab4+oKLjH1vSNQm8S9GMnnf5sFNLrQaIggGYMBcQ9CS0Tt7+BJH6hbyv783zk3vgDhaORl3K33IQ==","shasum":"2ac001ffd126342fcf5f4ec2f944aa08206dd8d5","tarball":"https://registry.npmjs.org/micromark/-/micromark-3.0.9.tgz","fileCount":50,"unpackedSize":228613,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhm/eZCRA9TVsSAnZWagAAJx4P/29eGXDK5S3qWgawUSIU\n797m6vGX2Ro+e190VSM45yYT+3io/7Meq0U0OaExYpKjqBFDZK3xMdHzhhNo\n9e95UAmg6o61PlmC4zUZgkex3q+LzNoaEjtgtYuQgl9zMHAVZ3MLic/g0MZQ\nS1DE8WzcU/3HT2UuDGXj11llKf7Nv6apk+9ezIhqOlTIWvznNDHaOS3win0E\n2B5LGmx7KMiXGJTFbXeJOg6AO1RiomRXtTXitpccmLY9Gq6b4AA+K1g81YKk\nCKoi1UmPVJsrWmY1TC4vv8aLvA88uxI+3JLW8Aptx5aBq8OK1BSmTrRouYQA\n11OdHlnRaWVUxyFFZ0/JXyQVaoUNtASZx+vpPvLI+K2uN3UyIHiCJXdKpsqs\njV4Uk5hr/vPod9+FyarGbv//292r8UpmLTGdwaZped0MOsAZyJWsSulmUSd5\nXp+uPCk4eOBRAOR5GYN7ei8aeTseoixrvad+guyTfEKSvMDALxa+gPsdkPzn\nSmEoJCZcEOd/whaQfgobxyGQmtYJf1lB0HRXSy9ZYX3rsAv7ahp95JvElqWw\n+F8wBnF1BNpI45W2RgxevXUa3/j1u2WzyCtmp+kQ9xy5KvKeCB8cViCNv5HR\nvJq2hOVR3XkwrrhQFfWBjg5Nl289oy3ZYuGcorlnjFhk9LQmT2RJY0GLxfD4\n97aY\r\n=Bk89\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDSx/dn9PON4BkxoFw01NJeY9QMcPxQcjtHQE/u9nmYMAiEAjaV0+YOX1/ns2yuGrmqtfZZnYTVtHHDED+ZF22p3yjw="}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_3.0.9_1637611417137_0.2659406612787949"},"_hasShrinkwrap":false},"3.0.10":{"name":"micromark","version":"3.0.10","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git#main"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"sideEffects":false,"type":"module","main":"index.js","types":"dev/index.d.ts","exports":{".":{"development":"./dev/index.js","default":"./index.js"},"./stream":{"development":"./dev/stream.js","default":"./stream.js"},"./stream.js":{"development":"./dev/stream.js","default":"./stream.js"},"./lib/compile":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/compile.js":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/parse":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/parse.js":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/postprocess":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/postprocess.js":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/preprocess":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"},"./lib/preprocess.js":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"}},"dependencies":{"@types/debug":"^4.0.0","debug":"^4.0.0","micromark-core-commonmark":"^1.0.1","micromark-factory-space":"^1.0.0","micromark-util-character":"^1.0.0","micromark-util-chunked":"^1.0.0","micromark-util-combine-extensions":"^1.0.0","micromark-util-decode-numeric-character-reference":"^1.0.0","micromark-util-encode":"^1.0.0","micromark-util-normalize-identifier":"^1.0.0","micromark-util-resolve-all":"^1.0.0","micromark-util-sanitize-uri":"^1.0.0","micromark-util-subtokenize":"^1.0.0","micromark-util-symbol":"^1.0.0","micromark-util-types":"^1.0.1","decode-named-character-reference":"^1.0.0","uvu":"^0.5.0"},"scripts":{"build":"rimraf \"*.d.ts\" \"{dev/,lib/}**/*.d.ts\" && tsc && micromark-build && type-coverage"},"xo":false,"typeCoverage":{"atLeast":100,"detail":true,"strict":true,"ignoreCatch":true},"gitHead":"893a8d6b0e5c7a681a0faed3cd55cdbeafabe2d7","homepage":"https://github.com/micromark/micromark/tree/main#readme","_id":"micromark@3.0.10","_nodeVersion":"17.0.1","_npmVersion":"8.1.0","dist":{"integrity":"sha512-ryTDy6UUunOXy2HPjelppgJ2sNfcPz1pLlMdA6Rz9jPzhLikWXv/irpWV/I2jd68Uhmny7hHxAlAhk4+vWggpg==","shasum":"1eac156f0399d42736458a14b0ca2d86190b457c","tarball":"https://registry.npmjs.org/micromark/-/micromark-3.0.10.tgz","fileCount":50,"unpackedSize":228644,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhqzgFCRA9TVsSAnZWagAA2fIP/3Dex/mTue00f9oQZyhC\nl3/RyE2a28jspu1OnMhTjlXc33oJgeehHIsKQDYxaeEXY0m4u7jmyKOtDoIH\nPQQV8PPJdhn6UfaZUH/MY6wmdc/95jypLurAPe3PtZY9EDoEyHGd6Ee9E7Bn\n73JCFOc//8KPeXD9WoQV3poC41RbsyIJyk2un1na+j4TUcTwDoiy+FmOZOgx\nRfMoB3CxVK8ltQaUIyHtgHWtj8yXZsgKAP9v2MH35aGKt6837vab0lLMjJee\nKBxNzp9bzMg9AMl6wfn9tDEMxfufHTYhQGi/dwAWpNkXrHGSd4W4WEyqvi0I\nZzYHjzErH2+qDSZNLdP6daSo9lTe0cj1CE2iOOa8OGMD5xTcTQ15I2Vi0Uop\nJiyAxn9xomUNQcGBsLp0fWqTC8iyPrzwrxm6kKx5FunQot29+MDwmQ3KUcjk\nE/+kNA7AqzFpbQeppihmG0+cryT0ogoFWPV0XTh3jbJL50Fcf/omfrnzJrqg\ni77DOejm8XF1Y+YnN38N0A+w7XrCV3oeOVscAszSKXM9hQI4klsErVNwEZYG\nOfrzq2INu8ekVbE2XTRB8/RKDXy+r7r5EwoBkTC2y2Od0B968vYGw9HoqhLL\nEPrEPZy19vxwW2S7Xq6lRw76ZpX/f8FDL77QHbZoTXAXHb6aqL5XvHsFC3Qz\nmdbF\r\n=DpDt\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICgGFjkM5f6Dv5AvjFc5+ZRiK8wAIPc0GKIr6elYV8jyAiB51c0n82n2+NqxPoflP48hJNT+duVbXSwgbCFO4WCgYQ=="}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_3.0.10_1638610949107_0.19561409370344762"},"_hasShrinkwrap":false},"3.1.0":{"name":"micromark","version":"3.1.0","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git#main"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"sideEffects":false,"type":"module","main":"index.js","types":"dev/index.d.ts","exports":{".":{"development":"./dev/index.js","default":"./index.js"},"./stream":{"development":"./dev/stream.js","default":"./stream.js"},"./stream.js":{"development":"./dev/stream.js","default":"./stream.js"},"./lib/compile":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/compile.js":{"development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/parse":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/parse.js":{"development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/postprocess":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/postprocess.js":{"development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/preprocess":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"},"./lib/preprocess.js":{"development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"}},"dependencies":{"@types/debug":"^4.0.0","debug":"^4.0.0","micromark-core-commonmark":"^1.0.1","micromark-factory-space":"^1.0.0","micromark-util-character":"^1.0.0","micromark-util-chunked":"^1.0.0","micromark-util-combine-extensions":"^1.0.0","micromark-util-decode-numeric-character-reference":"^1.0.0","micromark-util-encode":"^1.0.0","micromark-util-normalize-identifier":"^1.0.0","micromark-util-resolve-all":"^1.0.0","micromark-util-sanitize-uri":"^1.0.0","micromark-util-subtokenize":"^1.0.0","micromark-util-symbol":"^1.0.0","micromark-util-types":"^1.0.1","decode-named-character-reference":"^1.0.0","uvu":"^0.5.0"},"scripts":{"build":"rimraf \"*.d.ts\" \"{dev/,lib/}**/*.d.ts\" && tsc && micromark-build && type-coverage"},"xo":false,"typeCoverage":{"atLeast":100,"detail":true,"strict":true,"ignoreCatch":true},"gitHead":"7da9cab3304cf7f03b06fb4d5390b5b328215fc7","homepage":"https://github.com/micromark/micromark/tree/main#readme","_id":"micromark@3.1.0","_nodeVersion":"18.2.0","_npmVersion":"8.19.1","dist":{"integrity":"sha512-6Mj0yHLdUZjHnOPgr5xfWIMqMWS12zDN6iws9SLuSz76W8jTtAv24MN4/CL7gJrl5vtxGInkkqDv/JIoRsQOvA==","shasum":"eeba0fe0ac1c9aaef675157b52c166f125e89f62","tarball":"https://registry.npmjs.org/micromark/-/micromark-3.1.0.tgz","fileCount":50,"unpackedSize":230187,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDnh6cIfQR/SJH3U3Cy2mRFWP6W6q9vJEyWx76hY/CJjwIhAOTGrAgei+RMexviCN5J5LfSyR0wLyCvvmobCpdK2d5C"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjPxPMACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpadQ//bXiK2UsgF5Itn4Banc6TObV7F2odfduBPBhlOy/OuSR4Jm3H\r\n+bIueOXpsEvmWE+B7g1ryG3nVxVVlUpcoIEWaHyEnX8+Z0ILnzkpuXaOTwyA\r\nNc4rDf8HXJJf6DtPWmlQ9bP8vxQMZY/HCFl+t69hnbfENHMmhBSTSnonnq+t\r\noXFow+TTCbZ6y6w3iswOAVosg58AvLMPzIRW39UFv6SZXvJU0zefbjfQ50r9\r\nVXu0uve35sJIr9iKsVh8cAxbdtu6q5Gfnm0xJkRqByh0GqhidOKktD86esVv\r\nysUmenAqnrXJgWk9oKhEcBg3qTl4faEbse3G5Ruy/5sssFKlA/YCqP9XrHgq\r\nGWTbiz7dbUI0Lo3fHggcq5E4RvWTQ/7ZTf9rNrU440r03crG4xNVgdtAfGgj\r\njEnbFgKjsBHu66p8/eQWQIQpRLJW8n4wR6BhFN/rq6qLFpcpvqWgHwjThr8B\r\ne9m8MYTsOLr95Gf3vlMZy7PIz0aHFe+g/SZDKx6cFRXJr5Y8VdXxWv5XSf+P\r\nDneBDwN38ud0BgsdWJ8hlexj5Ew5Oqt62rhn/e140rQXbu6LHetZKI+D+S0d\r\n6n6kTilI2GLyqaBxMqyBWSCXZwqEh1pKToqMX2Yd8pqyuaIbdcP89bNkLIaz\r\n76ueKx3/4K0TifsqlDAKWZWdEl+qJrke4Zc=\r\n=br2O\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_3.1.0_1665078220343_0.5658240699724593"},"_hasShrinkwrap":false},"3.2.0":{"name":"micromark","version":"3.2.0","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git#main"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"sideEffects":false,"type":"module","main":"index.js","types":"dev/index.d.ts","exports":{".":{"types":"./dev/index.d.ts","development":"./dev/index.js","default":"./index.js"},"./stream":{"types":"./dev/stream.d.ts","development":"./dev/stream.js","default":"./stream.js"},"./stream.js":{"types":"./dev/stream.d.ts","development":"./dev/stream.js","default":"./stream.js"},"./lib/compile":{"types":"./dev/lib/compile.d.ts","development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/compile.js":{"types":"./dev/lib/compile.d.ts","development":"./dev/lib/compile.js","default":"./lib/compile.js"},"./lib/parse":{"types":"./dev/lib/parse.d.ts","development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/parse.js":{"types":"./dev/lib/parse.d.ts","development":"./dev/lib/parse.js","default":"./lib/parse.js"},"./lib/postprocess":{"types":"./dev/lib/postprocess.d.ts","development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/postprocess.js":{"types":"./dev/lib/postprocess.d.ts","development":"./dev/lib/postprocess.js","default":"./lib/postprocess.js"},"./lib/preprocess":{"types":"./dev/lib/preprocess.d.ts","development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"},"./lib/preprocess.js":{"types":"./dev/lib/preprocess.d.ts","development":"./dev/lib/preprocess.js","default":"./lib/preprocess.js"}},"dependencies":{"@types/debug":"^4.0.0","debug":"^4.0.0","micromark-core-commonmark":"^1.0.1","micromark-factory-space":"^1.0.0","micromark-util-character":"^1.0.0","micromark-util-chunked":"^1.0.0","micromark-util-combine-extensions":"^1.0.0","micromark-util-decode-numeric-character-reference":"^1.0.0","micromark-util-encode":"^1.0.0","micromark-util-normalize-identifier":"^1.0.0","micromark-util-resolve-all":"^1.0.0","micromark-util-sanitize-uri":"^1.0.0","micromark-util-subtokenize":"^1.0.0","micromark-util-symbol":"^1.0.0","micromark-util-types":"^1.0.1","decode-named-character-reference":"^1.0.0","uvu":"^0.5.0"},"scripts":{"build":"micromark-build"},"xo":false,"typeCoverage":{"atLeast":100,"detail":true,"strict":true,"ignoreCatch":true},"gitHead":"94b7679646bc0221899bba034f52f4abb3700f81","homepage":"https://github.com/micromark/micromark/tree/main#readme","_id":"micromark@3.2.0","_nodeVersion":"20.0.0","_npmVersion":"9.6.4","dist":{"integrity":"sha512-uD66tJj54JLYq0De10AhWycZWGQNUvDI55xPgk2sQM5kn1JYlhbCMTtEeT27+vAhW2FBQxLlOmS3pmA7/2z4aA==","shasum":"1af9fef3f995ea1ea4ac9c7e2f19c48fd5c006e9","tarball":"https://registry.npmjs.org/micromark/-/micromark-3.2.0.tgz","fileCount":52,"unpackedSize":201738,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD1YEZliASnCjb2vbQXFiHSNA37JD+HhCQgSRYmFpM/lQIhAK+2lUMeyUA9inHY0viZudxJ0h0blC8nJ8aitnWZUAn3"}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_3.2.0_1685449544402_0.4966865369408102"},"_hasShrinkwrap":false},"4.0.0":{"name":"micromark","version":"4.0.0","description":"small commonmark compliant markdown parser with positional info and concrete tokens","license":"MIT","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git#main"},"bugs":{"url":"https://github.com/micromark/micromark/issues"},"funding":[{"type":"GitHub Sponsors","url":"https://github.com/sponsors/unifiedjs"},{"type":"OpenCollective","url":"https://opencollective.com/unified"}],"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"sideEffects":false,"type":"module","exports":{".":{"development":"./dev/index.js","default":"./index.js"},"./stream":{"development":"./dev/stream.js","default":"./stream.js"}},"dependencies":{"@types/debug":"^4.0.0","debug":"^4.0.0","decode-named-character-reference":"^1.0.0","devlop":"^1.0.0","micromark-core-commonmark":"^2.0.0","micromark-factory-space":"^2.0.0","micromark-util-character":"^2.0.0","micromark-util-chunked":"^2.0.0","micromark-util-combine-extensions":"^2.0.0","micromark-util-decode-numeric-character-reference":"^2.0.0","micromark-util-encode":"^2.0.0","micromark-util-normalize-identifier":"^2.0.0","micromark-util-resolve-all":"^2.0.0","micromark-util-sanitize-uri":"^2.0.0","micromark-util-subtokenize":"^2.0.0","micromark-util-symbol":"^2.0.0","micromark-util-types":"^2.0.0"},"scripts":{"build":"micromark-build"},"xo":false,"types":"./index.d.ts","gitHead":"18f2fa6842f964ef6a488f423c291aa06fef7999","homepage":"https://github.com/micromark/micromark/tree/main#readme","_id":"micromark@4.0.0","_nodeVersion":"20.0.0","_npmVersion":"9.6.4","dist":{"integrity":"sha512-o/sd0nMof8kYff+TqcDx3VSrgBTcZpSvYcAHIfHhv5VAuNmisCxjhx6YmxS8PFEpb9z5WKWKPdzf0jM23ro3RQ==","shasum":"84746a249ebd904d9658cfabc1e8e5f32cbc6249","tarball":"https://registry.npmjs.org/micromark/-/micromark-4.0.0.tgz","fileCount":50,"unpackedSize":202448,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDehHPri3brew/TZ0ELbicHNO730xHebELIDmXN6RyGzAIgB1gVjJ+BajxRnZkDkW5p1Z5PPCJ5ttG+x8/rPEnre94="}]},"_npmUser":{"name":"wooorm","email":"tituswormer@gmail.com"},"directories":{},"maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/micromark_4.0.0_1687365960545_0.3572293061319003"},"_hasShrinkwrap":false}},"readme":"# micromark\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][bundle-size-badge]][bundle-size]\n[![Sponsors][sponsors-badge]][opencollective]\n[![Backers][backers-badge]][opencollective]\n[![Chat][chat-badge]][chat]\n\nMarkdown parser.\n\n> **Note**: this is the `micromark` package from the micromark monorepo.\n> See the [monorepo readme][micromark] for more on the project.\n> See this readme for how to use it.\n\n## Feature highlights\n\n<!-- Note: this section has to be in sync with the monorepo readme. -->\n\n*   [x] **[compliant][commonmark]** (100% to CommonMark)\n*   [x] **[extensions][]** (100% [GFM][], 100% [MDX.js][mdxjs], [directives][],\n    [frontmatter][], [math][])\n*   [x] **[safe][security]** (by default)\n*   [x] **[robust][test]** (±2k tests, 100% coverage, fuzz testing)\n*   [x] **[small][size-debug]** (smallest CM parser at ±14kb)\n\n## Contents\n\n*   [When should I use this?](#when-should-i-use-this)\n*   [What is this?](#what-is-this)\n*   [Install](#install)\n*   [Use](#use)\n*   [API](#api)\n    *   [`micromark(value[, encoding][, options])`](#micromarkvalue-encoding-options)\n    *   [`stream(options?)`](#streamoptions)\n    *   [`Options`](#options)\n*   [Types](#types)\n*   [Compatibility](#compatibility)\n*   [Security](#security)\n*   [Contribute](#contribute)\n*   [Sponsor](#sponsor)\n*   [License](#license)\n\n## When should I use this?\n\n<!-- Note: this section has to be in sync with the monorepo readme. -->\n\n*   If you *just* want to turn markdown into HTML (with maybe a few extensions)\n*   If you want to do *really complex things* with markdown\n\nSee [§ Comparison][comparison] for more info\n\n## What is this?\n\n<!-- Note: this section has to be in sync with the monorepo readme. -->\n\n`micromark` is an open source markdown parser written in JavaScript.\nIt’s implemented as a state machine that emits concrete tokens, so that every\nbyte is accounted for, with positional info.\nIt then compiles those tokens directly to HTML, but other tools can take the\ndata and for example build an AST which is easier to work with\n([`mdast-util-to-markdown`][mdast-util-to-markdown]).\n\nWhile most markdown parsers work towards compliancy with CommonMark (or GFM),\nthis project goes further by following how the reference parsers (`cmark`,\n`cmark-gfm`) work, which is confirmed with thousands of extra tests.\n\nOther than CommonMark and GFM, micromark also supports common extensions to\nmarkdown such as MDX, math, and frontmatter.\n\nThese npm packages have a sibling project in Rust:\n[`markdown-rs`][markdown-rs].\n\n*   to learn markdown, see this [cheatsheet and tutorial][cheat]\n*   for more about us, see [`unifiedjs.com`][site]\n*   for updates, see [Twitter][]\n*   for questions, see [Discussions][chat]\n*   to help, see [contribute][] and [sponsor][] below\n\n## Install\n\n<!-- Note: this section has to be in sync with the monorepo readme. -->\n\nThis package is [ESM only][esm].\nIn Node.js (version 16+), install with [npm][]:\n\n```sh\nnpm install micromark\n```\n\nIn Deno with [`esm.sh`][esmsh]:\n\n```js\nimport {micromark} from 'https://esm.sh/micromark@3'\n```\n\nIn browsers with [`esm.sh`][esmsh]:\n\n```html\n<script type=\"module\">\n  import {micromark} from 'https://esm.sh/micromark@3?bundle'\n</script>\n```\n\n## Use\n\n<!-- Note: this section has to be in sync with the monorepo readme. -->\n\nTypical use (buffering):\n\n```js\nimport {micromark} from 'micromark'\n\nconsole.log(micromark('## Hello, *world*!'))\n```\n\nYields:\n\n```html\n<h2>Hello, <em>world</em>!</h2>\n```\n\nYou can pass extensions (in this case [`micromark-extension-gfm`][gfm]):\n\n```js\nimport {micromark} from 'micromark'\nimport {gfm, gfmHtml} from 'micromark-extension-gfm'\n\nconst value = '* [x] contact@example.com ~~strikethrough~~'\n\nconst result = micromark(value, {\n  extensions: [gfm()],\n  htmlExtensions: [gfmHtml()]\n})\n\nconsole.log(result)\n```\n\nYields:\n\n```html\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"mailto:contact@example.com\">contact@example.com</a> <del>strikethrough</del></li>\n</ul>\n```\n\nStreaming interface:\n\n```js\nimport {createReadStream} from 'node:fs'\nimport {stream} from 'micromark/stream'\n\ncreateReadStream('example.md')\n  .on('error', handleError)\n  .pipe(stream())\n  .pipe(process.stdout)\n\nfunction handleError(error) {\n  // Handle your error here!\n  throw error\n}\n```\n\n## API\n\n`micromark` core has two entries in its export map: `micromark` and\n`micromark/stream`.\n\n`micromark` exports the identifier [`micromark`][api-micromark].\n`micromark/stream` exports the identifier [`stream`][api-stream].\nThere are no default exports.\n\nThe export map supports the [`development` condition][development].\nRun `node --conditions development module.js` to get instrumented dev code.\nWithout this condition, production code is loaded.\nSee [§ Size & debug][size-debug] for more info.\n\n### `micromark(value[, encoding][, options])`\n\nCompile markdown to HTML.\n\n> Note: which encodings are supported depends on the engine.\n> For info on Node.js, see *[WHATWG supported encodings][encoding]*.\n\n###### Parameters\n\n*   `value` (`string` or [`Uint8Array`][uint8-array])\n    — markdown to parse\n*   `encoding` (`string`, default: `'utf8'`)\n    — [character encoding][encoding] to understand `value` as when it’s a\n    [`Uint8Array`][uint8-array]\n*   `options` ([`Options`][api-options], optional)\n    — configuration\n\n###### Returns\n\nCompiled HTML (`string`).\n\n### `stream(options?)`\n\nCreate a duplex (readable and writable) stream.\n\nSome of the work to parse markdown can be done streaming, but in the\nend buffering is required.\n\nmicromark does not handle errors for you, so you must handle errors on whatever\nstreams you pipe into it.\nAs markdown does not know errors, `micromark` itself does not emit errors.\n\n###### Parameters\n\n*   `options` ([`Options`][api-options], optional)\n    — configuration\n\n###### Returns\n\nDuplex stream.\n\n### `Options`\n\nConfiguration (TypeScript type).\n\n##### Fields\n\n###### `allowDangerousHtml`\n\nWhether to allow (dangerous) HTML (`boolean`, default: `false`).\n\nThe default is `false`, which still parses the HTML according to `CommonMark`\nbut shows the HTML as text instead of as elements.\n\nPass `true` for trusted content to get actual HTML elements.\nSee [§ Security][security].\n\n###### `allowDangerousProtocol`\n\nWhether to allow dangerous protocols in links and images (`boolean`, default:\n`false`).\n\nThe default is `false`, which drops URLs in links and images that use dangerous\nprotocols.\n\nPass `true` for trusted content to support all protocols.\n\nURLs that have no protocol (which means it’s relative to the current page, such\nas `./some/page.html`) and URLs that have a safe protocol (for images: `http`,\n`https`; for links: `http`, `https`, `irc`, `ircs`, `mailto`, `xmpp`), are\nsafe.\nAll other URLs are dangerous and dropped.\nSee [§ Security][security].\n\n###### `defaultLineEnding`\n\nDefault line ending to use when compiling to HTML, for line endings not in\n`value` (`'\\r'`, `'\\n'`, or `'\\r\\n'`; default: first line ending or `'\\n'`).\n\nGenerally, `micromark` copies line endings (`\\r`, `\\n`, `\\r\\n`) in the markdown\ndocument over to the compiled HTML.\nIn some cases, such as `> a`, CommonMark requires that extra line endings are\nadded: `<blockquote>\\n<p>a</p>\\n</blockquote>`.\n\nTo create that line ending, the document is checked for the first line ending\nthat is used.\nIf there is no line ending, `defaultLineEnding` is used.\nIf that isn’t configured, `\\n` is used.\n\n###### `extensions`\n\nArray of syntax extensions (`Array<SyntaxExtension>`, default: `[]`).\nSee [§ Extensions][extensions].\n\n###### `htmlExtensions`\n\nArray of syntax extensions (`Array<HtmlExtension>`, default: `[]`).\nSee [§ Extensions][extensions].\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nIt exports the additional type [`Options`][api-options].\n\n## Compatibility\n\nProjects maintained by the unified collective are compatible with maintained\nversions of Node.js.\n\nWhen we cut a new major release, we drop support for unmaintained versions of\nNode.\nThis means we try to keep the current release line, `micromark@^4`, compatible\nwith Node.js 16.\n\n## Security\n\nThis package is safe.\nSee [`security.md`][securitymd] in [`micromark/.github`][health] for how to\nsubmit a security report.\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`micromark/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organisation, or community you agree to\nabide by its terms.\n\n## Sponsor\n\n<!-- Note: this section has to be in sync with the monorepo readme. -->\n\nSupport this effort and give back by sponsoring on [OpenCollective][]!\n\n<table>\n<tr valign=\"middle\">\n<td width=\"100%\" align=\"center\" colspan=\"10\">\n  <br>\n  <a href=\"https://www.salesforce.com\">Salesforce</a> 🏅<br><br>\n  <a href=\"https://www.salesforce.com\"><img src=\"https://images.opencollective.com/salesforce/ca8f997/logo/512.png\" width=\"256\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://vercel.com\">Vercel</a><br><br>\n  <a href=\"https://vercel.com\"><img src=\"https://avatars1.githubusercontent.com/u/14985020?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://motif.land\">Motif</a><br><br>\n  <a href=\"https://motif.land\"><img src=\"https://avatars1.githubusercontent.com/u/74457950?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.hashicorp.com\">HashiCorp</a><br><br>\n  <a href=\"https://www.hashicorp.com\"><img src=\"https://avatars1.githubusercontent.com/u/761456?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.gitbook.com\">GitBook</a><br><br>\n  <a href=\"https://www.gitbook.com\"><img src=\"https://avatars1.githubusercontent.com/u/7111340?s=256&v=4\" width=\"128\"></a>\n</td>\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.gatsbyjs.org\">Gatsby</a><br><br>\n  <a href=\"https://www.gatsbyjs.org\"><img src=\"https://avatars1.githubusercontent.com/u/12551863?s=256&v=4\" width=\"128\"></a>\n</td>\n</tr>\n<tr valign=\"middle\">\n</tr>\n<tr valign=\"middle\">\n<td width=\"20%\" align=\"center\" rowspan=\"2\" colspan=\"2\">\n  <a href=\"https://www.netlify.com\">Netlify</a><br><br>\n  <!--OC has a sharper image-->\n  <a href=\"https://www.netlify.com\"><img src=\"https://images.opencollective.com/netlify/4087de2/logo/256.png\" width=\"128\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://www.coinbase.com\">Coinbase</a><br><br>\n  <a href=\"https://www.coinbase.com\"><img src=\"https://avatars1.githubusercontent.com/u/1885080?s=256&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://themeisle.com\">ThemeIsle</a><br><br>\n  <a href=\"https://themeisle.com\"><img src=\"https://avatars1.githubusercontent.com/u/58979018?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://expo.io\">Expo</a><br><br>\n  <a href=\"https://expo.io\"><img src=\"https://avatars1.githubusercontent.com/u/12504344?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://boostnote.io\">Boost Note</a><br><br>\n  <a href=\"https://boostnote.io\"><img src=\"https://images.opencollective.com/boosthub/6318083/logo/128.png\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://markdown.space\">Markdown Space</a><br><br>\n  <a href=\"https://markdown.space\"><img src=\"https://images.opencollective.com/markdown-space/e1038ed/logo/128.png\" width=\"64\"></a>\n</td>\n<td width=\"10%\" align=\"center\">\n  <a href=\"https://www.holloway.com\">Holloway</a><br><br>\n  <a href=\"https://www.holloway.com\"><img src=\"https://avatars1.githubusercontent.com/u/35904294?s=128&v=4\" width=\"64\"></a>\n</td>\n<td width=\"10%\"></td>\n<td width=\"10%\"></td>\n</tr>\n<tr valign=\"middle\">\n<td width=\"100%\" align=\"center\" colspan=\"8\">\n  <br>\n  <a href=\"https://opencollective.com/unified\"><strong>You?</strong></a>\n  <br><br>\n</td>\n</tr>\n</table>\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://github.com/micromark/micromark/workflows/main/badge.svg\n\n[build]: https://github.com/micromark/micromark/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/micromark/micromark.svg\n\n[coverage]: https://codecov.io/github/micromark/micromark\n\n[downloads-badge]: https://img.shields.io/npm/dm/micromark.svg\n\n[downloads]: https://www.npmjs.com/package/micromark\n\n[bundle-size-badge]: https://img.shields.io/badge/dynamic/json?label=minzipped%20size&query=$.size.compressedSize&url=https://deno.bundlejs.com/?q=micromark\n\n[bundle-size]: https://bundlejs.com/?q=micromark\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[opencollective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/micromark/micromark/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[esmsh]: https://esm.sh\n\n[typescript]: https://www.typescriptlang.org\n\n[development]: https://nodejs.org/api/packages.html#packages_resolving_user_conditions\n\n[license]: https://github.com/micromark/micromark/blob/main/license\n\n[author]: https://wooorm.com\n\n[health]: https://github.com/micromark/.github\n\n[securitymd]: https://github.com/micromark/.github/blob/main/security.md\n\n[contributing]: https://github.com/micromark/.github/blob/main/contributing.md\n\n[support]: https://github.com/micromark/.github/blob/main/support.md\n\n[coc]: https://github.com/micromark/.github/blob/main/code-of-conduct.md\n\n[cheat]: https://commonmark.org/help/\n\n[twitter]: https://twitter.com/unifiedjs\n\n[site]: https://unifiedjs.com\n\n[contribute]: #contribute\n\n[uint8-array]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n\n[encoding]: https://nodejs.org/api/util.html#whatwg-supported-encodings\n\n[commonmark]: https://commonmark.org\n\n[directives]: https://github.com/micromark/micromark-extension-directive\n\n[frontmatter]: https://github.com/micromark/micromark-extension-frontmatter\n\n[gfm]: https://github.com/micromark/micromark-extension-gfm\n\n[math]: https://github.com/micromark/micromark-extension-math\n\n[mdxjs]: https://github.com/micromark/micromark-extension-mdxjs\n\n[security]: #security\n\n[sponsor]: #sponsor\n\n[micromark]: https://github.com/micromark/micromark\n\n[extensions]: https://github.com/micromark/micromark#extensions\n\n[test]: https://github.com/micromark/micromark#test\n\n[size-debug]: https://github.com/micromark/micromark#size--debug\n\n[comparison]: https://github.com/micromark/micromark#comparison\n\n[markdown-rs]: https://github.com/wooorm/markdown-rs\n\n[mdast-util-to-markdown]: https://github.com/syntax-tree/mdast-util-to-markdown\n\n[api-micromark]: #micromarkvalue-encoding-options\n\n[api-stream]: #streamoptions\n\n[api-options]: #options\n","maintainers":[{"name":"wooorm","email":"tituswormer@gmail.com"}],"time":{"modified":"2023-06-21T16:46:00.913Z","created":"2014-11-29T04:51:15.531Z","1.0.0":"2014-11-29T04:51:15.531Z","2.0.0":"2020-08-20T15:18:37.697Z","2.1.0":"2020-08-31T14:35:48.628Z","2.2.0":"2020-09-10T11:54:15.821Z","2.3.0":"2020-09-13T12:06:24.552Z","2.4.0":"2020-09-14T11:25:27.282Z","2.5.0":"2020-09-17T14:20:09.343Z","2.6.0":"2020-09-17T18:13:33.723Z","2.6.1":"2020-09-18T09:11:08.627Z","2.7.0":"2020-09-21T11:52:42.220Z","2.8.0":"2020-09-21T14:52:30.269Z","2.8.1":"2020-09-23T11:32:29.557Z","2.9.0":"2020-09-29T15:47:04.452Z","2.9.1":"2020-09-30T15:38:55.635Z","2.9.2":"2020-10-01T10:03:21.870Z","2.10.0":"2020-10-11T11:16:15.030Z","2.10.1":"2020-10-11T11:25:15.011Z","2.11.0":"2020-12-08T17:03:51.438Z","2.11.1":"2020-12-09T11:25:00.159Z","2.11.2":"2020-12-09T15:08:10.917Z","2.11.3":"2021-02-02T10:36:12.084Z","2.11.4":"2021-02-04T09:11:17.707Z","3.0.0-alpha.1":"2021-06-07T09:25:40.887Z","3.0.0-alpha.2":"2021-06-07T13:35:22.552Z","3.0.0-alpha.3":"2021-06-16T17:17:44.279Z","3.0.0-beta.1":"2021-06-20T12:12:36.198Z","3.0.0":"2021-06-22T19:03:19.484Z","3.0.1":"2021-07-16T12:44:36.613Z","3.0.2":"2021-07-24T17:05:59.406Z","3.0.3":"2021-08-03T18:06:36.184Z","3.0.4":"2021-08-20T10:17:59.912Z","3.0.5":"2021-08-21T10:58:17.473Z","3.0.6":"2021-10-02T13:06:34.922Z","3.0.7":"2021-10-09T07:41:42.660Z","3.0.8":"2021-11-19T16:20:42.448Z","3.0.9":"2021-11-22T20:03:37.328Z","3.0.10":"2021-12-04T09:42:29.228Z","3.1.0":"2022-10-06T17:43:40.674Z","3.2.0":"2023-05-30T12:25:44.569Z","4.0.0":"2023-06-21T16:46:00.751Z"},"author":{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"},"license":"MIT","readmeFilename":"readme.md","homepage":"https://github.com/micromark/micromark/tree/main#readme","keywords":["commonmark","compiler","gfm","html","lexer","markdown","markup","md","unified","parse","parser","plugin","process","remark","render","renderer","token","tokenizer"],"repository":{"type":"git","url":"git+https://github.com/micromark/micromark.git#main"},"contributors":[{"name":"Titus Wormer","email":"tituswormer@gmail.com","url":"https://wooorm.com"}],"bugs":{"url":"https://github.com/micromark/micromark/issues"}}