"use strict";var C=Object.create;var g=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var N=Object.getOwnPropertyNames;var R=Object.getPrototypeOf,I=Object.prototype.hasOwnProperty;var O=(n,t,e,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of N(t))!I.call(n,r)&&r!==e&&g(n,r,{get:()=>t[r],enumerable:!(i=P(t,r))||i.enumerable});return n};var k=(n,t,e)=>(e=n!=null?C(R(n)):{},O(t||!n||!n.__esModule?g(e,"default",{value:n,enumerable:!0}):e,n));var v=require("crypto"),w=require("node:net"),y=require("os"),S=k(require("path"));var h=require("child_process"),u=n=>{let t,e=!1,i=[n];switch(process.platform){case"win32":t="cmd",e=!0,i=["/c","start",'""',`"${n}"`];break;case"darwin":t="open";break;case"linux":default:t="xdg-open";break}return new Promise((r,o)=>{let s="",a=(0,h.spawn)(t,i,{stdio:"pipe",shell:e,env:{...process.env,ELECTRON_RUN_AS_NODE:void 0}});a.stdout.setEncoding("utf8").on("data",c=>s+=c),a.stderr.setEncoding("utf8").on("data",c=>s+=c),a.on("error",o),a.on("exit",c=>{c!==0?o(new Error(`Failed to open: ${s}`)):r()})})};var m=require("stream"),d=class extends m.Transform{constructor(e){super();this.prefix=[];this.splitSuffix=Buffer.alloc(0);if(typeof e=="string"&&e.length===1)this.splitter=e.charCodeAt(0);else if(typeof e=="number")this.splitter=e;else throw new Error("not implemented here")}_transform(e,i,r){let o=0;for(;o<e.length;){let s=e.indexOf(this.splitter,o);if(s===-1)break;let a=e.subarray(o,s),c=this.prefix.length||this.splitSuffix.length?Buffer.concat([...this.prefix,a,this.splitSuffix]):a;this.push(c),this.prefix.length=0,o=s+1}o<e.length&&this.prefix.push(e.subarray(o)),r()}_flush(e){this.prefix.length&&this.push(Buffer.concat([...this.prefix,this.splitSuffix])),e()}};var f=class{constructor(t){this.stream=t;this.methods=new Map;this.pendingRequests=new Map;this.idCounter=0,this.stream.pipe(new d(0)).on("data",e=>this.handleData(e))}registerMethod(t,e){this.methods.set(t,e)}async callMethod(t,e){let i=this.idCounter++,r={id:i,method:t,params:e},o=new Promise((s,a)=>{this.pendingRequests.set(i,{resolve:s,reject:a})});return this.stream.write(JSON.stringify(r)+"\0"),o}async handleData(t){let e=JSON.parse(t.toString());if("method"in e){let{id:i,method:r,params:o}=e,s={id:i};try{if(this.methods.has(r)){let a=await this.methods.get(r)(o);s.result=a}else throw new Error(`Method not found: ${r}`)}catch(a){s.error={code:-1,message:String(a)}}this.stream.write(JSON.stringify(s)+"\0")}else{let{id:i,result:r,error:o}=e,s=this.pendingRequests.get(i);this.pendingRequests.delete(i),r!==void 0?s?.resolve(r):o!==void 0&&s?.reject(new Error(o.message))}}};var[A,L,E,...p]=process.argv;var l={"--print":!1,"--no-cache":!1,"--help":!1,"--save":!1};for(;p.length&&l.hasOwnProperty(p[0]);)l[p.shift()]=!0;(!p.length||l["--help"])&&(console.log(`Usage: copilot-debug [${Object.keys(l).join("] [")}] <command> <args...>`),console.log(""),console.log("Options:"),console.log("  --print     Print the generated configuration without running it"),console.log("  --no-cache  Generate a new configuration without checking the cache."),console.log("  --save      Save the configuration to your launch.json."),console.log("  --help      Print this help."),process.exit(l["--help"]?0:1));var M=(0,w.createServer)(n=>{clearInterval(F);let t=new f(n);t.registerMethod("output",({category:r,output:o})=>(r==="stderr"?process.stderr.write(o):r==="stdout"?process.stdout.write(o):r!=="telemetry"&&o&&console.log(o),Promise.resolve())),t.registerMethod("exit",async({code:r,error:o})=>{o&&!e&&console.error(`> ${o}`),await Promise.all([new Promise(s=>process.stdout.end(s)),new Promise(s=>process.stderr.end(s))]).then(()=>process.exit(r))}),t.registerMethod("started",()=>(console.log("> Debug session has started"),Promise.resolve()));let e=!1;process.on("SIGINT",()=>{e?process.exit(1):(e=!0,t.callMethod("stop").then(()=>{process.exit(1)}))}),t.registerMethod("isGenerating",()=>(console.log("> Generating debug configuration..."),Promise.resolve())),t.registerMethod("didGenerate",()=>(console.log("> Generated config, run with `copilot-debug --no-cache` to regenerate or `--save` to your launch.json"),Promise.resolve()));let i={cwd:process.cwd(),args:p,forceNew:l["--no-cache"],printOnly:l["--print"],save:l["--save"]};t.callMethod("start",i).then(r=>{switch(r.kind){case 0:console.error(`> Could not create a launch configuration: ${r.text}`);break;case 1:l["--print"]&&(console.log(JSON.stringify(r.config,void 0,2)),process.exit(0)),l["--save"]&&(console.log("> Configuration saved, press F5 to debug"),process.exit(0));return;case 3:process.exit(1);default:console.error("> Unexpected result:",r);return}})}),F=setInterval(()=>{console.log("> Waiting for VS Code to connect...")},2e3),b=`copilot-dbg.${process.pid}-${(0,v.randomBytes)(4).toString("hex")}.sock`,x=S.join(process.platform==="win32"?"\\\\.\\pipe\\":(0,y.tmpdir)(),b);M.listen(x,()=>{u(E+(process.platform==="win32"?`/${b}`:x)).then(()=>{},n=>{console.error("Failed to open the activation URI:",n),process.exit(1)})});
