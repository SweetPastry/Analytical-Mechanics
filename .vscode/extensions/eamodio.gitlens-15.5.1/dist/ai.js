exports.id=53,exports.ids=[53],exports.modules={3915:(e,t,n)=>{n.r(t),n.d(t,{AIProviderService:()=>AIProviderService,extractDraftMessage:()=>U,getApiKey:()=>N,getMaxCharacters:()=>_});var a=n(1398),i=n(8803),o=n(5287),r=n(5313),s=n(9634),l=n(1391),d=n(7899),c=n(2471);async function h(e,t){let n;let i=await (await e.ai)?.getModels()??[],o=[];for(let e of i){if(e.hidden)continue;n!==e.provider.id&&(n=e.provider.id,o.push({label:e.provider.name,kind:a.QuickPickItemKind.Separator}));let i=e.provider.id===t?.provider&&e.id===t?.model;o.push({label:e.name,iconPath:new a.ThemeIcon(i?"check":"blank"),model:e,picked:i})}let r=a.window.createQuickPick();r.ignoreFocusOut=(0,c.dW)();let s=[],h={iconPath:new a.ThemeIcon("clear-all"),tooltip:"Reset AI Keys..."};try{return await new Promise(e=>{s.push(r.onDidHide(()=>e(void 0)),r.onDidAccept(()=>{0!==r.activeItems.length&&e(r.activeItems[0])}),r.onDidTriggerButton(e=>{e===h&&(0,d.RS)(l.T.ResetAIKey)})),r.title="Choose AI Model",r.placeholder="Select an AI model to use for experimental AI features",r.matchOnDescription=!0,r.matchOnDetail=!0,r.buttons=[h],r.items=o,r.show()})}finally{r.dispose(),s.forEach(e=>void e.dispose())}}var u=n(4832),g=n(3131),m=n(3459),p=n(4026);let f=`You are an advanced AI programming assistant tasked with summarizing code changes into a concise and meaningful commit message. Compose a commit message that:
- Strictly synthesizes meaningful information from the provided code diff
- Utilizes any additional user-provided context to comprehend the rationale behind the code changes
- Is clear and brief, with an informal yet professional tone, and without superfluous descriptions
- Avoids unnecessary phrases such as "this commit", "this change", and the like
- Avoids direct mention of specific code identifiers, names, or file names, unless they are crucial for understanding the purpose of the changes
- Most importantly emphasizes the 'why' of the change, its benefits, or the problem it addresses rather than only the 'what' that changed

Follow the user's instructions carefully, don't repeat yourself, don't include the code in the output, or make anything up!`,y=`You are an advanced AI programming assistant tasked with summarizing code changes into a concise and meaningful title with an optional description. Compose a title with an optional description that:
- Strictly synthesizes meaningful information from the provided code diff
- Utilizes any additional user-provided context to comprehend the rationale behind the code changes
- Is clear and brief, with an informal yet professional tone, and without superfluous descriptions
- Avoids unnecessary phrases such as "this commit", "this change", and the like
- Avoids direct mention of specific code identifiers, names, or file names, unless they are crucial for understanding the purpose of the changes
- Most importantly emphasizes the 'why' of the change, its benefits, or the problem it addresses rather than only the 'what' that changed

Follow the user's instructions carefully, don't repeat yourself, don't include the code in the output, or make anything up!`,w=`You are an advanced AI programming assistant tasked with summarizing code changes into a concise and meaningful code review title with an optional description. Compose a code review title with an optional description that:
- Strictly synthesizes meaningful information from the provided code diff
- Utilizes any additional user-provided context to comprehend the rationale behind the code changes
- Is clear and brief, with an informal yet professional tone, and without superfluous descriptions
- Avoids unnecessary phrases such as "this commit", "this change", and the like
- Avoids direct mention of specific code identifiers, names, or file names, unless they are crucial for understanding the purpose of the changes
- Most importantly emphasizes the 'why' of the change, its benefits, or the problem it addresses rather than only the 'what' that changed

Follow the user's instructions carefully, don't repeat yourself, don't include the code in the output, or make anything up!`,x={id:"anthropic",name:"Anthropic"};function v(e){return"claude-instant-1"===e.id||"claude-2"===e.id}let b=[{id:"claude-3-opus-20240229",name:"Claude 3 Opus",maxTokens:2e5,provider:x},{id:"claude-3-5-sonnet-20240620",name:"Claude 3.5 Sonnet",maxTokens:2e5,provider:x},{id:"claude-3-sonnet-20240229",name:"Claude 3 Sonnet",maxTokens:2e5,provider:x},{id:"claude-3-haiku-20240307",name:"Claude 3 Haiku",maxTokens:2e5,provider:x,default:!0},{id:"claude-2.1",name:"Claude 2.1",maxTokens:2e5,provider:x},{id:"claude-2",name:"Claude 2.0",maxTokens:1e5,provider:x},{id:"claude-instant-1",name:"Claude Instant",maxTokens:1e5,provider:x}];let AnthropicProvider=class AnthropicProvider{constructor(e){this.container=e}id=x.id;name=x.name;dispose(){}getModels(){return Promise.resolve(b)}async generateMessage(e,t,n,i,o){let r=await k(this.container.storage);if(null!=r)try{let s,l;return v(e)?[s,l]=await this.makeLegacyRequest(e,r,(e,a)=>{let r=t.substring(0,e),s=`

Human: ${i.systemPrompt}

Human: Here is the code diff to use to generate the ${i.contextName}:

${r}
`;return o?.context&&(s+=`
Human: Here is additional context which should be taken into account when generating the ${i.contextName}:

${o.context}
`),i.customPrompt&&(s+=`
Human: ${i.customPrompt}
`),s+="\nAssistant:",n["retry.count"]=a,n["input.length"]=(n["input.length"]??0)+s.length,s},4096,o?.cancellation):[s,l]=await this.makeRequest(e,r,i.systemPrompt,(e,a)=>{let r=t.substring(0,e),s=[{role:"user",content:[{type:"text",text:`Here is the code diff to use to generate the ${i.contextName}:`},{type:"text",text:r},...o?.context?[{type:"text",text:`Here is additional context which should be taken into account when generating the ${i.contextName}:`},{type:"text",text:o.context}]:[],...i.customPrompt?[{type:"text",text:i.customPrompt}]:[]]}];return n["retry.count"]=a,n["input.length"]=(n["input.length"]??0)+(0,p.cz)(s,e=>(0,p.cz)(e.content,e=>"text"===e.type?e.text.length:0)),s},4096,o?.cancellation),t.length>l&&a.window.showWarningMessage(`The diff of the changes had to be truncated to ${l} characters to fit within the Anthropic's limits.`),s}catch(e){throw Error(`Unable to generate ${i.contextName}: ${e.message}`)}}async generateDraftMessage(e,t,n,a){let i=a?.codeSuggestion===!0?u.H.get("experimental.generateCodeSuggestionMessagePrompt"):u.H.get("experimental.generateCloudPatchMessagePrompt");return i.endsWith(".")||(i+="."),this.generateMessage(e,t,n,{systemPrompt:a?.codeSuggestion===!0?w:y,customPrompt:i,contextName:a?.codeSuggestion===!0?"code suggestion title and description":"cloud patch title and description"},a)}async generateCommitMessage(e,t,n,a){let i=u.H.get("experimental.generateCommitMessagePrompt");return i.endsWith(".")||(i+="."),this.generateMessage(e,t,n,{systemPrompt:f,customPrompt:i,contextName:"commit message"},a)}async explainChanges(e,t,n,i,o){let r=await k(this.container.storage);if(null==r)return;let s=`You are an advanced AI programming assistant tasked with summarizing code changes into an explanation that is both easy to understand and meaningful. Construct an explanation that:
- Concisely synthesizes meaningful information from the provided code diff
- Incorporates any additional context provided by the user to understand the rationale behind the code changes
- Places the emphasis on the 'why' of the change, clarifying its benefits or addressing the problem that necessitated the change, beyond just detailing the 'what' has changed

Do not make any assumptions or invent details that are not supported by the code diff or the user-provided context.`;try{let l,d;return v(e)?[l,d]=await this.makeLegacyRequest(e,r,(e,a)=>{let o=n.substring(0,e),r=`

Human: ${s}

Human: Here is additional context provided by the author of the changes, which should provide some explanation to why these changes where made. Please strongly consider this information when generating your explanation:

${t}

Human: Now, kindly explain the following code diff in a way that would be clear to someone reviewing or trying to understand these changes:

${o}

Human: Remember to frame your explanation in a way that is suitable for a reviewer to quickly grasp the essence of the changes, the issues they resolve, and their implications on the codebase. And please don't explain how you arrived at the explanation, just provide the explanation.
Assistant:`;return i["retry.count"]=a,i["input.length"]=(i["input.length"]??0)+r.length,r},4096,o?.cancellation):[l,d]=await this.makeRequest(e,r,s,(e,a)=>{let o=n.substring(0,e),r=[{role:"user",content:[{type:"text",text:"Here is additional context provided by the author of the changes, which should provide some explanation to why these changes where made. Please strongly consider this information when generating your explanation:"},{type:"text",text:t},{type:"text",text:"Now, kindly explain the following code diff in a way that would be clear to someone reviewing or trying to understand these changes:"},{type:"text",text:o},{type:"text",text:"Remember to frame your explanation in a way that is suitable for a reviewer to quickly grasp the essence of the changes, the issues they resolve, and their implications on the codebase. And please don't explain how you arrived at the explanation, just provide the explanation"}]}];return i["retry.count"]=a,i["input.length"]=(i["input.length"]??0)+(0,p.cz)(r,e=>(0,p.cz)(e.content,e=>"text"===e.type?e.text.length:0)),r},4096,o?.cancellation),n.length>d&&a.window.showWarningMessage(`The diff of the changes had to be truncated to ${d} characters to fit within the Anthropic's limits.`),l}catch(e){throw Error(`Unable to explain changes: ${e.message}`)}}async fetch(e,t,n,a){let o;null!=a&&(o=new AbortController,a.onCancellationRequested(()=>o?.abort()));try{return await (0,m.hd)(v(e)?"https://api.anthropic.com/v1/complete":"https://api.anthropic.com/v1/messages",{headers:{Accept:"application/json",Authorization:`Bearer ${t}`,"Content-Type":"application/json","X-API-Key":t,"anthropic-version":"2023-06-01"},method:"POST",body:JSON.stringify(n)})}catch(e){if("AbortError"===e.name)throw new i.AL(e);throw e}}async makeRequest(e,t,n,a,i,o){let r=0,s=_(e,2600);for(;;){let l={model:e.id,messages:a(s,r),system:n,stream:!1,max_tokens:i},d=await this.fetch(e,t,l,o);if(!d.ok){let e;try{e=await d.json()}catch{}if(r++<2&&e?.error?.type==="invalid_request_error"&&e?.error?.message?.includes("prompt is too long")){s-=500*r;continue}throw Error(`(${this.name}:${d.status}) ${e?.error?.message||d.statusText})`)}return[(await d.json()).content.map(e=>e.text).join("\n").trim(),s]}}async makeLegacyRequest(e,t,n,a,i){let o=0,r=_(e,2600);for(;;){let s={model:e.id,prompt:n(r,o),stream:!1,max_tokens_to_sample:a},l=await this.fetch(e,t,s,i);if(!l.ok){let e;try{e=await l.json()}catch{}if(o++<2&&e?.error?.type==="invalid_request_error"&&e?.error?.message?.includes("prompt is too long")){r-=500*o;continue}throw Error(`(${this.name}:${l.status}) ${e?.error?.message||l.statusText})`)}return[(await l.json()).completion.trim(),r]}}};async function k(e){return N(e,{id:x.id,name:x.name,validator:e=>/(?:sk-)?[a-zA-Z0-9-_]{32,}/.test(e),url:"https://console.anthropic.com/account/keys"})}let P={id:"gemini",name:"Google"},$=[{id:"gemini-1.5-pro-latest",name:"Gemini 1.5 Pro",maxTokens:1048576,provider:P,default:!0},{id:"gemini-1.5-flash-latest",name:"Gemini 1.5 Flash",maxTokens:1048576,provider:P},{id:"gemini-1.0-pro",name:"Gemini 1.0 Pro",maxTokens:30720,provider:P}];let GeminiProvider=class GeminiProvider{constructor(e){this.container=e}id=P.id;name=P.name;dispose(){}getModels(){return Promise.resolve($)}async generateMessage(e,t,n,i,o){let r=await M(this.container.storage);if(null==r)return;let s=_(e,2600);for(;;){let l=t.substring(0,s),d={systemInstruction:{parts:[{text:i.systemPrompt}]},contents:[{role:"user",parts:[{text:`Here is the code diff to use to generate the ${i.contextName}:

${l}`},...o?.context?[{text:`Here is additional context which should be taken into account when generating the ${i.contextName}:

${o.context}`}]:[],{text:i.customPrompt}]}]};n["retry.count"]=0,n["input.length"]=(n["input.length"]??0)+(0,p.cz)(d.systemInstruction?.parts,e=>e.text.length)+(0,p.cz)(d.contents,e=>(0,p.cz)(e.parts,e=>e.text.length));let c=await this.fetch(e.id,r,d,o?.cancellation);if(!c.ok){let e;try{e=await c.json()}catch{}throw Error(`Unable to generate ${i.contextName}: (${this.name}:${c.status}) ${e?.error?.message||c.statusText}`)}return t.length>s&&a.window.showWarningMessage(`The diff of the changes had to be truncated to ${s} characters to fit within the Gemini's limits.`),(await c.json()).candidates[0].content.parts[0].text.trim()}}async generateDraftMessage(e,t,n,a){let i=a?.codeSuggestion===!0?u.H.get("experimental.generateCodeSuggestionMessagePrompt"):u.H.get("experimental.generateCloudPatchMessagePrompt");return i.endsWith(".")||(i+="."),this.generateMessage(e,t,n,{systemPrompt:a?.codeSuggestion===!0?w:y,customPrompt:i,contextName:a?.codeSuggestion===!0?"code suggestion title and description":"cloud patch title and description"},a)}async generateCommitMessage(e,t,n,a){let i=u.H.get("experimental.generateCommitMessagePrompt");return i.endsWith(".")||(i+="."),this.generateMessage(e,t,n,{systemPrompt:f,customPrompt:i,contextName:"commit message"},a)}async explainChanges(e,t,n,i,o){let r=await M(this.container.storage);if(null==r)return;let s=_(e,3e3);for(;;){let l=n.substring(0,s),d={systemInstruction:{parts:[{text:`You are an advanced AI programming assistant tasked with summarizing code changes into an explanation that is both easy to understand and meaningful. Construct an explanation that:
- Concisely synthesizes meaningful information from the provided code diff
- Incorporates any additional context provided by the user to understand the rationale behind the code changes
- Places the emphasis on the 'why' of the change, clarifying its benefits or addressing the problem that necessitated the change, beyond just detailing the 'what' has changed

Do not make any assumptions or invent details that are not supported by the code diff or the user-provided context.`}]},contents:[{role:"user",parts:[{text:`Here is additional context provided by the author of the changes, which should provide some explanation to why these changes where made. Please strongly consider this information when generating your explanation:

${t}`},{text:`Now, kindly explain the following code diff in a way that would be clear to someone reviewing or trying to understand these changes:

${l}`},{text:"Remember to frame your explanation in a way that is suitable for a reviewer to quickly grasp the essence of the changes, the issues they resolve, and their implications on the codebase."}]}]};i["retry.count"]=0,i["input.length"]=(i["input.length"]??0)+(0,p.cz)(d.systemInstruction?.parts,e=>e.text.length)+(0,p.cz)(d.contents,e=>(0,p.cz)(e.parts,e=>e.text.length));let c=await this.fetch(e.id,r,d,o?.cancellation);if(!c.ok){let e;try{e=await c.json()}catch{}throw Error(`Unable to explain changes: (${this.name}:${c.status}) ${e?.error?.message||c.statusText}`)}return n.length>s&&a.window.showWarningMessage(`The diff of the changes had to be truncated to ${s} characters to fit within the Gemini's limits.`),(await c.json()).candidates[0].content.parts[0].text.trim()}}async fetch(e,t,n,a){let o;null!=a&&(o=new AbortController,a.onCancellationRequested(()=>o?.abort()));try{return await (0,m.hd)(`https://generativelanguage.googleapis.com/v1beta/models/${e}:generateContent`,{headers:{Accept:"application/json","Content-Type":"application/json","x-goog-api-key":t},method:"POST",body:JSON.stringify(n),signal:o?.signal})}catch(e){if("AbortError"===e.name)throw new i.AL(e);throw e}}};async function M(e){return N(e,{id:P.id,name:P.name,validator:()=>!0,url:"https://aistudio.google.com/app/apikey"})}let C={id:"openai",name:"OpenAI"},T=[{id:"gpt-4o",name:"GPT-4 Omni",maxTokens:128e3,provider:C,default:!0},{id:"gpt-4o-mini",name:"GPT-4 Omni Mini",maxTokens:128e3,provider:C},{id:"gpt-4-turbo",name:"GPT-4 Turbo with Vision",maxTokens:128e3,provider:C},{id:"gpt-4-turbo-2024-04-09",name:"GPT-4 Turbo Preview (2024-04-09)",maxTokens:128e3,provider:C,hidden:!0},{id:"gpt-4-turbo-preview",name:"GPT-4 Turbo Preview",maxTokens:128e3,provider:C},{id:"gpt-4-0125-preview",name:"GPT-4 0125 Preview",maxTokens:128e3,provider:C,hidden:!0},{id:"gpt-4-1106-preview",name:"GPT-4 1106 Preview",maxTokens:128e3,provider:C,hidden:!0},{id:"gpt-4",name:"GPT-4",maxTokens:8192,provider:C},{id:"gpt-4-0613",name:"GPT-4 0613",maxTokens:8192,provider:C,hidden:!0},{id:"gpt-4-32k",name:"GPT-4 32k",maxTokens:32768,provider:C},{id:"gpt-4-32k-0613",name:"GPT-4 32k 0613",maxTokens:32768,provider:C,hidden:!0},{id:"gpt-3.5-turbo",name:"GPT-3.5 Turbo",maxTokens:16385,provider:C},{id:"gpt-3.5-turbo-0125",name:"GPT-3.5 Turbo 0125",maxTokens:16385,provider:C,hidden:!0},{id:"gpt-3.5-turbo-1106",name:"GPT-3.5 Turbo 1106",maxTokens:16385,provider:C,hidden:!0},{id:"gpt-3.5-turbo-16k",name:"GPT-3.5 Turbo 16k",maxTokens:16385,provider:C,hidden:!0}];let OpenAIProvider=class OpenAIProvider{constructor(e){this.container=e}id=C.id;name=C.name;dispose(){}getModels(){return Promise.resolve(T)}get url(){return u.H.get("ai.experimental.openai.url")||"https://api.openai.com/v1/chat/completions"}async generateMessage(e,t,n,i,o){let r=await A(this.container.storage);if(null==r)return;let s=0,l=_(e,2600);for(;;){let d=t.substring(0,l),c={model:e.id,messages:[{role:"system",content:i.systemPrompt},{role:"user",content:`Here is the code diff to use to generate the ${i.contextName}:

${d}`},...o?.context?[{role:"user",content:`Here is additional context which should be taken into account when generating the ${i.contextName}:

${o.context}`}]:[],{role:"user",content:i.customPrompt}]};n["retry.count"]=s,n["input.length"]=(n["input.length"]??0)+(0,p.cz)(c.messages,e=>e.content.length);let h=await this.fetch(r,c,o?.cancellation);if(!h.ok){let t;if(404===h.status)throw Error(`Unable to generate ${i.contextName}: Your API key doesn't seem to have access to the selected '${e.id}' model`);if(429===h.status)throw Error(`Unable to generate ${i.contextName}: (${this.name}:${h.status}) Too many requests (rate limit exceeded) or your API key is associated with an expired trial`);try{t=await h.json()}catch{}if(s++<2&&t?.error?.code==="context_length_exceeded"){l-=500*s;continue}throw Error(`Unable to generate ${i.contextName}: (${this.name}:${h.status}) ${t?.error?.message||h.statusText}`)}return t.length>l&&a.window.showWarningMessage(`The diff of the changes had to be truncated to ${l} characters to fit within the OpenAI's limits.`),(await h.json()).choices[0].message.content.trim()}}async generateDraftMessage(e,t,n,a){let i=a?.codeSuggestion===!0?u.H.get("experimental.generateCodeSuggestionMessagePrompt"):u.H.get("experimental.generateCloudPatchMessagePrompt");return i.endsWith(".")||(i+="."),this.generateMessage(e,t,n,{systemPrompt:a?.codeSuggestion===!0?w:y,customPrompt:i,contextName:a?.codeSuggestion===!0?"code suggestion title and description":"cloud patch title and description"},a)}async generateCommitMessage(e,t,n,a){let i=u.H.get("experimental.generateCommitMessagePrompt");return i.endsWith(".")||(i+="."),this.generateMessage(e,t,n,{systemPrompt:f,customPrompt:i,contextName:"commit message"},a)}async explainChanges(e,t,n,i,o){let r=await A(this.container.storage);if(null==r)return;let s=0,l=_(e,3e3);for(;;){let d=n.substring(0,l),c={model:e.id,messages:[{role:"system",content:`You are an advanced AI programming assistant tasked with summarizing code changes into an explanation that is both easy to understand and meaningful. Construct an explanation that:
- Concisely synthesizes meaningful information from the provided code diff
- Incorporates any additional context provided by the user to understand the rationale behind the code changes
- Places the emphasis on the 'why' of the change, clarifying its benefits or addressing the problem that necessitated the change, beyond just detailing the 'what' has changed

Do not make any assumptions or invent details that are not supported by the code diff or the user-provided context.`},{role:"user",content:`Here is additional context provided by the author of the changes, which should provide some explanation to why these changes where made. Please strongly consider this information when generating your explanation:

${t}`},{role:"user",content:`Now, kindly explain the following code diff in a way that would be clear to someone reviewing or trying to understand these changes:

${d}`},{role:"user",content:"Remember to frame your explanation in a way that is suitable for a reviewer to quickly grasp the essence of the changes, the issues they resolve, and their implications on the codebase."}]};i["retry.count"]=s,i["input.length"]=(i["input.length"]??0)+(0,p.cz)(c.messages,e=>e.content.length);let h=await this.fetch(r,c,o?.cancellation);if(!h.ok){let t;if(404===h.status)throw Error(`Unable to explain changes: Your API key doesn't seem to have access to the selected '${e.id}' model`);if(429===h.status)throw Error(`Unable to explain changes: (${this.name}:${h.status}) Too many requests (rate limit exceeded) or your API key is associated with an expired trial`);try{t=await h.json()}catch{}if(s++<2&&t?.error?.code==="context_length_exceeded"){l-=500*s;continue}throw Error(`Unable to explain changes: (${this.name}:${h.status}) ${t?.error?.message||h.statusText}`)}return n.length>l&&a.window.showWarningMessage(`The diff of the changes had to be truncated to ${l} characters to fit within the OpenAI's limits.`),(await h.json()).choices[0].message.content.trim()}}async fetch(e,t,n){let a;let o=this.url,r=o.includes(".azure.com");null!=n&&(a=new AbortController,n.onCancellationRequested(()=>a?.abort()));try{return(0,m.hd)(o,{headers:{Accept:"application/json","Content-Type":"application/json",...r?{"api-key":e}:{Authorization:`Bearer ${e}`}},method:"POST",body:JSON.stringify(t),signal:a?.signal})}catch(e){if("AbortError"===e.name)throw new i.AL(e);throw e}}};async function A(e){return N(e,{id:C.id,name:C.name,validator:e=>/(?:sk-)?[a-zA-Z0-9]{32,}/.test(e),url:"https://platform.openai.com/account/api-keys"})}var I=n(3166);let S={id:"vscode",name:"VS Code Provided"};let VSCodeAIProvider=class VSCodeAIProvider{constructor(e){this.container=e}id=S.id;_name;get name(){return this._name??S.name}dispose(){}async getModels(){return(await a.lm.selectChatModels()).map(E)}async getChatModel(e){let t=await a.lm.selectChatModels(e.selector);return t?.[0]}async generateMessage(e,t,n,i,o){let r,s;let l=await this.getChatModel(e);if(null==l)return;r=o?.cancellation==null?(s=new a.CancellationTokenSource).token:o.cancellation;let d=0,c=_(e,2600)-1e3;try{for(;;){let s=t.substring(0,c),h=[a.LanguageModelChatMessage.User(i.systemPrompt),a.LanguageModelChatMessage.User(`Here is the code diff to use to generate the ${i.contextName}:

${s}`),...o?.context?[a.LanguageModelChatMessage.User(`Here is additional context which should be taken into account when generating the ${i.contextName}:

${o.context}`)]:[],a.LanguageModelChatMessage.User(i.customPrompt)];n["retry.count"]=d,n["input.length"]=(n["input.length"]??0)+(0,p.cz)(h,e=>e.content.length);try{let n=await l.sendRequest(h,{},r);t.length>c&&a.window.showWarningMessage(`The diff of the changes had to be truncated to ${c} characters to fit within ${H(e.provider.name)} limits.`);let i="";for await(let e of n.text)i+=e;return i.trim()}catch(n){let t=n instanceof Error?n.message:String(n);if(n instanceof Error&&"cause"in n&&n.cause instanceof Error&&(t+=`
${n.cause.message}`,d++<2&&n.cause.message.includes("exceeds token limit"))){c-=500*d;continue}throw Error(`Unable to generate commit message: (${H(e.provider.name)}:${n.code}) ${t}`)}}}finally{s?.dispose()}}async generateDraftMessage(e,t,n,a){let i=a?.codeSuggestion===!0?u.H.get("experimental.generateCodeSuggestionMessagePrompt"):u.H.get("experimental.generateCloudPatchMessagePrompt");return i.endsWith(".")||(i+="."),this.generateMessage(e,t,n,{systemPrompt:a?.codeSuggestion===!0?w:y,customPrompt:i,contextName:a?.codeSuggestion===!0?"code suggestion title and description":"cloud patch title and description"},null!=a?{cancellation:a.cancellation,context:a.context}:void 0)}async generateCommitMessage(e,t,n,a){let i=u.H.get("experimental.generateCommitMessagePrompt");return i.endsWith(".")||(i+="."),this.generateMessage(e,t,n,{systemPrompt:f,customPrompt:i,contextName:"commit message"},a)}async explainChanges(e,t,n,i,o){let r,s;let l=await this.getChatModel(e);if(null==l)return;r=o?.cancellation==null?(s=new a.CancellationTokenSource).token:o.cancellation;let d=0,c=_(e,3e3)-1e3;try{for(;;){let o=n.substring(0,c),s=[a.LanguageModelChatMessage.User(`You are an advanced AI programming assistant tasked with summarizing code changes into an explanation that is both easy to understand and meaningful. Construct an explanation that:
- Concisely synthesizes meaningful information from the provided code diff
- Incorporates any additional context provided by the user to understand the rationale behind the code changes
- Places the emphasis on the 'why' of the change, clarifying its benefits or addressing the problem that necessitated the change, beyond just detailing the 'what' has changed

Do not make any assumptions or invent details that are not supported by the code diff or the user-provided context.`),a.LanguageModelChatMessage.User(`Here is additional context provided by the author of the changes, which should provide some explanation to why these changes where made. Please strongly consider this information when generating your explanation:

${t}`),a.LanguageModelChatMessage.User(`Now, kindly explain the following code diff in a way that would be clear to someone reviewing or trying to understand these changes:

${o}`),a.LanguageModelChatMessage.User("Remember to frame your explanation in a way that is suitable for a reviewer to quickly grasp the essence of the changes, the issues they resolve, and their implications on the codebase.")];i["retry.count"]=d,i["input.length"]=(i["input.length"]??0)+(0,p.cz)(s,e=>e.content.length);try{let t=await l.sendRequest(s,{},r);n.length>c&&a.window.showWarningMessage(`The diff of the changes had to be truncated to ${c} characters to fit within ${H(e.provider.name)} limits.`);let i="";for await(let e of t.text)i+=e;return i.trim()}catch(n){let t=n instanceof Error?n.message:String(n);if(n instanceof Error&&"cause"in n&&n.cause instanceof Error&&(t+=`
${n.cause.message}`,d++<2&&n.cause.message.includes("exceeds token limit"))){c-=500*d;continue}throw Error(`Unable to explain changes: (${H(e.provider.name)}:${n.code}) ${t}`)}}}finally{s?.dispose()}}};function E(e){return{id:`${e.vendor}:${e.family}`,name:`${(0,I.ZH)(e.vendor)} ${e.name}`,vendor:e.vendor,selector:{vendor:e.vendor,family:e.family},maxTokens:e.maxInputTokens,provider:{id:S.id,name:(0,I.ZH)(e.vendor)}}}function H(e){return e.endsWith("s")?`${e}'`:`${e}'s`}let z=new Map([["openai",OpenAIProvider],["anthropic",AnthropicProvider],["gemini",GeminiProvider]]);(0,c.Av)("language-models")&&z.set("vscode",VSCodeAIProvider);let AIProviderService=class AIProviderService{constructor(e){this.container=e}_provider;_model;dispose(){this._provider?.dispose()}get currentProviderId(){return this._provider?.id}getConfiguredModel(){let e=u.H.get("ai.experimental.model")??void 0;if(null!=e){let[t,n]=e.split(":");if(null!=t&&this.supports(t)&&(null!=n||"vscode"===t&&null!=(n=u.H.get("ai.experimental.vscode.model"))&&/^(.+):(.+)$/.test(n)))return{provider:t,model:n}}}async getModels(){let e=[...z.values()].map(e=>new e(this.container));return(await Promise.allSettled(e.map(e=>e.getModels()))).flatMap(e=>(0,g.Ro)(e,[]))}async getModel(e){let t=this.getConfiguredModel();if(!e?.force&&t?.provider!=null&&t?.model!=null){let e=await this.getOrUpdateModel(t.provider,t.model);if(null!=e)return e}if(e?.silent)return;let n=await h(this.container,t);if(null!=n)return this.getOrUpdateModel(n.model)}async getOrUpdateModel(e,t){let n,a;n="string"==typeof e?e:(a=e).provider.id;let i=!1;if(n!==this._provider?.id){i=!0,this._provider?.dispose();let e=z.get(n);if(null==e){this._provider=void 0,this._model=void 0;return}this._provider=new e(this.container)}if(null==a){if(null!=t&&t===this._model?.id)a=this._model;else if(i=!0,null==(a=(await this._provider.getModels())?.find(e=>e.id===t))){this._model=void 0;return}}else a.id!==this._model?.id&&(i=!0);return i&&(a.provider.id===S.id?(await u.H.updateEffective("ai.experimental.model","vscode"),await u.H.updateEffective("ai.experimental.vscode.model",a.id)):await u.H.updateEffective("ai.experimental.model",`${a.provider.id}:${a.id}`)),this._model=a,a}async generateCommitMessage(e,t,n){let o=await this.getChanges(e);if(null==o)return;let r=await this.getModel();if(null==r)return;let s=this._provider,l={type:"commitMessage","model.id":r.id,"model.provider.id":r.provider.id,"model.provider.name":r.provider.name,"retry.count":0},d={source:t.source};if(!await D(r,this.container.storage)){this.container.telemetry.sendEvent("ai/generate",{...l,"failed.reason":"user-declined"},d);return}if(n?.cancellation?.isCancellationRequested){this.container.telemetry.sendEvent("ai/generate",{...l,"failed.reason":"user-cancelled"},d);return}let c=s.generateCommitMessage(r,o,l,{cancellation:n?.cancellation,context:n?.context}),h=Date.now();try{let e=await (n?.progress!=null?a.window.withProgress(n.progress,()=>c):c);return l["output.length"]=e?.length,this.container.telemetry.sendEvent("ai/generate",{...l,duration:Date.now()-h},d),e}catch(e){throw this.container.telemetry.sendEvent("ai/generate",{...l,duration:Date.now()-h,...e instanceof i.AL?{"failed.reason":"user-cancelled"}:{"failed.reason":"error","failed.error":String(e)}},d),e}}async generateDraftMessage(e,t,n){let o=await this.getChanges(e);if(null==o)return;let r=await this.getModel();if(null==r)return;let s=this._provider,l={type:"draftMessage",draftType:t.type,"model.id":r.id,"model.provider.id":r.provider.id,"model.provider.name":r.provider.name,"retry.count":0},d={source:t.source};if(!await D(r,this.container.storage)){this.container.telemetry.sendEvent("ai/generate",{...l,"failed.reason":"user-declined"},d);return}if(n?.cancellation?.isCancellationRequested){this.container.telemetry.sendEvent("ai/generate",{...l,"failed.reason":"user-cancelled"},d);return}let c=s.generateDraftMessage(r,o,l,{cancellation:n?.cancellation,context:n?.context,codeSuggestion:n?.codeSuggestion}),h=Date.now();try{let e=await (n?.progress!=null?a.window.withProgress(n.progress,()=>c):c);return l["output.length"]=e?.length,this.container.telemetry.sendEvent("ai/generate",{...l,duration:Date.now()-h},d),e}catch(e){throw this.container.telemetry.sendEvent("ai/generate",{...l,duration:Date.now()-h,...e instanceof i.AL?{"failed.reason":"user-cancelled"}:{"failed.reason":"error","failed.error":String(e)}},d),e}}async getChanges(e,t){let n;if(Array.isArray(e))n=e.join("\n");else{let a=(0,s.Z6)(e)?e:this.container.git.getRepository(e);if(null==a)throw Error("Unable to find repository");let i=await this.container.git.getDiff(a.uri,r.id);if(!i?.contents&&(i=await this.container.git.getDiff(a.uri,r.SU),!i?.contents))throw Error("No changes to generate a commit message from.");if(t?.cancellation?.isCancellationRequested)return;n=i.contents}return n}async explainCommit(e,t,n){let r=await this.container.git.getDiff(e.repoPath,e.ref);if(!r?.contents)throw Error("No changes found to explain.");let s=await this.getModel();if(null==s)return;let l=this._provider,d={type:"change",changeType:t.type,"model.id":s.id,"model.provider.id":s.provider.id,"model.provider.name":s.provider.name,"retry.count":0},c={source:t.source};if(!await D(s,this.container.storage)){this.container.telemetry.sendEvent("ai/explain",{...d,"failed.reason":"user-declined"},c);return}let h=(0,o.WM)(e)?e:await this.container.git.getCommit(e.repoPath,e.ref);if(null==h)throw Error("Unable to find commit");if(h.hasFullDetails()||(await h.ensureFullDetails(),(0,o.aQ)(h)),n?.cancellation?.isCancellationRequested){this.container.telemetry.sendEvent("ai/explain",{...d,"failed.reason":"user-cancelled"},c);return}let u=l.explainChanges(s,h.message,r.contents,d,{cancellation:n?.cancellation}),g=Date.now();try{let e=await (n?.progress!=null?a.window.withProgress(n.progress,()=>u):u);return d["output.length"]=e?.length,this.container.telemetry.sendEvent("ai/explain",{...d,duration:Date.now()-g},c),e}catch(e){throw this.container.telemetry.sendEvent("ai/explain",{...d,duration:Date.now()-g,...e instanceof i.AL?{"failed.reason":"user-cancelled"}:{"failed.reason":"error","failed.error":String(e)}},c),e}}async reset(e){let t,{_provider:n}=this;null==n&&(await this.getModel({silent:!0}),n=this._provider);let i={title:"Reset Current"},o={title:"Reset All"},r={title:"Cancel",isCloseAffordance:!0};if(t=e?o:null==n?await a.window.showInformationMessage("Do you want to reset all of the stored AI keys?",{modal:!0},o,r):await a.window.showInformationMessage(`Do you want to reset the stored key for the current provider (${n.name}) or reset all of the stored AI keys?`,{modal:!0},i,o,r),null!=n&&t===i)a.env.clipboard.writeText(await this.container.storage.getSecret(`gitlens.${n.id}.key`)??""),this.container.storage.deleteSecret(`gitlens.${n.id}.key`),this.container.storage.delete(`confirm:ai:tos:${n.id}`),this.container.storage.deleteWorkspace(`confirm:ai:tos:${n.id}`);else if(t===o){let e=[];for(let[t]of z)e.push(await this.container.storage.getSecret(`gitlens.${t}.key`));for(let[t]of(a.env.clipboard.writeText(e.join("\n")),z))this.container.storage.deleteSecret(`gitlens.${t}.key`);this.container.storage.deleteWithPrefix("confirm:ai:tos"),this.container.storage.deleteWorkspaceWithPrefix("confirm:ai:tos")}}supports(e){return z.has(e)}async switchModel(){await this.getModel({force:!0})}};async function D(e,t){if(t.get(`confirm:ai:tos:${e.provider.id}`,!1)||t.getWorkspace(`confirm:ai:tos:${e.provider.id}`,!1))return!0;let n={title:"Continue"},i={title:"Always for this Workspace"},o={title:"Always"},r=await a.window.showInformationMessage(`GitLens experimental AI features require sending a diff of the code changes to ${e.provider.name} for analysis. This may contain sensitive information.

Do you want to continue?`,{modal:!0},n,i,o,{title:"Cancel",isCloseAffordance:!0});return r===n||(r===i?(t.storeWorkspace(`confirm:ai:tos:${e.provider.id}`,!0),!0):r===o&&(t.store(`confirm:ai:tos:${e.provider.id}`,!0),!0))}function _(e,t){let n=3.1*e.maxTokens-t/3.1;return Math.floor(n-.1*n)}async function N(e,t){let n=await e.getSecret(`gitlens.${t.id}.key`);if(!n){let i=a.window.createInputBox();i.ignoreFocusOut=!0;let o=[];try{let e={iconPath:new a.ThemeIcon("link-external"),tooltip:`Open the ${t.name} API Key Page`};n=await new Promise(n=>{o.push(i.onDidHide(()=>n(void 0)),i.onDidChangeValue(e=>{if(e&&!t.validator(e)){i.validationMessage=`Please enter a valid ${t.name} API key`;return}i.validationMessage=void 0}),i.onDidAccept(()=>{let e=i.value.trim();if(!e||!t.validator(e)){i.validationMessage=`Please enter a valid ${t.name} API key`;return}n(e)}),i.onDidTriggerButton(n=>{n===e&&a.env.openExternal(a.Uri.parse(t.url))})),i.password=!0,i.title=`Connect to ${t.name}`,i.placeholder=`Please enter your ${t.name} API key to use this feature`,i.prompt=`Enter your [${t.name} API Key](${t.url} "Get your ${t.name} API key")`,i.buttons=[e],i.show()})}finally{i.dispose(),o.forEach(e=>void e.dispose())}if(!n)return;e.storeSecret(`gitlens.${t.id}.key`,n)}return n}function U(e,t="\n\n"){let n=e.indexOf(t)??0;return{title:n>-1?e.substring(0,n):e,description:n>-1?e.substring(n+t.length):void 0}}}};